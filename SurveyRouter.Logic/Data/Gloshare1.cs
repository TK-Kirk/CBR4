

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "ServiceAPI\Web.config"
//     Connection String Name: "GloshareContext"
//     Connection String:      "data source=localhost;initial catalog=Gloshare;persist security info=True;user id=gloshare;password=**zapped**;;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace SurveyRouter.Logic.Data
{
    using System.Linq;

    #region Unit of work

    public interface IGloshareDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Affiliate> Affiliates { get; set; } // Affiliate
        System.Data.Entity.DbSet<AffiliateCountry> AffiliateCountries { get; set; } // AffiliateCountry
        System.Data.Entity.DbSet<AffiliateSub> AffiliateSubs { get; set; } // AffiliateSub
        System.Data.Entity.DbSet<AllInboxClikBackup> AllInboxClikBackups { get; set; } // allInboxClikBackup
        System.Data.Entity.DbSet<AweberDemoUpdate> AweberDemoUpdates { get; set; } // AweberDemoUpdate
        System.Data.Entity.DbSet<BatchFileExportLeadsSent> BatchFileExportLeadsSents { get; set; } // BatchFileExportLeadsSent
        System.Data.Entity.DbSet<CbrConsent> CbrConsents { get; set; } // CBRConsent
        System.Data.Entity.DbSet<CbrEmailAddressChange> CbrEmailAddressChanges { get; set; } // CBREmailAddressChange
        System.Data.Entity.DbSet<CbrEmailDailyBatchCounter> CbrEmailDailyBatchCounters { get; set; } // CBREmailDailyBatchCounter
        System.Data.Entity.DbSet<CbrJobCode> CbrJobCodes { get; set; } // CBRJobCode
        System.Data.Entity.DbSet<CbrLead> CbrLeads { get; set; } // CBRLead
        System.Data.Entity.DbSet<CbrLeadStageInsert> CbrLeadStageInserts { get; set; } // CBRLeadStageInsert
        System.Data.Entity.DbSet<CbrLeadStageUpdate> CbrLeadStageUpdates { get; set; } // CBRLeadStageUpdate
        System.Data.Entity.DbSet<CbrPayout> CbrPayouts { get; set; } // CBRPayout
        System.Data.Entity.DbSet<CbrQuestion> CbrQuestions { get; set; } // CBRQuestion
        System.Data.Entity.DbSet<CbrQuestionAnswer> CbrQuestionAnswers { get; set; } // CBRQuestionAnswers
        System.Data.Entity.DbSet<CbrQuestionDropdown> CbrQuestionDropdowns { get; set; } // CBRQuestionDropdown
        System.Data.Entity.DbSet<CbrSignup> CbrSignups { get; set; } // CBRSignup
        System.Data.Entity.DbSet<CbrSignupError> CbrSignupErrors { get; set; } // CBRSignupError
        System.Data.Entity.DbSet<CbrSurvey> CbrSurveys { get; set; } // CBRSurvey
        System.Data.Entity.DbSet<CbrSurveyBackup> CbrSurveyBackups { get; set; } // CBRSurveyBackup
        System.Data.Entity.DbSet<CbrSurveyInstruction> CbrSurveyInstructions { get; set; } // CBRSurveyInstruction
        System.Data.Entity.DbSet<CbrSurveyQuestion> CbrSurveyQuestions { get; set; } // CBRSurveyQuestion
        System.Data.Entity.DbSet<CbrSurveyStatu> CbrSurveyStatus { get; set; } // CBRSurveyStatus
        System.Data.Entity.DbSet<CbrSurveyStatusOutput> CbrSurveyStatusOutputs { get; set; } // cbrSurveyStatusOutput
        System.Data.Entity.DbSet<CbrSurveyStatusType> CbrSurveyStatusTypes { get; set; } // CBRSurveyStatusType
        System.Data.Entity.DbSet<CbrSurveyStatusWithBadEmail> CbrSurveyStatusWithBadEmails { get; set; } // CBRSurveyStatusWithBadEmail
        System.Data.Entity.DbSet<CbrSurveyStatusWithDupPay> CbrSurveyStatusWithDupPays { get; set; } // CBRSurveyStatusWithDupPay
        System.Data.Entity.DbSet<CbrSurveyTarget> CbrSurveyTargets { get; set; } // CBRSurveyTarget
        System.Data.Entity.DbSet<CbrSurveyWithdraw> CbrSurveyWithdraws { get; set; } // CBRSurveyWithdraw
        System.Data.Entity.DbSet<CbrVerification> CbrVerifications { get; set; } // CBRVerification
        System.Data.Entity.DbSet<CbrZipVerified> CbrZipVerifieds { get; set; } // CBRZipVerified
        System.Data.Entity.DbSet<Coreg> Coregs { get; set; } // Coreg
        System.Data.Entity.DbSet<CoregCampaign> CoregCampaigns { get; set; } // CoregCampaign
        System.Data.Entity.DbSet<CoregError> CoregErrors { get; set; } // CoregError
        System.Data.Entity.DbSet<CoregLeadAccepted> CoregLeadAccepteds { get; set; } // CoregLeadAccepted
        System.Data.Entity.DbSet<CoregPartner> CoregPartners { get; set; } // CoregPartner
        System.Data.Entity.DbSet<Country> Countries { get; set; } // Country
        System.Data.Entity.DbSet<CountryLanguageDefault> CountryLanguageDefaults { get; set; } // CountryLanguageDefault
        System.Data.Entity.DbSet<CpaNotification> CpaNotifications { get; set; } // CPANotification
        System.Data.Entity.DbSet<CpaNotificationJob> CpaNotificationJobs { get; set; } // CPANotificationJob
        System.Data.Entity.DbSet<CpaNotificationNewSub> CpaNotificationNewSubs { get; set; } // CPANotificationNewSub
        System.Data.Entity.DbSet<CpaNotificationType> CpaNotificationTypes { get; set; } // CPANotificationType
        System.Data.Entity.DbSet<DashboardOverlay> DashboardOverlays { get; set; } // DashboardOverlay
        System.Data.Entity.DbSet<DashboardOverlayEmail> DashboardOverlayEmails { get; set; } // DashboardOverlayEmail
        System.Data.Entity.DbSet<DoiRotatingOffer> DoiRotatingOffers { get; set; } // DoiRotatingOffer
        System.Data.Entity.DbSet<EducationCode> EducationCodes { get; set; } // EducationCode
        System.Data.Entity.DbSet<GeoLiteCityBlock> GeoLiteCityBlocks { get; set; } // GeoLiteCity-Blocks
        System.Data.Entity.DbSet<GeoLiteCityLocation> GeoLiteCityLocations { get; set; } // GeoLiteCity-Location
        System.Data.Entity.DbSet<InstructionBullet> InstructionBullets { get; set; } // InstructionBullet
        System.Data.Entity.DbSet<IpCountry> IpCountries { get; set; } // IPCountry
        System.Data.Entity.DbSet<IpCountryOld> IpCountryOlds { get; set; } // IPCountryOld
        System.Data.Entity.DbSet<IpCountyBackup> IpCountyBackups { get; set; } // IPCountyBackup
        System.Data.Entity.DbSet<IpCountyNewBackup> IpCountyNewBackups { get; set; } // IPCountyNewBackup
        System.Data.Entity.DbSet<IpLog> IpLogs { get; set; } // IpLog
        System.Data.Entity.DbSet<JobData> JobDatas { get; set; } // JobData
        System.Data.Entity.DbSet<Language> Languages { get; set; } // Language
        System.Data.Entity.DbSet<LeadReversal> LeadReversals { get; set; } // LeadReversal
        System.Data.Entity.DbSet<LoggedInFromClik> LoggedInFromCliks { get; set; } // LoggedInFromClik
        System.Data.Entity.DbSet<MobilelLead> MobilelLeads { get; set; } // MobilelLead
        System.Data.Entity.DbSet<Occupation> Occupations { get; set; } // Occupation
        System.Data.Entity.DbSet<OccupationEducation> OccupationEducations { get; set; } // OccupationEducation
        System.Data.Entity.DbSet<OccupationIncome> OccupationIncomes { get; set; } // OccupationIncome
        System.Data.Entity.DbSet<OccupationSector> OccupationSectors { get; set; } // OccupationSector
        System.Data.Entity.DbSet<Offer> Offers { get; set; } // Offer
        System.Data.Entity.DbSet<OptInEmailLog> OptInEmailLogs { get; set; } // OptInEmailLog
        System.Data.Entity.DbSet<OptInEmailVerbage> OptInEmailVerbages { get; set; } // OptInEmailVerbage
        System.Data.Entity.DbSet<OptInEmailVerbageListrakQueue> OptInEmailVerbageListrakQueues { get; set; } // OptInEmailVerbageListrakQueue
        System.Data.Entity.DbSet<OptInEmailVerbageTestSend> OptInEmailVerbageTestSends { get; set; } // OptInEmailVerbageTestSend
        System.Data.Entity.DbSet<OptInLead> OptInLeads { get; set; } // OptInLead
        System.Data.Entity.DbSet<PostQueue> PostQueues { get; set; } // PostQueue
        System.Data.Entity.DbSet<ProcessedSurveyId> ProcessedSurveyIds { get; set; } // ProcessedSurveyIDs
        System.Data.Entity.DbSet<Referral> Referrals { get; set; } // Referral
        System.Data.Entity.DbSet<ReUploadElab> ReUploadElabs { get; set; } // ReUploadElabs
        System.Data.Entity.DbSet<RouterAction> RouterActions { get; set; } // RouterAction
        System.Data.Entity.DbSet<RouterContact> RouterContacts { get; set; } // RouterContact
        System.Data.Entity.DbSet<RouterContactPrecisionSample> RouterContactPrecisionSamples { get; set; } // RouterContactPrecisionSample
        System.Data.Entity.DbSet<RouterHost> RouterHosts { get; set; } // RouterHost
        System.Data.Entity.DbSet<RouterPostBackPrecisionSample> RouterPostBackPrecisionSamples { get; set; } // RouterPostBackPrecisionSample
        System.Data.Entity.DbSet<RouterPostBackYourSurvey> RouterPostBackYourSurveys { get; set; } // RouterPostBackYourSurveys
        System.Data.Entity.DbSet<RouterStatusPrecisionSample> RouterStatusPrecisionSamples { get; set; } // RouterStatusPrecisionSamples
        System.Data.Entity.DbSet<RouterStatusYourSurvey> RouterStatusYourSurveys { get; set; } // RouterStatusYourSurveys
        System.Data.Entity.DbSet<RouterSurveyPrecisionSample> RouterSurveyPrecisionSamples { get; set; } // RouterSurveyPrecisionSample
        System.Data.Entity.DbSet<RouterSurveyYourSurvey> RouterSurveyYourSurveys { get; set; } // RouterSurveyYourSurvey
        System.Data.Entity.DbSet<ScrubLead> ScrubLeads { get; set; } // ScrubLead
        System.Data.Entity.DbSet<ScrubReportConfig> ScrubReportConfigs { get; set; } // ScrubReportConfig
        System.Data.Entity.DbSet<SiteBlacklist> SiteBlacklists { get; set; } // SiteBlacklist
        System.Data.Entity.DbSet<SiteBlacklistIpAddress> SiteBlacklistIpAddresses { get; set; } // SiteBlacklistIpAddress
        System.Data.Entity.DbSet<SmartEmailLinkClick> SmartEmailLinkClicks { get; set; } // SmartEmailLinkClick
        System.Data.Entity.DbSet<SmartEmailLinkConfig> SmartEmailLinkConfigs { get; set; } // SmartEmailLinkConfig
        System.Data.Entity.DbSet<SmartEmailLinkField> SmartEmailLinkFields { get; set; } // SmartEmailLinkFields
        System.Data.Entity.DbSet<SmartEmailLinkTarget> SmartEmailLinkTargets { get; set; } // SmartEmailLinkTarget
        System.Data.Entity.DbSet<SmartExitLinkConfig> SmartExitLinkConfigs { get; set; } // SmartExitLinkConfig
        System.Data.Entity.DbSet<SmartExitLinkField> SmartExitLinkFields { get; set; } // SmartExitLinkFields
        System.Data.Entity.DbSet<SmartExitLinkTarget> SmartExitLinkTargets { get; set; } // SmartExitLinkTarget
        System.Data.Entity.DbSet<SmartLinkAiLog> SmartLinkAiLogs { get; set; } // SmartLinkAILog
        System.Data.Entity.DbSet<SmartLinkLog> SmartLinkLogs { get; set; } // SmartLinkLog
        System.Data.Entity.DbSet<SmartWebLinkConfig> SmartWebLinkConfigs { get; set; } // SmartWebLinkConfig
        System.Data.Entity.DbSet<SmartWebLinkField> SmartWebLinkFields { get; set; } // SmartWebLinkFields
        System.Data.Entity.DbSet<SmartWebLinkLog> SmartWebLinkLogs { get; set; } // SmartWebLinkLog
        System.Data.Entity.DbSet<SmartWebLinkTarget> SmartWebLinkTargets { get; set; } // SmartWebLinkTarget
        System.Data.Entity.DbSet<State> States { get; set; } // States
        System.Data.Entity.DbSet<UserNew> UserNews { get; set; } // UserNews
        System.Data.Entity.DbSet<VerifyZipFailure> VerifyZipFailures { get; set; } // VerifyZipFailure
        System.Data.Entity.DbSet<VwCbrSurveyStatusWithPending> VwCbrSurveyStatusWithPendings { get; set; } // vwCBRSurveyStatusWithPending
        System.Data.Entity.DbSet<VwDebugIp> VwDebugIps { get; set; } // vwDebugIP
        System.Data.Entity.DbSet<VwJobCode> VwJobCodes { get; set; } // vwJobCodes
        System.Data.Entity.DbSet<VwOptInLeadKey> VwOptInLeadKeys { get; set; } // vwOptInLeadKeys
        System.Data.Entity.DbSet<VwOptInLeadPjDegree> VwOptInLeadPjDegrees { get; set; } // vwOptInLeadPJDegree
        System.Data.Entity.DbSet<VwOptInLeadSurvey> VwOptInLeadSurveys { get; set; } // vwOptInLeadSurveys
        System.Data.Entity.DbSet<VwOptInLeadUser> VwOptInLeadUsers { get; set; } // vwOptInLeadUsers
        System.Data.Entity.DbSet<VwRouterStatusPrecisionSurvey> VwRouterStatusPrecisionSurveys { get; set; } // vwRouterStatusPrecisionSurvey
        System.Data.Entity.DbSet<WeeklySurveyAnswer> WeeklySurveyAnswers { get; set; } // WeeklySurveyAnswers
        System.Data.Entity.DbSet<WeeklySurveyConfig> WeeklySurveyConfigs { get; set; } // WeeklySurveyConfig
        System.Data.Entity.DbSet<WithdrawReason> WithdrawReasons { get; set; } // WithdrawReason

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int CommandExecute(string command, string comment, int? mode, string execute);
        // CommandExecuteAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<DailyReportCostCpaReturnModel> DailyReportCostCpa(System.DateTime? startDate, System.DateTime? endDate);
        System.Collections.Generic.List<DailyReportCostCpaReturnModel> DailyReportCostCpa(System.DateTime? startDate, System.DateTime? endDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportCostCpaReturnModel>> DailyReportCostCpaAsync(System.DateTime? startDate, System.DateTime? endDate);

        System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId);
        System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel>> DailyReportCostOfLeadsAsync(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId);

        System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate);
        System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRevenueCpaReturnModel>> DailyReportRevenueCpaAsync(System.DateTime? startDate, System.DateTime? endDate);

        System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate);
        System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRoiByTypeReturnModel>> DailyReportRoiByTypeAsync(System.DateTime? startDate, System.DateTime? endDate);

        int DevPurgeSurveyResultsForEmail(string emailAddress, int? surveyId);
        // DevPurgeSurveyResultsForEmailAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int FixIp(string emailAddress, string ip);
        // FixIpAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck);
        System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel>> GetLeadsByDayForFraudAsync(System.DateTime? dateToCheck);

        System.Collections.Generic.List<GetMobileEarningsReturnModel> GetMobileEarnings(System.Guid? mobileUserId);
        System.Collections.Generic.List<GetMobileEarningsReturnModel> GetMobileEarnings(System.Guid? mobileUserId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetMobileEarningsReturnModel>> GetMobileEarningsAsync(System.Guid? mobileUserId);

        System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd);
        System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetOffersReportReturnModel>> GetOffersReportAsync(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd);

        System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate);
        System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySignupDateReturnModel>> GetRoiBySignupDateAsync(System.DateTime? signupDate);

        System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId);
        System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySubReturnModel>> GetRoiBySubAsync(string affiliateId, string offerId, string subId);

        System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber);
        System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel>> GetRoiForLast100SignupsAsync(string affiliateId, string offerId, string subId, int? sampleNumber);

        System.Collections.Generic.List<GetRouterStatsReturnModel> GetRouterStats();
        System.Collections.Generic.List<GetRouterStatsReturnModel> GetRouterStats(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetRouterStatsReturnModel>> GetRouterStatsAsync();

        System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList);
        System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetSignupsWithRevenueReturnModel>> GetSignupsWithRevenueAsync(string affiliateId, string offerId, string subId, string emailList);

        System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate();
        System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetTotalPayoutToDateReturnModel>> GetTotalPayoutToDateAsync();

        HasEmailConvertedForIncentReturnModel HasEmailConvertedForIncent(string emailAddress);
        System.Threading.Tasks.Task<HasEmailConvertedForIncentReturnModel> HasEmailConvertedForIncentAsync(string emailAddress);

        int IndexOptimize(string databases, string fragmentationHighLob, string fragmentationHighNonLob, string fragmentationMediumLob, string fragmentationMediumNonLob, string fragmentationLowLob, string fragmentationLowNonLob, int? fragmentationLevel1, int? fragmentationLevel2, int? pageCountLevel, string sortInTempdb, int? maxDop, int? fillFactor, string lobCompaction, int? statisticsSample, string partitionLevel, int? timeLimit, string indexes, string padIndex, string statisticsResample, string updateColumnStatistics, string onlyModifiedStatistics, string execute);
        // IndexOptimizeAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertOptInLeadForClik(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string ip, bool? clik, System.DateTime? insertDate, string address);
        // InsertOptInLeadForClikAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertOptInLeadForPjd(string emailAddress, string firstname, string offerId, string affiliateId, string subId, string countryId, string ip);
        // InsertOptInLeadForPjdAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        IsNewSubIdReturnModel IsNewSubId(string subId, System.DateTime? searchBeforeDate);
        System.Threading.Tasks.Task<IsNewSubIdReturnModel> IsNewSubIdAsync(string subId, System.DateTime? searchBeforeDate);

        int Oil(string emailAddress);
        // OilAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadCompleteCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string password);
        // OptInLeadCompleteCoregAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        OptInLeadIsClikReturnModel OptInLeadIsClik(string emailAddress);
        System.Threading.Tasks.Task<OptInLeadIsClikReturnModel> OptInLeadIsClikAsync(string emailAddress);

        int OptInLeadSetPassword(string emailAddress, string password);
        // OptInLeadSetPasswordAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdate(int? siteVertical, string emailAddress, string salutation, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string occupation, string income, string homeOwnership, string education, string maritalStatus, int? children, string ethnicity, string password, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string selectedLanguageId, System.DateTime? optInDate, System.DateTime? lastRunDate, int? lastSendOnDay, System.DateTime? optOutDate, bool? doNotSendTo, System.DateTime? confirmedDate, bool? thirdPartyListsUpdated, System.DateTime? insertDate, string ip, string uid);
        // OptInLeadUpdateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string countryId, string address);
        // OptInLeadUpdateCoregAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoregBirthDate(string emailAddress, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string offerId, string affiliateId);
        // OptInLeadUpdateCoregBirthDateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoregCity(string emailAddress, string city, string offerId, string affiliateId);
        // OptInLeadUpdateCoregCityAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoregPhone(string offerId, string emailAddress, string phone, string affiliateId);
        // OptInLeadUpdateCoregPhoneAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoregState(string emailAddress, string state, string offerId, string affiliateId);
        // OptInLeadUpdateCoregStateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateforClikUpgrade(string emailAddress, bool? clik);
        // OptInLeadUpdateforClikUpgradeAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateUserInfo(string emailAddress, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string ethnicity, bool? clik);
        // OptInLeadUpdateUserInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId);
        System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<ProcessClickCreditReturnModel>> ProcessClickCreditAsync(string clickCode, string email, int? surveyId);

        System.Collections.Generic.List<RouterContactInsertsReturnModel> RouterContactInserts(int? interval);
        System.Collections.Generic.List<RouterContactInsertsReturnModel> RouterContactInserts(int? interval, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<RouterContactInsertsReturnModel>> RouterContactInsertsAsync(int? interval);

        int SpDoi2ApplySignupBonus(string emailAddress);
        // SpDoi2ApplySignupBonusAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecChangeEmail(string fromEmailAddress, string toEmailAddress);
        // SpEecChangeEmailAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecCombineEmailAccounts(string fromEmailAddress, string toEmailAddress);
        // SpEecCombineEmailAccountsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango();
        System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel>> SpEecGetAwaitingEmailAddressesJangoAsync();

        System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak();
        System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>> SpEecGetAwaitingOfferIdSendOnDayListrakAsync();

        int SpEecGetCostPerLead(string affiliateId, string subId, string offerId, out decimal? cost);
        // SpEecGetCostPerLeadAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecGetReceiveShareMultiplier(string affiliateId, string subId, string offerId, out double? receiveShareMultiplier);
        // SpEecGetReceiveShareMultiplierAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecIsDailyCapped(string affiliateId, string subId, string offerId, out bool? capped);
        // SpEecIsDailyCappedAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecIsMonthlyCapped(string affiliateId, string subId, string offerId, out bool? capped);
        // SpEecIsMonthlyCappedAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecIsSubEnabled(string affiliateId, string subId, string offerId, out bool? enabled);
        // SpEecIsSubEnabledAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress);
        System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel>> SpToaGetCountryIdsForUserAsync(string emailAddress);

        System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress);
        System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel>> SpToaGetSurveyPanelSignupCountAsync(string emailAddress);

        int UpdateUserNewsWithPayout(string emailAddress, System.DateTime? requestDate);
        // UpdateUserNewsWithPayoutAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GloshareDbContext : System.Data.Entity.DbContext, IGloshareDbContext
    {
        public System.Data.Entity.DbSet<Affiliate> Affiliates { get; set; } // Affiliate
        public System.Data.Entity.DbSet<AffiliateCountry> AffiliateCountries { get; set; } // AffiliateCountry
        public System.Data.Entity.DbSet<AffiliateSub> AffiliateSubs { get; set; } // AffiliateSub
        public System.Data.Entity.DbSet<AllInboxClikBackup> AllInboxClikBackups { get; set; } // allInboxClikBackup
        public System.Data.Entity.DbSet<AweberDemoUpdate> AweberDemoUpdates { get; set; } // AweberDemoUpdate
        public System.Data.Entity.DbSet<BatchFileExportLeadsSent> BatchFileExportLeadsSents { get; set; } // BatchFileExportLeadsSent
        public System.Data.Entity.DbSet<CbrConsent> CbrConsents { get; set; } // CBRConsent
        public System.Data.Entity.DbSet<CbrEmailAddressChange> CbrEmailAddressChanges { get; set; } // CBREmailAddressChange
        public System.Data.Entity.DbSet<CbrEmailDailyBatchCounter> CbrEmailDailyBatchCounters { get; set; } // CBREmailDailyBatchCounter
        public System.Data.Entity.DbSet<CbrJobCode> CbrJobCodes { get; set; } // CBRJobCode
        public System.Data.Entity.DbSet<CbrLead> CbrLeads { get; set; } // CBRLead
        public System.Data.Entity.DbSet<CbrLeadStageInsert> CbrLeadStageInserts { get; set; } // CBRLeadStageInsert
        public System.Data.Entity.DbSet<CbrLeadStageUpdate> CbrLeadStageUpdates { get; set; } // CBRLeadStageUpdate
        public System.Data.Entity.DbSet<CbrPayout> CbrPayouts { get; set; } // CBRPayout
        public System.Data.Entity.DbSet<CbrQuestion> CbrQuestions { get; set; } // CBRQuestion
        public System.Data.Entity.DbSet<CbrQuestionAnswer> CbrQuestionAnswers { get; set; } // CBRQuestionAnswers
        public System.Data.Entity.DbSet<CbrQuestionDropdown> CbrQuestionDropdowns { get; set; } // CBRQuestionDropdown
        public System.Data.Entity.DbSet<CbrSignup> CbrSignups { get; set; } // CBRSignup
        public System.Data.Entity.DbSet<CbrSignupError> CbrSignupErrors { get; set; } // CBRSignupError
        public System.Data.Entity.DbSet<CbrSurvey> CbrSurveys { get; set; } // CBRSurvey
        public System.Data.Entity.DbSet<CbrSurveyBackup> CbrSurveyBackups { get; set; } // CBRSurveyBackup
        public System.Data.Entity.DbSet<CbrSurveyInstruction> CbrSurveyInstructions { get; set; } // CBRSurveyInstruction
        public System.Data.Entity.DbSet<CbrSurveyQuestion> CbrSurveyQuestions { get; set; } // CBRSurveyQuestion
        public System.Data.Entity.DbSet<CbrSurveyStatu> CbrSurveyStatus { get; set; } // CBRSurveyStatus
        public System.Data.Entity.DbSet<CbrSurveyStatusOutput> CbrSurveyStatusOutputs { get; set; } // cbrSurveyStatusOutput
        public System.Data.Entity.DbSet<CbrSurveyStatusType> CbrSurveyStatusTypes { get; set; } // CBRSurveyStatusType
        public System.Data.Entity.DbSet<CbrSurveyStatusWithBadEmail> CbrSurveyStatusWithBadEmails { get; set; } // CBRSurveyStatusWithBadEmail
        public System.Data.Entity.DbSet<CbrSurveyStatusWithDupPay> CbrSurveyStatusWithDupPays { get; set; } // CBRSurveyStatusWithDupPay
        public System.Data.Entity.DbSet<CbrSurveyTarget> CbrSurveyTargets { get; set; } // CBRSurveyTarget
        public System.Data.Entity.DbSet<CbrSurveyWithdraw> CbrSurveyWithdraws { get; set; } // CBRSurveyWithdraw
        public System.Data.Entity.DbSet<CbrVerification> CbrVerifications { get; set; } // CBRVerification
        public System.Data.Entity.DbSet<CbrZipVerified> CbrZipVerifieds { get; set; } // CBRZipVerified
        public System.Data.Entity.DbSet<Coreg> Coregs { get; set; } // Coreg
        public System.Data.Entity.DbSet<CoregCampaign> CoregCampaigns { get; set; } // CoregCampaign
        public System.Data.Entity.DbSet<CoregError> CoregErrors { get; set; } // CoregError
        public System.Data.Entity.DbSet<CoregLeadAccepted> CoregLeadAccepteds { get; set; } // CoregLeadAccepted
        public System.Data.Entity.DbSet<CoregPartner> CoregPartners { get; set; } // CoregPartner
        public System.Data.Entity.DbSet<Country> Countries { get; set; } // Country
        public System.Data.Entity.DbSet<CountryLanguageDefault> CountryLanguageDefaults { get; set; } // CountryLanguageDefault
        public System.Data.Entity.DbSet<CpaNotification> CpaNotifications { get; set; } // CPANotification
        public System.Data.Entity.DbSet<CpaNotificationJob> CpaNotificationJobs { get; set; } // CPANotificationJob
        public System.Data.Entity.DbSet<CpaNotificationNewSub> CpaNotificationNewSubs { get; set; } // CPANotificationNewSub
        public System.Data.Entity.DbSet<CpaNotificationType> CpaNotificationTypes { get; set; } // CPANotificationType
        public System.Data.Entity.DbSet<DashboardOverlay> DashboardOverlays { get; set; } // DashboardOverlay
        public System.Data.Entity.DbSet<DashboardOverlayEmail> DashboardOverlayEmails { get; set; } // DashboardOverlayEmail
        public System.Data.Entity.DbSet<DoiRotatingOffer> DoiRotatingOffers { get; set; } // DoiRotatingOffer
        public System.Data.Entity.DbSet<EducationCode> EducationCodes { get; set; } // EducationCode
        public System.Data.Entity.DbSet<GeoLiteCityBlock> GeoLiteCityBlocks { get; set; } // GeoLiteCity-Blocks
        public System.Data.Entity.DbSet<GeoLiteCityLocation> GeoLiteCityLocations { get; set; } // GeoLiteCity-Location
        public System.Data.Entity.DbSet<InstructionBullet> InstructionBullets { get; set; } // InstructionBullet
        public System.Data.Entity.DbSet<IpCountry> IpCountries { get; set; } // IPCountry
        public System.Data.Entity.DbSet<IpCountryOld> IpCountryOlds { get; set; } // IPCountryOld
        public System.Data.Entity.DbSet<IpCountyBackup> IpCountyBackups { get; set; } // IPCountyBackup
        public System.Data.Entity.DbSet<IpCountyNewBackup> IpCountyNewBackups { get; set; } // IPCountyNewBackup
        public System.Data.Entity.DbSet<IpLog> IpLogs { get; set; } // IpLog
        public System.Data.Entity.DbSet<JobData> JobDatas { get; set; } // JobData
        public System.Data.Entity.DbSet<Language> Languages { get; set; } // Language
        public System.Data.Entity.DbSet<LeadReversal> LeadReversals { get; set; } // LeadReversal
        public System.Data.Entity.DbSet<LoggedInFromClik> LoggedInFromCliks { get; set; } // LoggedInFromClik
        public System.Data.Entity.DbSet<MobilelLead> MobilelLeads { get; set; } // MobilelLead
        public System.Data.Entity.DbSet<Occupation> Occupations { get; set; } // Occupation
        public System.Data.Entity.DbSet<OccupationEducation> OccupationEducations { get; set; } // OccupationEducation
        public System.Data.Entity.DbSet<OccupationIncome> OccupationIncomes { get; set; } // OccupationIncome
        public System.Data.Entity.DbSet<OccupationSector> OccupationSectors { get; set; } // OccupationSector
        public System.Data.Entity.DbSet<Offer> Offers { get; set; } // Offer
        public System.Data.Entity.DbSet<OptInEmailLog> OptInEmailLogs { get; set; } // OptInEmailLog
        public System.Data.Entity.DbSet<OptInEmailVerbage> OptInEmailVerbages { get; set; } // OptInEmailVerbage
        public System.Data.Entity.DbSet<OptInEmailVerbageListrakQueue> OptInEmailVerbageListrakQueues { get; set; } // OptInEmailVerbageListrakQueue
        public System.Data.Entity.DbSet<OptInEmailVerbageTestSend> OptInEmailVerbageTestSends { get; set; } // OptInEmailVerbageTestSend
        public System.Data.Entity.DbSet<OptInLead> OptInLeads { get; set; } // OptInLead
        public System.Data.Entity.DbSet<PostQueue> PostQueues { get; set; } // PostQueue
        public System.Data.Entity.DbSet<ProcessedSurveyId> ProcessedSurveyIds { get; set; } // ProcessedSurveyIDs
        public System.Data.Entity.DbSet<Referral> Referrals { get; set; } // Referral
        public System.Data.Entity.DbSet<ReUploadElab> ReUploadElabs { get; set; } // ReUploadElabs
        public System.Data.Entity.DbSet<RouterAction> RouterActions { get; set; } // RouterAction
        public System.Data.Entity.DbSet<RouterContact> RouterContacts { get; set; } // RouterContact
        public System.Data.Entity.DbSet<RouterContactPrecisionSample> RouterContactPrecisionSamples { get; set; } // RouterContactPrecisionSample
        public System.Data.Entity.DbSet<RouterHost> RouterHosts { get; set; } // RouterHost
        public System.Data.Entity.DbSet<RouterPostBackPrecisionSample> RouterPostBackPrecisionSamples { get; set; } // RouterPostBackPrecisionSample
        public System.Data.Entity.DbSet<RouterPostBackYourSurvey> RouterPostBackYourSurveys { get; set; } // RouterPostBackYourSurveys
        public System.Data.Entity.DbSet<RouterStatusPrecisionSample> RouterStatusPrecisionSamples { get; set; } // RouterStatusPrecisionSamples
        public System.Data.Entity.DbSet<RouterStatusYourSurvey> RouterStatusYourSurveys { get; set; } // RouterStatusYourSurveys
        public System.Data.Entity.DbSet<RouterSurveyPrecisionSample> RouterSurveyPrecisionSamples { get; set; } // RouterSurveyPrecisionSample
        public System.Data.Entity.DbSet<RouterSurveyYourSurvey> RouterSurveyYourSurveys { get; set; } // RouterSurveyYourSurvey
        public System.Data.Entity.DbSet<ScrubLead> ScrubLeads { get; set; } // ScrubLead
        public System.Data.Entity.DbSet<ScrubReportConfig> ScrubReportConfigs { get; set; } // ScrubReportConfig
        public System.Data.Entity.DbSet<SiteBlacklist> SiteBlacklists { get; set; } // SiteBlacklist
        public System.Data.Entity.DbSet<SiteBlacklistIpAddress> SiteBlacklistIpAddresses { get; set; } // SiteBlacklistIpAddress
        public System.Data.Entity.DbSet<SmartEmailLinkClick> SmartEmailLinkClicks { get; set; } // SmartEmailLinkClick
        public System.Data.Entity.DbSet<SmartEmailLinkConfig> SmartEmailLinkConfigs { get; set; } // SmartEmailLinkConfig
        public System.Data.Entity.DbSet<SmartEmailLinkField> SmartEmailLinkFields { get; set; } // SmartEmailLinkFields
        public System.Data.Entity.DbSet<SmartEmailLinkTarget> SmartEmailLinkTargets { get; set; } // SmartEmailLinkTarget
        public System.Data.Entity.DbSet<SmartExitLinkConfig> SmartExitLinkConfigs { get; set; } // SmartExitLinkConfig
        public System.Data.Entity.DbSet<SmartExitLinkField> SmartExitLinkFields { get; set; } // SmartExitLinkFields
        public System.Data.Entity.DbSet<SmartExitLinkTarget> SmartExitLinkTargets { get; set; } // SmartExitLinkTarget
        public System.Data.Entity.DbSet<SmartLinkAiLog> SmartLinkAiLogs { get; set; } // SmartLinkAILog
        public System.Data.Entity.DbSet<SmartLinkLog> SmartLinkLogs { get; set; } // SmartLinkLog
        public System.Data.Entity.DbSet<SmartWebLinkConfig> SmartWebLinkConfigs { get; set; } // SmartWebLinkConfig
        public System.Data.Entity.DbSet<SmartWebLinkField> SmartWebLinkFields { get; set; } // SmartWebLinkFields
        public System.Data.Entity.DbSet<SmartWebLinkLog> SmartWebLinkLogs { get; set; } // SmartWebLinkLog
        public System.Data.Entity.DbSet<SmartWebLinkTarget> SmartWebLinkTargets { get; set; } // SmartWebLinkTarget
        public System.Data.Entity.DbSet<State> States { get; set; } // States
        public System.Data.Entity.DbSet<UserNew> UserNews { get; set; } // UserNews
        public System.Data.Entity.DbSet<VerifyZipFailure> VerifyZipFailures { get; set; } // VerifyZipFailure
        public System.Data.Entity.DbSet<VwCbrSurveyStatusWithPending> VwCbrSurveyStatusWithPendings { get; set; } // vwCBRSurveyStatusWithPending
        public System.Data.Entity.DbSet<VwDebugIp> VwDebugIps { get; set; } // vwDebugIP
        public System.Data.Entity.DbSet<VwJobCode> VwJobCodes { get; set; } // vwJobCodes
        public System.Data.Entity.DbSet<VwOptInLeadKey> VwOptInLeadKeys { get; set; } // vwOptInLeadKeys
        public System.Data.Entity.DbSet<VwOptInLeadPjDegree> VwOptInLeadPjDegrees { get; set; } // vwOptInLeadPJDegree
        public System.Data.Entity.DbSet<VwOptInLeadSurvey> VwOptInLeadSurveys { get; set; } // vwOptInLeadSurveys
        public System.Data.Entity.DbSet<VwOptInLeadUser> VwOptInLeadUsers { get; set; } // vwOptInLeadUsers
        public System.Data.Entity.DbSet<VwRouterStatusPrecisionSurvey> VwRouterStatusPrecisionSurveys { get; set; } // vwRouterStatusPrecisionSurvey
        public System.Data.Entity.DbSet<WeeklySurveyAnswer> WeeklySurveyAnswers { get; set; } // WeeklySurveyAnswers
        public System.Data.Entity.DbSet<WeeklySurveyConfig> WeeklySurveyConfigs { get; set; } // WeeklySurveyConfig
        public System.Data.Entity.DbSet<WithdrawReason> WithdrawReasons { get; set; } // WithdrawReason

        static GloshareDbContext()
        {
            System.Data.Entity.Database.SetInitializer<GloshareDbContext>(null);
        }

        public GloshareDbContext()
            : base("Name=GloshareContext")
        {
            InitializePartial();
        }

        public GloshareDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public GloshareDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public GloshareDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public GloshareDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AffiliateConfiguration());
            modelBuilder.Configurations.Add(new AffiliateCountryConfiguration());
            modelBuilder.Configurations.Add(new AffiliateSubConfiguration());
            modelBuilder.Configurations.Add(new AllInboxClikBackupConfiguration());
            modelBuilder.Configurations.Add(new AweberDemoUpdateConfiguration());
            modelBuilder.Configurations.Add(new BatchFileExportLeadsSentConfiguration());
            modelBuilder.Configurations.Add(new CbrConsentConfiguration());
            modelBuilder.Configurations.Add(new CbrEmailAddressChangeConfiguration());
            modelBuilder.Configurations.Add(new CbrEmailDailyBatchCounterConfiguration());
            modelBuilder.Configurations.Add(new CbrJobCodeConfiguration());
            modelBuilder.Configurations.Add(new CbrLeadConfiguration());
            modelBuilder.Configurations.Add(new CbrLeadStageInsertConfiguration());
            modelBuilder.Configurations.Add(new CbrLeadStageUpdateConfiguration());
            modelBuilder.Configurations.Add(new CbrPayoutConfiguration());
            modelBuilder.Configurations.Add(new CbrQuestionConfiguration());
            modelBuilder.Configurations.Add(new CbrQuestionAnswerConfiguration());
            modelBuilder.Configurations.Add(new CbrQuestionDropdownConfiguration());
            modelBuilder.Configurations.Add(new CbrSignupConfiguration());
            modelBuilder.Configurations.Add(new CbrSignupErrorConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyBackupConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyInstructionConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyQuestionConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyStatuConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyStatusOutputConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyStatusWithBadEmailConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyStatusWithDupPayConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyTargetConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyWithdrawConfiguration());
            modelBuilder.Configurations.Add(new CbrVerificationConfiguration());
            modelBuilder.Configurations.Add(new CbrZipVerifiedConfiguration());
            modelBuilder.Configurations.Add(new CoregConfiguration());
            modelBuilder.Configurations.Add(new CoregCampaignConfiguration());
            modelBuilder.Configurations.Add(new CoregErrorConfiguration());
            modelBuilder.Configurations.Add(new CoregLeadAcceptedConfiguration());
            modelBuilder.Configurations.Add(new CoregPartnerConfiguration());
            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new CountryLanguageDefaultConfiguration());
            modelBuilder.Configurations.Add(new CpaNotificationConfiguration());
            modelBuilder.Configurations.Add(new CpaNotificationJobConfiguration());
            modelBuilder.Configurations.Add(new CpaNotificationNewSubConfiguration());
            modelBuilder.Configurations.Add(new CpaNotificationTypeConfiguration());
            modelBuilder.Configurations.Add(new DashboardOverlayConfiguration());
            modelBuilder.Configurations.Add(new DashboardOverlayEmailConfiguration());
            modelBuilder.Configurations.Add(new DoiRotatingOfferConfiguration());
            modelBuilder.Configurations.Add(new EducationCodeConfiguration());
            modelBuilder.Configurations.Add(new GeoLiteCityBlockConfiguration());
            modelBuilder.Configurations.Add(new GeoLiteCityLocationConfiguration());
            modelBuilder.Configurations.Add(new InstructionBulletConfiguration());
            modelBuilder.Configurations.Add(new IpCountryConfiguration());
            modelBuilder.Configurations.Add(new IpCountryOldConfiguration());
            modelBuilder.Configurations.Add(new IpCountyBackupConfiguration());
            modelBuilder.Configurations.Add(new IpCountyNewBackupConfiguration());
            modelBuilder.Configurations.Add(new IpLogConfiguration());
            modelBuilder.Configurations.Add(new JobDataConfiguration());
            modelBuilder.Configurations.Add(new LanguageConfiguration());
            modelBuilder.Configurations.Add(new LeadReversalConfiguration());
            modelBuilder.Configurations.Add(new LoggedInFromClikConfiguration());
            modelBuilder.Configurations.Add(new MobilelLeadConfiguration());
            modelBuilder.Configurations.Add(new OccupationConfiguration());
            modelBuilder.Configurations.Add(new OccupationEducationConfiguration());
            modelBuilder.Configurations.Add(new OccupationIncomeConfiguration());
            modelBuilder.Configurations.Add(new OccupationSectorConfiguration());
            modelBuilder.Configurations.Add(new OfferConfiguration());
            modelBuilder.Configurations.Add(new OptInEmailLogConfiguration());
            modelBuilder.Configurations.Add(new OptInEmailVerbageConfiguration());
            modelBuilder.Configurations.Add(new OptInEmailVerbageListrakQueueConfiguration());
            modelBuilder.Configurations.Add(new OptInEmailVerbageTestSendConfiguration());
            modelBuilder.Configurations.Add(new OptInLeadConfiguration());
            modelBuilder.Configurations.Add(new PostQueueConfiguration());
            modelBuilder.Configurations.Add(new ProcessedSurveyIdConfiguration());
            modelBuilder.Configurations.Add(new ReferralConfiguration());
            modelBuilder.Configurations.Add(new ReUploadElabConfiguration());
            modelBuilder.Configurations.Add(new RouterActionConfiguration());
            modelBuilder.Configurations.Add(new RouterContactConfiguration());
            modelBuilder.Configurations.Add(new RouterContactPrecisionSampleConfiguration());
            modelBuilder.Configurations.Add(new RouterHostConfiguration());
            modelBuilder.Configurations.Add(new RouterPostBackPrecisionSampleConfiguration());
            modelBuilder.Configurations.Add(new RouterPostBackYourSurveyConfiguration());
            modelBuilder.Configurations.Add(new RouterStatusPrecisionSampleConfiguration());
            modelBuilder.Configurations.Add(new RouterStatusYourSurveyConfiguration());
            modelBuilder.Configurations.Add(new RouterSurveyPrecisionSampleConfiguration());
            modelBuilder.Configurations.Add(new RouterSurveyYourSurveyConfiguration());
            modelBuilder.Configurations.Add(new ScrubLeadConfiguration());
            modelBuilder.Configurations.Add(new ScrubReportConfigConfiguration());
            modelBuilder.Configurations.Add(new SiteBlacklistConfiguration());
            modelBuilder.Configurations.Add(new SiteBlacklistIpAddressConfiguration());
            modelBuilder.Configurations.Add(new SmartEmailLinkClickConfiguration());
            modelBuilder.Configurations.Add(new SmartEmailLinkConfigConfiguration());
            modelBuilder.Configurations.Add(new SmartEmailLinkFieldConfiguration());
            modelBuilder.Configurations.Add(new SmartEmailLinkTargetConfiguration());
            modelBuilder.Configurations.Add(new SmartExitLinkConfigConfiguration());
            modelBuilder.Configurations.Add(new SmartExitLinkFieldConfiguration());
            modelBuilder.Configurations.Add(new SmartExitLinkTargetConfiguration());
            modelBuilder.Configurations.Add(new SmartLinkAiLogConfiguration());
            modelBuilder.Configurations.Add(new SmartLinkLogConfiguration());
            modelBuilder.Configurations.Add(new SmartWebLinkConfigConfiguration());
            modelBuilder.Configurations.Add(new SmartWebLinkFieldConfiguration());
            modelBuilder.Configurations.Add(new SmartWebLinkLogConfiguration());
            modelBuilder.Configurations.Add(new SmartWebLinkTargetConfiguration());
            modelBuilder.Configurations.Add(new StateConfiguration());
            modelBuilder.Configurations.Add(new UserNewConfiguration());
            modelBuilder.Configurations.Add(new VerifyZipFailureConfiguration());
            modelBuilder.Configurations.Add(new VwCbrSurveyStatusWithPendingConfiguration());
            modelBuilder.Configurations.Add(new VwDebugIpConfiguration());
            modelBuilder.Configurations.Add(new VwJobCodeConfiguration());
            modelBuilder.Configurations.Add(new VwOptInLeadKeyConfiguration());
            modelBuilder.Configurations.Add(new VwOptInLeadPjDegreeConfiguration());
            modelBuilder.Configurations.Add(new VwOptInLeadSurveyConfiguration());
            modelBuilder.Configurations.Add(new VwOptInLeadUserConfiguration());
            modelBuilder.Configurations.Add(new VwRouterStatusPrecisionSurveyConfiguration());
            modelBuilder.Configurations.Add(new WeeklySurveyAnswerConfiguration());
            modelBuilder.Configurations.Add(new WeeklySurveyConfigConfiguration());
            modelBuilder.Configurations.Add(new WithdrawReasonConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AffiliateConfiguration(schema));
            modelBuilder.Configurations.Add(new AffiliateCountryConfiguration(schema));
            modelBuilder.Configurations.Add(new AffiliateSubConfiguration(schema));
            modelBuilder.Configurations.Add(new AllInboxClikBackupConfiguration(schema));
            modelBuilder.Configurations.Add(new AweberDemoUpdateConfiguration(schema));
            modelBuilder.Configurations.Add(new BatchFileExportLeadsSentConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrConsentConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrEmailAddressChangeConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrEmailDailyBatchCounterConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrJobCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrLeadConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrLeadStageInsertConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrLeadStageUpdateConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrPayoutConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrQuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrQuestionAnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrQuestionDropdownConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSignupConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSignupErrorConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyBackupConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyInstructionConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyQuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyStatusOutputConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyStatusWithBadEmailConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyStatusWithDupPayConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyWithdrawConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrVerificationConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrZipVerifiedConfiguration(schema));
            modelBuilder.Configurations.Add(new CoregConfiguration(schema));
            modelBuilder.Configurations.Add(new CoregCampaignConfiguration(schema));
            modelBuilder.Configurations.Add(new CoregErrorConfiguration(schema));
            modelBuilder.Configurations.Add(new CoregLeadAcceptedConfiguration(schema));
            modelBuilder.Configurations.Add(new CoregPartnerConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryLanguageDefaultConfiguration(schema));
            modelBuilder.Configurations.Add(new CpaNotificationConfiguration(schema));
            modelBuilder.Configurations.Add(new CpaNotificationJobConfiguration(schema));
            modelBuilder.Configurations.Add(new CpaNotificationNewSubConfiguration(schema));
            modelBuilder.Configurations.Add(new CpaNotificationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DashboardOverlayConfiguration(schema));
            modelBuilder.Configurations.Add(new DashboardOverlayEmailConfiguration(schema));
            modelBuilder.Configurations.Add(new DoiRotatingOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new GeoLiteCityBlockConfiguration(schema));
            modelBuilder.Configurations.Add(new GeoLiteCityLocationConfiguration(schema));
            modelBuilder.Configurations.Add(new InstructionBulletConfiguration(schema));
            modelBuilder.Configurations.Add(new IpCountryConfiguration(schema));
            modelBuilder.Configurations.Add(new IpCountryOldConfiguration(schema));
            modelBuilder.Configurations.Add(new IpCountyBackupConfiguration(schema));
            modelBuilder.Configurations.Add(new IpCountyNewBackupConfiguration(schema));
            modelBuilder.Configurations.Add(new IpLogConfiguration(schema));
            modelBuilder.Configurations.Add(new JobDataConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new LeadReversalConfiguration(schema));
            modelBuilder.Configurations.Add(new LoggedInFromClikConfiguration(schema));
            modelBuilder.Configurations.Add(new MobilelLeadConfiguration(schema));
            modelBuilder.Configurations.Add(new OccupationConfiguration(schema));
            modelBuilder.Configurations.Add(new OccupationEducationConfiguration(schema));
            modelBuilder.Configurations.Add(new OccupationIncomeConfiguration(schema));
            modelBuilder.Configurations.Add(new OccupationSectorConfiguration(schema));
            modelBuilder.Configurations.Add(new OfferConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInEmailLogConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInEmailVerbageConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInEmailVerbageListrakQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInEmailVerbageTestSendConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInLeadConfiguration(schema));
            modelBuilder.Configurations.Add(new PostQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new ProcessedSurveyIdConfiguration(schema));
            modelBuilder.Configurations.Add(new ReferralConfiguration(schema));
            modelBuilder.Configurations.Add(new ReUploadElabConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterActionConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterContactConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterContactPrecisionSampleConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterHostConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterPostBackPrecisionSampleConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterPostBackYourSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterStatusPrecisionSampleConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterStatusYourSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterSurveyPrecisionSampleConfiguration(schema));
            modelBuilder.Configurations.Add(new RouterSurveyYourSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrubLeadConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrubReportConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteBlacklistConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteBlacklistIpAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartEmailLinkClickConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartEmailLinkConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartEmailLinkFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartEmailLinkTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartExitLinkConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartExitLinkFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartExitLinkTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartLinkAiLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartLinkLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartWebLinkConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartWebLinkFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartWebLinkLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartWebLinkTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new StateConfiguration(schema));
            modelBuilder.Configurations.Add(new UserNewConfiguration(schema));
            modelBuilder.Configurations.Add(new VerifyZipFailureConfiguration(schema));
            modelBuilder.Configurations.Add(new VwCbrSurveyStatusWithPendingConfiguration(schema));
            modelBuilder.Configurations.Add(new VwDebugIpConfiguration(schema));
            modelBuilder.Configurations.Add(new VwJobCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new VwOptInLeadKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new VwOptInLeadPjDegreeConfiguration(schema));
            modelBuilder.Configurations.Add(new VwOptInLeadSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new VwOptInLeadUserConfiguration(schema));
            modelBuilder.Configurations.Add(new VwRouterStatusPrecisionSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new WeeklySurveyAnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new WeeklySurveyConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new WithdrawReasonConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public int CommandExecute(string command, string comment, int? mode, string execute)
        {
            var commandParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Command", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = command, Size = -1 };
            if (commandParam.Value == null)
                commandParam.Value = System.DBNull.Value;

            var commentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Comment", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = comment, Size = -1 };
            if (commentParam.Value == null)
                commentParam.Value = System.DBNull.Value;

            var modeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Mode", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mode.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mode.HasValue)
                modeParam.Value = System.DBNull.Value;

            var executeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Execute", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = execute, Size = -1 };
            if (executeParam.Value == null)
                executeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[CommandExecute] @Command, @Comment, @Mode, @Execute", commandParam, commentParam, modeParam, executeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<DailyReportCostCpaReturnModel> DailyReportCostCpa(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return DailyReportCostCpa(startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<DailyReportCostCpaReturnModel> DailyReportCostCpa(System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DailyReportCostCpaReturnModel>("EXEC @procResult = [dbo].[DailyReportCostCPA] @StartDate, @EndDate", startDateParam, endDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportCostCpaReturnModel>> DailyReportCostCpaAsync(System.DateTime? startDate, System.DateTime? endDate)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DailyReportCostCpaReturnModel>("EXEC [dbo].[DailyReportCostCPA] @StartDate, @EndDate", startDateParam, endDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId)
        {
            int procResult;
            return DailyReportCostOfLeads(type, startDate, endDate, countryId, out procResult);
        }

        public System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId, out int procResult)
        {
            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = type, Size = 50 };
            if (typeParam.Value == null)
                typeParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryId", SqlDbType = System.Data.SqlDbType.Char, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DailyReportCostOfLeadsReturnModel>("EXEC @procResult = [dbo].[DailyReportCostOfLeads] @Type, @StartDate, @EndDate, @CountryId", typeParam, startDateParam, endDateParam, countryIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel>> DailyReportCostOfLeadsAsync(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId)
        {
            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = type, Size = 50 };
            if (typeParam.Value == null)
                typeParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryId", SqlDbType = System.Data.SqlDbType.Char, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DailyReportCostOfLeadsReturnModel>("EXEC [dbo].[DailyReportCostOfLeads] @Type, @StartDate, @EndDate, @CountryId", typeParam, startDateParam, endDateParam, countryIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return DailyReportRevenueCpa(startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DailyReportRevenueCpaReturnModel>("EXEC @procResult = [dbo].[DailyReportRevenueCPA] @StartDate, @EndDate", startDateParam, endDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRevenueCpaReturnModel>> DailyReportRevenueCpaAsync(System.DateTime? startDate, System.DateTime? endDate)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DailyReportRevenueCpaReturnModel>("EXEC [dbo].[DailyReportRevenueCPA] @StartDate, @EndDate", startDateParam, endDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return DailyReportRoiByType(startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DailyReportRoiByTypeReturnModel>("EXEC @procResult = [dbo].[DailyReportRoiByType] @StartDate, @EndDate", startDateParam, endDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRoiByTypeReturnModel>> DailyReportRoiByTypeAsync(System.DateTime? startDate, System.DateTime? endDate)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DailyReportRoiByTypeReturnModel>("EXEC [dbo].[DailyReportRoiByType] @StartDate, @EndDate", startDateParam, endDateParam).ToListAsync();

            return procResultData;
        }

        public int DevPurgeSurveyResultsForEmail(string emailAddress, int? surveyId)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var surveyIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SurveyID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = surveyId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!surveyId.HasValue)
                surveyIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[dev_PurgeSurveyResultsForEmail] @EmailAddress, @SurveyID", emailAddressParam, surveyIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int FixIp(string emailAddress, string ip)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 250 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var ipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IP", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ip, Size = 50 };
            if (ipParam.Value == null)
                ipParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[FixIP] @EmailAddress, @IP", emailAddressParam, ipParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck)
        {
            int procResult;
            return GetLeadsByDayForFraud(dateToCheck, out procResult);
        }

        public System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck, out int procResult)
        {
            var dateToCheckParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateToCheck", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateToCheck.GetValueOrDefault() };
            if (!dateToCheck.HasValue)
                dateToCheckParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetLeadsByDayForFraudReturnModel>("EXEC @procResult = [dbo].[GetLeadsByDayForFraud] @DateToCheck", dateToCheckParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel>> GetLeadsByDayForFraudAsync(System.DateTime? dateToCheck)
        {
            var dateToCheckParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateToCheck", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateToCheck.GetValueOrDefault() };
            if (!dateToCheck.HasValue)
                dateToCheckParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetLeadsByDayForFraudReturnModel>("EXEC [dbo].[GetLeadsByDayForFraud] @DateToCheck", dateToCheckParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetMobileEarningsReturnModel> GetMobileEarnings(System.Guid? mobileUserId)
        {
            int procResult;
            return GetMobileEarnings(mobileUserId, out procResult);
        }

        public System.Collections.Generic.List<GetMobileEarningsReturnModel> GetMobileEarnings(System.Guid? mobileUserId, out int procResult)
        {
            var mobileUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MobileUserId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = mobileUserId.GetValueOrDefault() };
            if (!mobileUserId.HasValue)
                mobileUserIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetMobileEarningsReturnModel>("EXEC @procResult = [dbo].[GetMobileEarnings] @MobileUserId", mobileUserIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetMobileEarningsReturnModel>> GetMobileEarningsAsync(System.Guid? mobileUserId)
        {
            var mobileUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MobileUserId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = mobileUserId.GetValueOrDefault() };
            if (!mobileUserId.HasValue)
                mobileUserIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetMobileEarningsReturnModel>("EXEC [dbo].[GetMobileEarnings] @MobileUserId", mobileUserIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd)
        {
            int procResult;
            return GetOffersReport(offerId, affiliateId, subid, dateStart, dateEnd, out procResult);
        }

        public System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd, out int procResult)
        {
            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Subid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subid, Size = 255 };
            if (subidParam.Value == null)
                subidParam.Value = System.DBNull.Value;

            var dateStartParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateStart", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateStart.GetValueOrDefault() };
            if (!dateStart.HasValue)
                dateStartParam.Value = System.DBNull.Value;

            var dateEndParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateEnd", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateEnd.GetValueOrDefault() };
            if (!dateEnd.HasValue)
                dateEndParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetOffersReportReturnModel>("EXEC @procResult = [dbo].[GetOffersReport] @OfferId, @AffiliateId, @Subid, @DateStart, @DateEnd", offerIdParam, affiliateIdParam, subidParam, dateStartParam, dateEndParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetOffersReportReturnModel>> GetOffersReportAsync(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd)
        {
            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Subid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subid, Size = 255 };
            if (subidParam.Value == null)
                subidParam.Value = System.DBNull.Value;

            var dateStartParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateStart", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateStart.GetValueOrDefault() };
            if (!dateStart.HasValue)
                dateStartParam.Value = System.DBNull.Value;

            var dateEndParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateEnd", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateEnd.GetValueOrDefault() };
            if (!dateEnd.HasValue)
                dateEndParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetOffersReportReturnModel>("EXEC [dbo].[GetOffersReport] @OfferId, @AffiliateId, @Subid, @DateStart, @DateEnd", offerIdParam, affiliateIdParam, subidParam, dateStartParam, dateEndParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate)
        {
            int procResult;
            return GetRoiBySignupDate(signupDate, out procResult);
        }

        public System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate, out int procResult)
        {
            var signupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SignupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = signupDate.GetValueOrDefault() };
            if (!signupDate.HasValue)
                signupDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRoiBySignupDateReturnModel>("EXEC @procResult = [dbo].[GetROIBySignupDate] @SignupDate", signupDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySignupDateReturnModel>> GetRoiBySignupDateAsync(System.DateTime? signupDate)
        {
            var signupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SignupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = signupDate.GetValueOrDefault() };
            if (!signupDate.HasValue)
                signupDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetRoiBySignupDateReturnModel>("EXEC [dbo].[GetROIBySignupDate] @SignupDate", signupDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId)
        {
            int procResult;
            return GetRoiBySub(affiliateId, offerId, subId, out procResult);
        }

        public System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId, out int procResult)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRoiBySubReturnModel>("EXEC @procResult = [dbo].[GetROIBySub] @AffiliateId, @OfferId, @SubId", affiliateIdParam, offerIdParam, subIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySubReturnModel>> GetRoiBySubAsync(string affiliateId, string offerId, string subId)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetRoiBySubReturnModel>("EXEC [dbo].[GetROIBySub] @AffiliateId, @OfferId, @SubId", affiliateIdParam, offerIdParam, subIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber)
        {
            int procResult;
            return GetRoiForLast100Signups(affiliateId, offerId, subId, sampleNumber, out procResult);
        }

        public System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber, out int procResult)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var sampleNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SampleNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sampleNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sampleNumber.HasValue)
                sampleNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRoiForLast100SignupsReturnModel>("EXEC @procResult = [dbo].[GetROIForLast100Signups] @AffiliateId, @OfferId, @SubId, @SampleNumber", affiliateIdParam, offerIdParam, subIdParam, sampleNumberParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel>> GetRoiForLast100SignupsAsync(string affiliateId, string offerId, string subId, int? sampleNumber)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var sampleNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SampleNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sampleNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sampleNumber.HasValue)
                sampleNumberParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetRoiForLast100SignupsReturnModel>("EXEC [dbo].[GetROIForLast100Signups] @AffiliateId, @OfferId, @SubId, @SampleNumber", affiliateIdParam, offerIdParam, subIdParam, sampleNumberParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetRouterStatsReturnModel> GetRouterStats()
        {
            int procResult;
            return GetRouterStats(out procResult);
        }

        public System.Collections.Generic.List<GetRouterStatsReturnModel> GetRouterStats(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRouterStatsReturnModel>("EXEC @procResult = [dbo].[GetRouterStats] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRouterStatsReturnModel>> GetRouterStatsAsync()
        {
            var procResultData = await Database.SqlQuery<GetRouterStatsReturnModel>("EXEC [dbo].[GetRouterStats] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList)
        {
            int procResult;
            return GetSignupsWithRevenue(affiliateId, offerId, subId, emailList, out procResult);
        }

        public System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList, out int procResult)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var emailListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailList", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailList, Size = 8000 };
            if (emailListParam.Value == null)
                emailListParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetSignupsWithRevenueReturnModel>("EXEC @procResult = [dbo].[GetSignupsWithRevenue] @AffiliateId, @OfferId, @SubId, @EmailList", affiliateIdParam, offerIdParam, subIdParam, emailListParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetSignupsWithRevenueReturnModel>> GetSignupsWithRevenueAsync(string affiliateId, string offerId, string subId, string emailList)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var emailListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailList", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailList, Size = 8000 };
            if (emailListParam.Value == null)
                emailListParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetSignupsWithRevenueReturnModel>("EXEC [dbo].[GetSignupsWithRevenue] @AffiliateId, @OfferId, @SubId, @EmailList", affiliateIdParam, offerIdParam, subIdParam, emailListParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate()
        {
            int procResult;
            return GetTotalPayoutToDate(out procResult);
        }

        public System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetTotalPayoutToDateReturnModel>("EXEC @procResult = [dbo].[GetTotalPayoutToDate] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetTotalPayoutToDateReturnModel>> GetTotalPayoutToDateAsync()
        {
            var procResultData = await Database.SqlQuery<GetTotalPayoutToDateReturnModel>("EXEC [dbo].[GetTotalPayoutToDate] ").ToListAsync();

            return procResultData;
        }

        public HasEmailConvertedForIncentReturnModel HasEmailConvertedForIncent(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 256 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;


            var procResultData = new HasEmailConvertedForIncentReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[HasEmailConvertedForIncent]";
            cmd.Parameters.Add(emailAddressParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<HasEmailConvertedForIncentReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<HasEmailConvertedForIncentReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<HasEmailConvertedForIncentReturnModel> HasEmailConvertedForIncentAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 256 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;


            var procResultData = new HasEmailConvertedForIncentReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[HasEmailConvertedForIncent]";
            cmd.Parameters.Add(emailAddressParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<HasEmailConvertedForIncentReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<HasEmailConvertedForIncentReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public int IndexOptimize(string databases, string fragmentationHighLob, string fragmentationHighNonLob, string fragmentationMediumLob, string fragmentationMediumNonLob, string fragmentationLowLob, string fragmentationLowNonLob, int? fragmentationLevel1, int? fragmentationLevel2, int? pageCountLevel, string sortInTempdb, int? maxDop, int? fillFactor, string lobCompaction, int? statisticsSample, string partitionLevel, int? timeLimit, string indexes, string padIndex, string statisticsResample, string updateColumnStatistics, string onlyModifiedStatistics, string execute)
        {
            var databasesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Databases", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = databases, Size = -1 };
            if (databasesParam.Value == null)
                databasesParam.Value = System.DBNull.Value;

            var fragmentationHighLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationHigh_LOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationHighLob, Size = -1 };
            if (fragmentationHighLobParam.Value == null)
                fragmentationHighLobParam.Value = System.DBNull.Value;

            var fragmentationHighNonLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationHigh_NonLOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationHighNonLob, Size = -1 };
            if (fragmentationHighNonLobParam.Value == null)
                fragmentationHighNonLobParam.Value = System.DBNull.Value;

            var fragmentationMediumLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationMedium_LOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationMediumLob, Size = -1 };
            if (fragmentationMediumLobParam.Value == null)
                fragmentationMediumLobParam.Value = System.DBNull.Value;

            var fragmentationMediumNonLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationMedium_NonLOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationMediumNonLob, Size = -1 };
            if (fragmentationMediumNonLobParam.Value == null)
                fragmentationMediumNonLobParam.Value = System.DBNull.Value;

            var fragmentationLowLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationLow_LOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationLowLob, Size = -1 };
            if (fragmentationLowLobParam.Value == null)
                fragmentationLowLobParam.Value = System.DBNull.Value;

            var fragmentationLowNonLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationLow_NonLOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationLowNonLob, Size = -1 };
            if (fragmentationLowNonLobParam.Value == null)
                fragmentationLowNonLobParam.Value = System.DBNull.Value;

            var fragmentationLevel1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationLevel1", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = fragmentationLevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fragmentationLevel1.HasValue)
                fragmentationLevel1Param.Value = System.DBNull.Value;

            var fragmentationLevel2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationLevel2", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = fragmentationLevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fragmentationLevel2.HasValue)
                fragmentationLevel2Param.Value = System.DBNull.Value;

            var pageCountLevelParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCountLevel", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageCountLevel.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageCountLevel.HasValue)
                pageCountLevelParam.Value = System.DBNull.Value;

            var sortInTempdbParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortInTempdb", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = sortInTempdb, Size = -1 };
            if (sortInTempdbParam.Value == null)
                sortInTempdbParam.Value = System.DBNull.Value;

            var maxDopParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxDOP", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = maxDop.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxDop.HasValue)
                maxDopParam.Value = System.DBNull.Value;

            var fillFactorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FillFactor", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = fillFactor.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fillFactor.HasValue)
                fillFactorParam.Value = System.DBNull.Value;

            var lobCompactionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LOBCompaction", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lobCompaction, Size = -1 };
            if (lobCompactionParam.Value == null)
                lobCompactionParam.Value = System.DBNull.Value;

            var statisticsSampleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatisticsSample", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statisticsSample.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statisticsSample.HasValue)
                statisticsSampleParam.Value = System.DBNull.Value;

            var partitionLevelParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PartitionLevel", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = partitionLevel, Size = -1 };
            if (partitionLevelParam.Value == null)
                partitionLevelParam.Value = System.DBNull.Value;

            var timeLimitParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TimeLimit", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = timeLimit.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!timeLimit.HasValue)
                timeLimitParam.Value = System.DBNull.Value;

            var indexesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Indexes", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = indexes, Size = -1 };
            if (indexesParam.Value == null)
                indexesParam.Value = System.DBNull.Value;

            var padIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PadIndex", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = padIndex, Size = -1 };
            if (padIndexParam.Value == null)
                padIndexParam.Value = System.DBNull.Value;

            var statisticsResampleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatisticsResample", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = statisticsResample, Size = -1 };
            if (statisticsResampleParam.Value == null)
                statisticsResampleParam.Value = System.DBNull.Value;

            var updateColumnStatisticsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateColumnStatistics", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = updateColumnStatistics, Size = -1 };
            if (updateColumnStatisticsParam.Value == null)
                updateColumnStatisticsParam.Value = System.DBNull.Value;

            var onlyModifiedStatisticsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OnlyModifiedStatistics", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = onlyModifiedStatistics, Size = -1 };
            if (onlyModifiedStatisticsParam.Value == null)
                onlyModifiedStatisticsParam.Value = System.DBNull.Value;

            var executeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Execute", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = execute, Size = -1 };
            if (executeParam.Value == null)
                executeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[IndexOptimize] @Databases, @FragmentationHigh_LOB, @FragmentationHigh_NonLOB, @FragmentationMedium_LOB, @FragmentationMedium_NonLOB, @FragmentationLow_LOB, @FragmentationLow_NonLOB, @FragmentationLevel1, @FragmentationLevel2, @PageCountLevel, @SortInTempdb, @MaxDOP, @FillFactor, @LOBCompaction, @StatisticsSample, @PartitionLevel, @TimeLimit, @Indexes, @PadIndex, @StatisticsResample, @UpdateColumnStatistics, @OnlyModifiedStatistics, @Execute", databasesParam, fragmentationHighLobParam, fragmentationHighNonLobParam, fragmentationMediumLobParam, fragmentationMediumNonLobParam, fragmentationLowLobParam, fragmentationLowNonLobParam, fragmentationLevel1Param, fragmentationLevel2Param, pageCountLevelParam, sortInTempdbParam, maxDopParam, fillFactorParam, lobCompactionParam, statisticsSampleParam, partitionLevelParam, timeLimitParam, indexesParam, padIndexParam, statisticsResampleParam, updateColumnStatisticsParam, onlyModifiedStatisticsParam, executeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertOptInLeadForClik(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string ip, bool? clik, System.DateTime? insertDate, string address)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 255 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var costParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Cost", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = cost.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!cost.HasValue)
                costParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var ipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IP", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ip, Size = 50 };
            if (ipParam.Value == null)
                ipParam.Value = System.DBNull.Value;

            var clikParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Clik", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = clik.GetValueOrDefault() };
            if (!clik.HasValue)
                clikParam.Value = System.DBNull.Value;

            var insertDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InsertDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = insertDate.GetValueOrDefault() };
            if (!insertDate.HasValue)
                insertDateParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InsertOptInLeadForClik] @EmailAddress, @Firstname, @Lastname, @Zip, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @OfferID, @AffiliateID, @SubID, @Cost, @CountryID, @IP, @Clik, @InsertDate, @Address", emailAddressParam, firstnameParam, lastnameParam, zipParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, offerIdParam, affiliateIdParam, subIdParam, costParam, countryIdParam, ipParam, clikParam, insertDateParam, addressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertOptInLeadForPjd(string emailAddress, string firstname, string offerId, string affiliateId, string subId, string countryId, string ip)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 255 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var ipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IP", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ip, Size = 50 };
            if (ipParam.Value == null)
                ipParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InsertOptInLeadForPJD] @EmailAddress, @Firstname, @OfferID, @AffiliateID, @SubID, @CountryID, @IP", emailAddressParam, firstnameParam, offerIdParam, affiliateIdParam, subIdParam, countryIdParam, ipParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public IsNewSubIdReturnModel IsNewSubId(string subId, System.DateTime? searchBeforeDate)
        {
            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 500 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var searchBeforeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SearchBeforeDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = searchBeforeDate.GetValueOrDefault() };
            if (!searchBeforeDate.HasValue)
                searchBeforeDateParam.Value = System.DBNull.Value;


            var procResultData = new IsNewSubIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[IsNewSubId]";
            cmd.Parameters.Add(subIdParam);
            cmd.Parameters.Add(searchBeforeDateParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<IsNewSubIdReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<IsNewSubIdReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<IsNewSubIdReturnModel> IsNewSubIdAsync(string subId, System.DateTime? searchBeforeDate)
        {
            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 500 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var searchBeforeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SearchBeforeDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = searchBeforeDate.GetValueOrDefault() };
            if (!searchBeforeDate.HasValue)
                searchBeforeDateParam.Value = System.DBNull.Value;


            var procResultData = new IsNewSubIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[IsNewSubId]";
            cmd.Parameters.Add(subIdParam);
            cmd.Parameters.Add(searchBeforeDateParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<IsNewSubIdReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<IsNewSubIdReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public int Oil(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OIL] @EmailAddress", emailAddressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadCompleteCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string password)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = 50 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadCompleteCoreg] @EmailAddress, @Firstname, @Lastname, @Zip, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @Password", emailAddressParam, firstnameParam, lastnameParam, zipParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, passwordParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public OptInLeadIsClikReturnModel OptInLeadIsClik(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;


            var procResultData = new OptInLeadIsClikReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[OptInLeadIsClik]";
            cmd.Parameters.Add(emailAddressParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<OptInLeadIsClikReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<OptInLeadIsClikReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<OptInLeadIsClikReturnModel> OptInLeadIsClikAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;


            var procResultData = new OptInLeadIsClikReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[OptInLeadIsClik]";
            cmd.Parameters.Add(emailAddressParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<OptInLeadIsClikReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<OptInLeadIsClikReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public int OptInLeadSetPassword(string emailAddress, string password)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = 50 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadSetPassword] @EmailAddress, @Password", emailAddressParam, passwordParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdate(int? siteVertical, string emailAddress, string salutation, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string occupation, string income, string homeOwnership, string education, string maritalStatus, int? children, string ethnicity, string password, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string selectedLanguageId, System.DateTime? optInDate, System.DateTime? lastRunDate, int? lastSendOnDay, System.DateTime? optOutDate, bool? doNotSendTo, System.DateTime? confirmedDate, bool? thirdPartyListsUpdated, System.DateTime? insertDate, string ip, string uid)
        {
            var siteVerticalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteVertical", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteVertical.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteVertical.HasValue)
                siteVerticalParam.Value = System.DBNull.Value;

            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var salutationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Salutation", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = salutation, Size = 100 };
            if (salutationParam.Value == null)
                salutationParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var address2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address2, Size = 100 };
            if (address2Param.Value == null)
                address2Param.Value = System.DBNull.Value;

            var cityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@City", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = city, Size = 100 };
            if (cityParam.Value == null)
                cityParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 100 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var phoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Phone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phone, Size = 100 };
            if (phoneParam.Value == null)
                phoneParam.Value = System.DBNull.Value;

            var mobilephoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Mobilephone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = mobilephone, Size = 100 };
            if (mobilephoneParam.Value == null)
                mobilephoneParam.Value = System.DBNull.Value;

            var smartPhoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmartPhone", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = smartPhone.GetValueOrDefault() };
            if (!smartPhone.HasValue)
                smartPhoneParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var occupationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Occupation", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = occupation, Size = 100 };
            if (occupationParam.Value == null)
                occupationParam.Value = System.DBNull.Value;

            var incomeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Income", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = income, Size = 100 };
            if (incomeParam.Value == null)
                incomeParam.Value = System.DBNull.Value;

            var homeOwnershipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HomeOwnership", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = homeOwnership, Size = 100 };
            if (homeOwnershipParam.Value == null)
                homeOwnershipParam.Value = System.DBNull.Value;

            var educationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Education", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = education, Size = 100 };
            if (educationParam.Value == null)
                educationParam.Value = System.DBNull.Value;

            var maritalStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaritalStatus", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = maritalStatus, Size = 100 };
            if (maritalStatusParam.Value == null)
                maritalStatusParam.Value = System.DBNull.Value;

            var childrenParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Children", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = children.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!children.HasValue)
                childrenParam.Value = System.DBNull.Value;

            var ethnicityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ethnicity", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ethnicity, Size = 50 };
            if (ethnicityParam.Value == null)
                ethnicityParam.Value = System.DBNull.Value;

            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = 50 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 255 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var costParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Cost", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = cost.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!cost.HasValue)
                costParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var selectedLanguageIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SelectedLanguageID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = selectedLanguageId, Size = 2 };
            if (selectedLanguageIdParam.Value == null)
                selectedLanguageIdParam.Value = System.DBNull.Value;

            var optInDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OptInDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = optInDate.GetValueOrDefault() };
            if (!optInDate.HasValue)
                optInDateParam.Value = System.DBNull.Value;

            var lastRunDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastRunDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = lastRunDate.GetValueOrDefault() };
            if (!lastRunDate.HasValue)
                lastRunDateParam.Value = System.DBNull.Value;

            var lastSendOnDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastSendOnDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = lastSendOnDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!lastSendOnDay.HasValue)
                lastSendOnDayParam.Value = System.DBNull.Value;

            var optOutDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OptOutDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = optOutDate.GetValueOrDefault() };
            if (!optOutDate.HasValue)
                optOutDateParam.Value = System.DBNull.Value;

            var doNotSendToParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DoNotSendTo", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = doNotSendTo.GetValueOrDefault() };
            if (!doNotSendTo.HasValue)
                doNotSendToParam.Value = System.DBNull.Value;

            var confirmedDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ConfirmedDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = confirmedDate.GetValueOrDefault() };
            if (!confirmedDate.HasValue)
                confirmedDateParam.Value = System.DBNull.Value;

            var thirdPartyListsUpdatedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ThirdPartyListsUpdated", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = thirdPartyListsUpdated.GetValueOrDefault() };
            if (!thirdPartyListsUpdated.HasValue)
                thirdPartyListsUpdatedParam.Value = System.DBNull.Value;

            var insertDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InsertDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = insertDate.GetValueOrDefault() };
            if (!insertDate.HasValue)
                insertDateParam.Value = System.DBNull.Value;

            var ipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IP", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ip, Size = 50 };
            if (ipParam.Value == null)
                ipParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = uid, Size = 50 };
            if (uidParam.Value == null)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdate] @SiteVertical, @EmailAddress, @Salutation, @Firstname, @Lastname, @Address, @Address2, @City, @State, @Zip, @Phone, @Mobilephone, @SmartPhone, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @Occupation, @Income, @HomeOwnership, @Education, @MaritalStatus, @Children, @Ethnicity, @Password, @OfferID, @AffiliateID, @SubID, @Cost, @CountryID, @SelectedLanguageID, @OptInDate, @LastRunDate, @LastSendOnDay, @OptOutDate, @DoNotSendTo, @ConfirmedDate, @ThirdPartyListsUpdated, @InsertDate, @IP, @UID", siteVerticalParam, emailAddressParam, salutationParam, firstnameParam, lastnameParam, addressParam, address2Param, cityParam, stateParam, zipParam, phoneParam, mobilephoneParam, smartPhoneParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, occupationParam, incomeParam, homeOwnershipParam, educationParam, maritalStatusParam, childrenParam, ethnicityParam, passwordParam, offerIdParam, affiliateIdParam, subIdParam, costParam, countryIdParam, selectedLanguageIdParam, optInDateParam, lastRunDateParam, lastSendOnDayParam, optOutDateParam, doNotSendToParam, confirmedDateParam, thirdPartyListsUpdatedParam, insertDateParam, ipParam, uidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string countryId, string address)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoreg] @EmailAddress, @Firstname, @Lastname, @Zip, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @OfferId, @AffiliateId, @CountryId, @Address", emailAddressParam, firstnameParam, lastnameParam, zipParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, offerIdParam, affiliateIdParam, countryIdParam, addressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoregBirthDate(string emailAddress, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string offerId, string affiliateId)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoregBirthDate] @EmailAddress, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @OfferId, @AffiliateId", emailAddressParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, offerIdParam, affiliateIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoregCity(string emailAddress, string city, string offerId, string affiliateId)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var cityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@City", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = city, Size = 100 };
            if (cityParam.Value == null)
                cityParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoregCity] @EmailAddress, @City, @OfferId, @AffiliateId", emailAddressParam, cityParam, offerIdParam, affiliateIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoregPhone(string offerId, string emailAddress, string phone, string affiliateId)
        {
            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var phoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Phone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phone, Size = 100 };
            if (phoneParam.Value == null)
                phoneParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoregPhone] @OfferId, @EmailAddress, @Phone, @AffiliateId", offerIdParam, emailAddressParam, phoneParam, affiliateIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoregState(string emailAddress, string state, string offerId, string affiliateId)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 100 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoregState] @EmailAddress, @State, @OfferId, @AffiliateId", emailAddressParam, stateParam, offerIdParam, affiliateIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateforClikUpgrade(string emailAddress, bool? clik)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var clikParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Clik", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = clik.GetValueOrDefault() };
            if (!clik.HasValue)
                clikParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateforClikUpgrade] @EmailAddress, @Clik", emailAddressParam, clikParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateUserInfo(string emailAddress, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string ethnicity, bool? clik)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var address2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address2, Size = 100 };
            if (address2Param.Value == null)
                address2Param.Value = System.DBNull.Value;

            var cityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@City", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = city, Size = 100 };
            if (cityParam.Value == null)
                cityParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 100 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var phoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Phone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phone, Size = 100 };
            if (phoneParam.Value == null)
                phoneParam.Value = System.DBNull.Value;

            var mobilephoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Mobilephone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = mobilephone, Size = 100 };
            if (mobilephoneParam.Value == null)
                mobilephoneParam.Value = System.DBNull.Value;

            var smartPhoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmartPhone", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = smartPhone.GetValueOrDefault() };
            if (!smartPhone.HasValue)
                smartPhoneParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var ethnicityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ethnicity", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ethnicity, Size = 50 };
            if (ethnicityParam.Value == null)
                ethnicityParam.Value = System.DBNull.Value;

            var clikParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Clik", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = clik.GetValueOrDefault() };
            if (!clik.HasValue)
                clikParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateUserInfo] @EmailAddress, @Firstname, @Lastname, @Address, @Address2, @City, @State, @Zip, @Phone, @Mobilephone, @SmartPhone, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @Ethnicity, @Clik", emailAddressParam, firstnameParam, lastnameParam, addressParam, address2Param, cityParam, stateParam, zipParam, phoneParam, mobilephoneParam, smartPhoneParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, ethnicityParam, clikParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId)
        {
            int procResult;
            return ProcessClickCredit(clickCode, email, surveyId, out procResult);
        }

        public System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId, out int procResult)
        {
            var clickCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ClickCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = clickCode, Size = 256 };
            if (clickCodeParam.Value == null)
                clickCodeParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var surveyIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SurveyID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = surveyId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!surveyId.HasValue)
                surveyIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ProcessClickCreditReturnModel>("EXEC @procResult = [dbo].[ProcessClickCredit] @ClickCode, @Email, @SurveyID", clickCodeParam, emailParam, surveyIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ProcessClickCreditReturnModel>> ProcessClickCreditAsync(string clickCode, string email, int? surveyId)
        {
            var clickCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ClickCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = clickCode, Size = 256 };
            if (clickCodeParam.Value == null)
                clickCodeParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var surveyIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SurveyID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = surveyId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!surveyId.HasValue)
                surveyIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ProcessClickCreditReturnModel>("EXEC [dbo].[ProcessClickCredit] @ClickCode, @Email, @SurveyID", clickCodeParam, emailParam, surveyIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<RouterContactInsertsReturnModel> RouterContactInserts(int? interval)
        {
            int procResult;
            return RouterContactInserts(interval, out procResult);
        }

        public System.Collections.Generic.List<RouterContactInsertsReturnModel> RouterContactInserts(int? interval, out int procResult)
        {
            var intervalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Interval", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = interval.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!interval.HasValue)
                intervalParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<RouterContactInsertsReturnModel>("EXEC @procResult = [dbo].[RouterContactInserts] @Interval", intervalParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<RouterContactInsertsReturnModel>> RouterContactInsertsAsync(int? interval)
        {
            var intervalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Interval", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = interval.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!interval.HasValue)
                intervalParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<RouterContactInsertsReturnModel>("EXEC [dbo].[RouterContactInserts] @Interval", intervalParam).ToListAsync();

            return procResultData;
        }

        public int SpDoi2ApplySignupBonus(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_doi2_ApplySignupBonus] @EmailAddress", emailAddressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpEecChangeEmail(string fromEmailAddress, string toEmailAddress)
        {
            var fromEmailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FromEmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fromEmailAddress, Size = 255 };
            if (fromEmailAddressParam.Value == null)
                fromEmailAddressParam.Value = System.DBNull.Value;

            var toEmailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ToEmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = toEmailAddress, Size = 255 };
            if (toEmailAddressParam.Value == null)
                toEmailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_ChangeEmail] @FromEmailAddress, @ToEmailAddress", fromEmailAddressParam, toEmailAddressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpEecCombineEmailAccounts(string fromEmailAddress, string toEmailAddress)
        {
            var fromEmailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FromEmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fromEmailAddress, Size = 255 };
            if (fromEmailAddressParam.Value == null)
                fromEmailAddressParam.Value = System.DBNull.Value;

            var toEmailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ToEmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = toEmailAddress, Size = 255 };
            if (toEmailAddressParam.Value == null)
                toEmailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_CombineEmailAccounts] @FromEmailAddress, @ToEmailAddress", fromEmailAddressParam, toEmailAddressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango()
        {
            int procResult;
            return SpEecGetAwaitingEmailAddressesJango(out procResult);
        }

        public System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpEecGetAwaitingEmailAddressesJangoReturnModel>("EXEC @procResult = [dbo].[sp_eec_GetAwaitingEmailAddresses_Jango] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel>> SpEecGetAwaitingEmailAddressesJangoAsync()
        {
            var procResultData = await Database.SqlQuery<SpEecGetAwaitingEmailAddressesJangoReturnModel>("EXEC [dbo].[sp_eec_GetAwaitingEmailAddresses_Jango] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak()
        {
            int procResult;
            return SpEecGetAwaitingOfferIdSendOnDayListrak(out procResult);
        }

        public System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>("EXEC @procResult = [dbo].[sp_eec_GetAwaitingOfferIDSendOnDay_Listrak] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>> SpEecGetAwaitingOfferIdSendOnDayListrakAsync()
        {
            var procResultData = await Database.SqlQuery<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>("EXEC [dbo].[sp_eec_GetAwaitingOfferIDSendOnDay_Listrak] ").ToListAsync();

            return procResultData;
        }

        public int SpEecGetCostPerLead(string affiliateId, string subId, string offerId, out decimal? cost)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var costParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Cost", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Output, Precision = 19, Scale = 4 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_GetCostPerLead] @AffiliateID, @SubID, @OfferID, @Cost OUTPUT", affiliateIdParam, subIdParam, offerIdParam, costParam, procResultParam);
            if (IsSqlParameterNull(costParam))
                cost = null;
            else
                cost = (decimal) costParam.Value;

            return (int) procResultParam.Value;
        }

        public int SpEecGetReceiveShareMultiplier(string affiliateId, string subId, string offerId, out double? receiveShareMultiplier)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var receiveShareMultiplierParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReceiveShareMultiplier", SqlDbType = System.Data.SqlDbType.Float, Direction = System.Data.ParameterDirection.Output, Precision = 53, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_GetReceiveShareMultiplier] @AffiliateID, @SubID, @OfferID, @ReceiveShareMultiplier OUTPUT", affiliateIdParam, subIdParam, offerIdParam, receiveShareMultiplierParam, procResultParam);
            if (IsSqlParameterNull(receiveShareMultiplierParam))
                receiveShareMultiplier = null;
            else
                receiveShareMultiplier = (double) receiveShareMultiplierParam.Value;

            return (int) procResultParam.Value;
        }

        public int SpEecIsDailyCapped(string affiliateId, string subId, string offerId, out bool? capped)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var cappedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Capped", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_IsDailyCapped] @AffiliateID, @SubID, @OfferID, @Capped OUTPUT", affiliateIdParam, subIdParam, offerIdParam, cappedParam, procResultParam);
            if (IsSqlParameterNull(cappedParam))
                capped = null;
            else
                capped = (bool) cappedParam.Value;

            return (int) procResultParam.Value;
        }

        public int SpEecIsMonthlyCapped(string affiliateId, string subId, string offerId, out bool? capped)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var cappedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Capped", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_IsMonthlyCapped] @AffiliateID, @SubID, @OfferID, @Capped OUTPUT", affiliateIdParam, subIdParam, offerIdParam, cappedParam, procResultParam);
            if (IsSqlParameterNull(cappedParam))
                capped = null;
            else
                capped = (bool) cappedParam.Value;

            return (int) procResultParam.Value;
        }

        public int SpEecIsSubEnabled(string affiliateId, string subId, string offerId, out bool? enabled)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var enabledParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Enabled", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_IsSubEnabled] @AffiliateID, @SubID, @OfferID, @Enabled OUTPUT", affiliateIdParam, subIdParam, offerIdParam, enabledParam, procResultParam);
            if (IsSqlParameterNull(enabledParam))
                enabled = null;
            else
                enabled = (bool) enabledParam.Value;

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress)
        {
            int procResult;
            return SpToaGetCountryIdsForUser(emailAddress, out procResult);
        }

        public System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress, out int procResult)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpToaGetCountryIdsForUserReturnModel>("EXEC @procResult = [dbo].[sp_toa_GetCountryIdsForUser] @EmailAddress", emailAddressParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel>> SpToaGetCountryIdsForUserAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpToaGetCountryIdsForUserReturnModel>("EXEC [dbo].[sp_toa_GetCountryIdsForUser] @EmailAddress", emailAddressParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress)
        {
            int procResult;
            return SpToaGetSurveyPanelSignupCount(emailAddress, out procResult);
        }

        public System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress, out int procResult)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpToaGetSurveyPanelSignupCountReturnModel>("EXEC @procResult = [dbo].[sp_toa_GetSurveyPanelSignupCount] @EmailAddress", emailAddressParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel>> SpToaGetSurveyPanelSignupCountAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpToaGetSurveyPanelSignupCountReturnModel>("EXEC [dbo].[sp_toa_GetSurveyPanelSignupCount] @EmailAddress", emailAddressParam).ToListAsync();

            return procResultData;
        }

        public int UpdateUserNewsWithPayout(string emailAddress, System.DateTime? requestDate)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 250 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var requestDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = requestDate.GetValueOrDefault() };
            if (!requestDate.HasValue)
                requestDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[UpdateUserNewsWithPayout] @EmailAddress, @RequestDate", emailAddressParam, requestDateParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Database context factory

    public partial class GloshareDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<GloshareDbContext>
    {
        public GloshareDbContext Create()
        {
            return new GloshareDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class FakeGloshareDbContext : IGloshareDbContext
    {
        public System.Data.Entity.DbSet<Affiliate> Affiliates { get; set; }
        public System.Data.Entity.DbSet<AffiliateCountry> AffiliateCountries { get; set; }
        public System.Data.Entity.DbSet<AffiliateSub> AffiliateSubs { get; set; }
        public System.Data.Entity.DbSet<AllInboxClikBackup> AllInboxClikBackups { get; set; }
        public System.Data.Entity.DbSet<AweberDemoUpdate> AweberDemoUpdates { get; set; }
        public System.Data.Entity.DbSet<BatchFileExportLeadsSent> BatchFileExportLeadsSents { get; set; }
        public System.Data.Entity.DbSet<CbrConsent> CbrConsents { get; set; }
        public System.Data.Entity.DbSet<CbrEmailAddressChange> CbrEmailAddressChanges { get; set; }
        public System.Data.Entity.DbSet<CbrEmailDailyBatchCounter> CbrEmailDailyBatchCounters { get; set; }
        public System.Data.Entity.DbSet<CbrJobCode> CbrJobCodes { get; set; }
        public System.Data.Entity.DbSet<CbrLead> CbrLeads { get; set; }
        public System.Data.Entity.DbSet<CbrLeadStageInsert> CbrLeadStageInserts { get; set; }
        public System.Data.Entity.DbSet<CbrLeadStageUpdate> CbrLeadStageUpdates { get; set; }
        public System.Data.Entity.DbSet<CbrPayout> CbrPayouts { get; set; }
        public System.Data.Entity.DbSet<CbrQuestion> CbrQuestions { get; set; }
        public System.Data.Entity.DbSet<CbrQuestionAnswer> CbrQuestionAnswers { get; set; }
        public System.Data.Entity.DbSet<CbrQuestionDropdown> CbrQuestionDropdowns { get; set; }
        public System.Data.Entity.DbSet<CbrSignup> CbrSignups { get; set; }
        public System.Data.Entity.DbSet<CbrSignupError> CbrSignupErrors { get; set; }
        public System.Data.Entity.DbSet<CbrSurvey> CbrSurveys { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyBackup> CbrSurveyBackups { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyInstruction> CbrSurveyInstructions { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyQuestion> CbrSurveyQuestions { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyStatu> CbrSurveyStatus { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyStatusOutput> CbrSurveyStatusOutputs { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyStatusType> CbrSurveyStatusTypes { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyStatusWithBadEmail> CbrSurveyStatusWithBadEmails { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyStatusWithDupPay> CbrSurveyStatusWithDupPays { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyTarget> CbrSurveyTargets { get; set; }
        public System.Data.Entity.DbSet<CbrSurveyWithdraw> CbrSurveyWithdraws { get; set; }
        public System.Data.Entity.DbSet<CbrVerification> CbrVerifications { get; set; }
        public System.Data.Entity.DbSet<CbrZipVerified> CbrZipVerifieds { get; set; }
        public System.Data.Entity.DbSet<Coreg> Coregs { get; set; }
        public System.Data.Entity.DbSet<CoregCampaign> CoregCampaigns { get; set; }
        public System.Data.Entity.DbSet<CoregError> CoregErrors { get; set; }
        public System.Data.Entity.DbSet<CoregLeadAccepted> CoregLeadAccepteds { get; set; }
        public System.Data.Entity.DbSet<CoregPartner> CoregPartners { get; set; }
        public System.Data.Entity.DbSet<Country> Countries { get; set; }
        public System.Data.Entity.DbSet<CountryLanguageDefault> CountryLanguageDefaults { get; set; }
        public System.Data.Entity.DbSet<CpaNotification> CpaNotifications { get; set; }
        public System.Data.Entity.DbSet<CpaNotificationJob> CpaNotificationJobs { get; set; }
        public System.Data.Entity.DbSet<CpaNotificationNewSub> CpaNotificationNewSubs { get; set; }
        public System.Data.Entity.DbSet<CpaNotificationType> CpaNotificationTypes { get; set; }
        public System.Data.Entity.DbSet<DashboardOverlay> DashboardOverlays { get; set; }
        public System.Data.Entity.DbSet<DashboardOverlayEmail> DashboardOverlayEmails { get; set; }
        public System.Data.Entity.DbSet<DoiRotatingOffer> DoiRotatingOffers { get; set; }
        public System.Data.Entity.DbSet<EducationCode> EducationCodes { get; set; }
        public System.Data.Entity.DbSet<GeoLiteCityBlock> GeoLiteCityBlocks { get; set; }
        public System.Data.Entity.DbSet<GeoLiteCityLocation> GeoLiteCityLocations { get; set; }
        public System.Data.Entity.DbSet<InstructionBullet> InstructionBullets { get; set; }
        public System.Data.Entity.DbSet<IpCountry> IpCountries { get; set; }
        public System.Data.Entity.DbSet<IpCountryOld> IpCountryOlds { get; set; }
        public System.Data.Entity.DbSet<IpCountyBackup> IpCountyBackups { get; set; }
        public System.Data.Entity.DbSet<IpCountyNewBackup> IpCountyNewBackups { get; set; }
        public System.Data.Entity.DbSet<IpLog> IpLogs { get; set; }
        public System.Data.Entity.DbSet<JobData> JobDatas { get; set; }
        public System.Data.Entity.DbSet<Language> Languages { get; set; }
        public System.Data.Entity.DbSet<LeadReversal> LeadReversals { get; set; }
        public System.Data.Entity.DbSet<LoggedInFromClik> LoggedInFromCliks { get; set; }
        public System.Data.Entity.DbSet<MobilelLead> MobilelLeads { get; set; }
        public System.Data.Entity.DbSet<Occupation> Occupations { get; set; }
        public System.Data.Entity.DbSet<OccupationEducation> OccupationEducations { get; set; }
        public System.Data.Entity.DbSet<OccupationIncome> OccupationIncomes { get; set; }
        public System.Data.Entity.DbSet<OccupationSector> OccupationSectors { get; set; }
        public System.Data.Entity.DbSet<Offer> Offers { get; set; }
        public System.Data.Entity.DbSet<OptInEmailLog> OptInEmailLogs { get; set; }
        public System.Data.Entity.DbSet<OptInEmailVerbage> OptInEmailVerbages { get; set; }
        public System.Data.Entity.DbSet<OptInEmailVerbageListrakQueue> OptInEmailVerbageListrakQueues { get; set; }
        public System.Data.Entity.DbSet<OptInEmailVerbageTestSend> OptInEmailVerbageTestSends { get; set; }
        public System.Data.Entity.DbSet<OptInLead> OptInLeads { get; set; }
        public System.Data.Entity.DbSet<PostQueue> PostQueues { get; set; }
        public System.Data.Entity.DbSet<ProcessedSurveyId> ProcessedSurveyIds { get; set; }
        public System.Data.Entity.DbSet<Referral> Referrals { get; set; }
        public System.Data.Entity.DbSet<ReUploadElab> ReUploadElabs { get; set; }
        public System.Data.Entity.DbSet<RouterAction> RouterActions { get; set; }
        public System.Data.Entity.DbSet<RouterContact> RouterContacts { get; set; }
        public System.Data.Entity.DbSet<RouterContactPrecisionSample> RouterContactPrecisionSamples { get; set; }
        public System.Data.Entity.DbSet<RouterHost> RouterHosts { get; set; }
        public System.Data.Entity.DbSet<RouterPostBackPrecisionSample> RouterPostBackPrecisionSamples { get; set; }
        public System.Data.Entity.DbSet<RouterPostBackYourSurvey> RouterPostBackYourSurveys { get; set; }
        public System.Data.Entity.DbSet<RouterStatusPrecisionSample> RouterStatusPrecisionSamples { get; set; }
        public System.Data.Entity.DbSet<RouterStatusYourSurvey> RouterStatusYourSurveys { get; set; }
        public System.Data.Entity.DbSet<RouterSurveyPrecisionSample> RouterSurveyPrecisionSamples { get; set; }
        public System.Data.Entity.DbSet<RouterSurveyYourSurvey> RouterSurveyYourSurveys { get; set; }
        public System.Data.Entity.DbSet<ScrubLead> ScrubLeads { get; set; }
        public System.Data.Entity.DbSet<ScrubReportConfig> ScrubReportConfigs { get; set; }
        public System.Data.Entity.DbSet<SiteBlacklist> SiteBlacklists { get; set; }
        public System.Data.Entity.DbSet<SiteBlacklistIpAddress> SiteBlacklistIpAddresses { get; set; }
        public System.Data.Entity.DbSet<SmartEmailLinkClick> SmartEmailLinkClicks { get; set; }
        public System.Data.Entity.DbSet<SmartEmailLinkConfig> SmartEmailLinkConfigs { get; set; }
        public System.Data.Entity.DbSet<SmartEmailLinkField> SmartEmailLinkFields { get; set; }
        public System.Data.Entity.DbSet<SmartEmailLinkTarget> SmartEmailLinkTargets { get; set; }
        public System.Data.Entity.DbSet<SmartExitLinkConfig> SmartExitLinkConfigs { get; set; }
        public System.Data.Entity.DbSet<SmartExitLinkField> SmartExitLinkFields { get; set; }
        public System.Data.Entity.DbSet<SmartExitLinkTarget> SmartExitLinkTargets { get; set; }
        public System.Data.Entity.DbSet<SmartLinkAiLog> SmartLinkAiLogs { get; set; }
        public System.Data.Entity.DbSet<SmartLinkLog> SmartLinkLogs { get; set; }
        public System.Data.Entity.DbSet<SmartWebLinkConfig> SmartWebLinkConfigs { get; set; }
        public System.Data.Entity.DbSet<SmartWebLinkField> SmartWebLinkFields { get; set; }
        public System.Data.Entity.DbSet<SmartWebLinkLog> SmartWebLinkLogs { get; set; }
        public System.Data.Entity.DbSet<SmartWebLinkTarget> SmartWebLinkTargets { get; set; }
        public System.Data.Entity.DbSet<State> States { get; set; }
        public System.Data.Entity.DbSet<UserNew> UserNews { get; set; }
        public System.Data.Entity.DbSet<VerifyZipFailure> VerifyZipFailures { get; set; }
        public System.Data.Entity.DbSet<VwCbrSurveyStatusWithPending> VwCbrSurveyStatusWithPendings { get; set; }
        public System.Data.Entity.DbSet<VwDebugIp> VwDebugIps { get; set; }
        public System.Data.Entity.DbSet<VwJobCode> VwJobCodes { get; set; }
        public System.Data.Entity.DbSet<VwOptInLeadKey> VwOptInLeadKeys { get; set; }
        public System.Data.Entity.DbSet<VwOptInLeadPjDegree> VwOptInLeadPjDegrees { get; set; }
        public System.Data.Entity.DbSet<VwOptInLeadSurvey> VwOptInLeadSurveys { get; set; }
        public System.Data.Entity.DbSet<VwOptInLeadUser> VwOptInLeadUsers { get; set; }
        public System.Data.Entity.DbSet<VwRouterStatusPrecisionSurvey> VwRouterStatusPrecisionSurveys { get; set; }
        public System.Data.Entity.DbSet<WeeklySurveyAnswer> WeeklySurveyAnswers { get; set; }
        public System.Data.Entity.DbSet<WeeklySurveyConfig> WeeklySurveyConfigs { get; set; }
        public System.Data.Entity.DbSet<WithdrawReason> WithdrawReasons { get; set; }

        public FakeGloshareDbContext()
        {
            Affiliates = new FakeDbSet<Affiliate>("AffiliateId");
            AffiliateCountries = new FakeDbSet<AffiliateCountry>("AffiliateId", "CountryId");
            AffiliateSubs = new FakeDbSet<AffiliateSub>("AffiliateId");
            AllInboxClikBackups = new FakeDbSet<AllInboxClikBackup>("PqpId", "InsertDate");
            AweberDemoUpdates = new FakeDbSet<AweberDemoUpdate>("EmailAddress");
            BatchFileExportLeadsSents = new FakeDbSet<BatchFileExportLeadsSent>("AffiliateId", "EmailAddress");
            CbrConsents = new FakeDbSet<CbrConsent>("CbrConsentId");
            CbrEmailAddressChanges = new FakeDbSet<CbrEmailAddressChange>("EmailAddress", "NewEmailAddress", "ChangeDate");
            CbrEmailDailyBatchCounters = new FakeDbSet<CbrEmailDailyBatchCounter>("LastIdProcessed");
            CbrJobCodes = new FakeDbSet<CbrJobCode>("CbrJobCodeId");
            CbrLeads = new FakeDbSet<CbrLead>("CbrLeadId", "EmailAddress", "CountryId", "SelectedLanguageId", "OptInDate", "LastRunDate", "LastSendOnDay", "DoNotSendTo", "ThirdPartyListsUpdated", "InsertDate");
            CbrLeadStageInserts = new FakeDbSet<CbrLeadStageInsert>("CbrLeadStageInsertId");
            CbrLeadStageUpdates = new FakeDbSet<CbrLeadStageUpdate>("CbrLeadStageUpdateId");
            CbrPayouts = new FakeDbSet<CbrPayout>("EmailAddress", "CountryId", "RequestAmount", "OptionId", "Type", "RequestForPaymentDate");
            CbrQuestions = new FakeDbSet<CbrQuestion>("Id", "ElabsId");
            CbrQuestionAnswers = new FakeDbSet<CbrQuestionAnswer>("EmailAddress", "QuestionId");
            CbrQuestionDropdowns = new FakeDbSet<CbrQuestionDropdown>("Id");
            CbrSignups = new FakeDbSet<CbrSignup>("CbrSignupId");
            CbrSignupErrors = new FakeDbSet<CbrSignupError>("CbrSignupErrorId");
            CbrSurveys = new FakeDbSet<CbrSurvey>("Id", "Title", "CountryId", "ClickPayoutValue", "ClickReceiveValue", "ClickCode", "PayoutValue", "ReceiveValue", "AffiliateCampaignId", "Type", "Url", "ImageWidth", "ImageHeight", "QuestionCount", "DailyCapPerUser", "Rank", "Hide", "Enabled", "Approved", "CausesConversion", "CreateDate", "DaysPending", "DisplaysForType", "IncentFriendly");
            CbrSurveyBackups = new FakeDbSet<CbrSurveyBackup>("Id", "Title", "CountryId", "ClickPayoutValue", "ClickReceiveValue", "ClickCode", "PayoutValue", "ReceiveValue", "AffiliateCampaignId", "Type", "Url", "ImageWidth", "ImageHeight", "QuestionCount", "DailyCapPerUser", "Rank", "Hide", "Enabled", "Approved", "CausesConversion", "CreateDate");
            CbrSurveyInstructions = new FakeDbSet<CbrSurveyInstruction>("CbrSurveyInstructionId");
            CbrSurveyQuestions = new FakeDbSet<CbrSurveyQuestion>("SurveyId", "QuestionId");
            CbrSurveyStatus = new FakeDbSet<CbrSurveyStatu>("EmailAddress", "SurveyId", "Id");
            CbrSurveyStatusOutputs = new FakeDbSet<CbrSurveyStatusOutput>("Id", "EmailAddress", "SurveyId", "PayoutValue", "ReceiveValue", "StatusId", "InsertDate");
            CbrSurveyStatusTypes = new FakeDbSet<CbrSurveyStatusType>("Id", "Description");
            CbrSurveyStatusWithBadEmails = new FakeDbSet<CbrSurveyStatusWithBadEmail>("EmailAddress", "SurveyId", "PayoutValue");
            CbrSurveyStatusWithDupPays = new FakeDbSet<CbrSurveyStatusWithDupPay>("Id", "EmailAddress", "SurveyId", "PayoutValue", "ReceiveValue", "StatusId", "InsertDate");
            CbrSurveyTargets = new FakeDbSet<CbrSurveyTarget>("Id", "SurveyId", "QuestionId");
            CbrSurveyWithdraws = new FakeDbSet<CbrSurveyWithdraw>("CbrSurveyWithdrawId");
            CbrVerifications = new FakeDbSet<CbrVerification>("CbrVerificationId");
            CbrZipVerifieds = new FakeDbSet<CbrZipVerified>("CbrZipVerifiedId");
            Coregs = new FakeDbSet<Coreg>("Id");
            CoregCampaigns = new FakeDbSet<CoregCampaign>("CoregCampaignId");
            CoregErrors = new FakeDbSet<CoregError>("CoregErrorId");
            CoregLeadAccepteds = new FakeDbSet<CoregLeadAccepted>("CoregLeadAcceptedId");
            CoregPartners = new FakeDbSet<CoregPartner>("CoregPartnerId");
            Countries = new FakeDbSet<Country>("CountryId", "CountryName");
            CountryLanguageDefaults = new FakeDbSet<CountryLanguageDefault>("CountryId", "LanguageId");
            CpaNotifications = new FakeDbSet<CpaNotification>("CpaNotificationId");
            CpaNotificationJobs = new FakeDbSet<CpaNotificationJob>("CpaNotificationJobId");
            CpaNotificationNewSubs = new FakeDbSet<CpaNotificationNewSub>("CpaNotificationNewSubId");
            CpaNotificationTypes = new FakeDbSet<CpaNotificationType>("CpaNotificationTypeId");
            DashboardOverlays = new FakeDbSet<DashboardOverlay>("DashboardOverlayId");
            DashboardOverlayEmails = new FakeDbSet<DashboardOverlayEmail>("DashboardOverlayEmailId");
            DoiRotatingOffers = new FakeDbSet<DoiRotatingOffer>("DoiRotatingOfferId");
            EducationCodes = new FakeDbSet<EducationCode>("EducationCodeId");
            GeoLiteCityBlocks = new FakeDbSet<GeoLiteCityBlock>("StartIpNum", "EndIpNum", "LocId");
            GeoLiteCityLocations = new FakeDbSet<GeoLiteCityLocation>("LocId");
            InstructionBullets = new FakeDbSet<InstructionBullet>("InstructionBulletId");
            IpCountries = new FakeDbSet<IpCountry>("StartIp", "EndIp", "StartNum", "EndNum", "CountryId", "CountryName");
            IpCountryOlds = new FakeDbSet<IpCountryOld>("StartIp", "EndIp", "StartNum", "EndNum", "CountryId", "CountryName");
            IpCountyBackups = new FakeDbSet<IpCountyBackup>("StartIp", "EndIp", "StartNum", "EndNum", "CountryId", "CountryName");
            IpCountyNewBackups = new FakeDbSet<IpCountyNewBackup>("StartIp", "EndIp", "StartNum", "EndNum", "CountryId", "CountryName");
            IpLogs = new FakeDbSet<IpLog>("IpLogId");
            JobDatas = new FakeDbSet<JobData>("JobDataId");
            Languages = new FakeDbSet<Language>("LanguageId", "Name");
            LeadReversals = new FakeDbSet<LeadReversal>("AutoId");
            LoggedInFromCliks = new FakeDbSet<LoggedInFromClik>("LoggedInFromClikId");
            MobilelLeads = new FakeDbSet<MobilelLead>("MobileLeadId");
            Occupations = new FakeDbSet<Occupation>("OccupationId");
            OccupationEducations = new FakeDbSet<OccupationEducation>("OccupationEducationId");
            OccupationIncomes = new FakeDbSet<OccupationIncome>("OccupationIncome_");
            OccupationSectors = new FakeDbSet<OccupationSector>("OccupationSectorId");
            Offers = new FakeDbSet<Offer>("OfferId", "Type");
            OptInEmailLogs = new FakeDbSet<OptInEmailLog>("EmailId", "CountryId", "LanguageId", "EmailAddress", "SendOnDay", "DateSent");
            OptInEmailVerbages = new FakeDbSet<OptInEmailVerbage>("EmailId", "LanguageId", "OfferId");
            OptInEmailVerbageListrakQueues = new FakeDbSet<OptInEmailVerbageListrakQueue>("OfferId", "SendOnDay");
            OptInEmailVerbageTestSends = new FakeDbSet<OptInEmailVerbageTestSend>("EmailId", "EmailAddress", "OfferId", "SubId", "AffiliateId", "Name", "Ip", "InsertDate");
            OptInLeads = new FakeDbSet<OptInLead>("EmailAddress");
            PostQueues = new FakeDbSet<PostQueue>("Id");
            ProcessedSurveyIds = new FakeDbSet<ProcessedSurveyId>("SurveyId", "OldId");
            Referrals = new FakeDbSet<Referral>("ReferredEmailAddress", "OfferId");
            ReUploadElabs = new FakeDbSet<ReUploadElab>("LastProcessedDate");
            RouterActions = new FakeDbSet<RouterAction>("RouterActionId");
            RouterContacts = new FakeDbSet<RouterContact>("RouterContactId");
            RouterContactPrecisionSamples = new FakeDbSet<RouterContactPrecisionSample>("RouterContactPrecisionSampleId");
            RouterHosts = new FakeDbSet<RouterHost>("RouterHostId");
            RouterPostBackPrecisionSamples = new FakeDbSet<RouterPostBackPrecisionSample>("RouterPostbackPrecisionSampleId");
            RouterPostBackYourSurveys = new FakeDbSet<RouterPostBackYourSurvey>("RouterPostBackYourSurveysId");
            RouterStatusPrecisionSamples = new FakeDbSet<RouterStatusPrecisionSample>("Email", "Name", "RewardValue", "Status", "PostbackDate", "TransactionId");
            RouterStatusYourSurveys = new FakeDbSet<RouterStatusYourSurvey>("Email", "Name", "Cpi", "PostbackDate", "TransactionId");
            RouterSurveyPrecisionSamples = new FakeDbSet<RouterSurveyPrecisionSample>("RouterSurveyPrecisionSampleId");
            RouterSurveyYourSurveys = new FakeDbSet<RouterSurveyYourSurvey>("RouterSurveyYourSurveyId");
            ScrubLeads = new FakeDbSet<ScrubLead>("Id", "EmailAddress", "CountryId", "SelectedLanguageId", "InsertDate");
            ScrubReportConfigs = new FakeDbSet<ScrubReportConfig>("AffiliateId");
            SiteBlacklists = new FakeDbSet<SiteBlacklist>("EmailAddress", "OfferId");
            SiteBlacklistIpAddresses = new FakeDbSet<SiteBlacklistIpAddress>("Id", "IpAddress", "RedirTimeout", "RedirUrl");
            SmartEmailLinkClicks = new FakeDbSet<SmartEmailLinkClick>("Id", "EmailAddress");
            SmartEmailLinkConfigs = new FakeDbSet<SmartEmailLinkConfig>("Id");
            SmartEmailLinkFields = new FakeDbSet<SmartEmailLinkField>("Id");
            SmartEmailLinkTargets = new FakeDbSet<SmartEmailLinkTarget>("Id", "LinkId", "QuestionId");
            SmartExitLinkConfigs = new FakeDbSet<SmartExitLinkConfig>("Id");
            SmartExitLinkFields = new FakeDbSet<SmartExitLinkField>("Id");
            SmartExitLinkTargets = new FakeDbSet<SmartExitLinkTarget>("Id", "LinkId", "QuestionId");
            SmartLinkAiLogs = new FakeDbSet<SmartLinkAiLog>("AutoId", "LinkId", "Epi", "PriorityFrom", "PriorityTo", "ChangeType", "SmartLinkSystem", "DateChanged");
            SmartLinkLogs = new FakeDbSet<SmartLinkLog>("Id", "LinkId", "EmailAddress", "SmartLinkSystem", "Confirmed", "DateSent");
            SmartWebLinkConfigs = new FakeDbSet<SmartWebLinkConfig>("Id");
            SmartWebLinkFields = new FakeDbSet<SmartWebLinkField>("Id");
            SmartWebLinkLogs = new FakeDbSet<SmartWebLinkLog>("Id", "LinkId", "EmailAddress", "DateSent");
            SmartWebLinkTargets = new FakeDbSet<SmartWebLinkTarget>("Id", "LinkId", "QuestionId");
            States = new FakeDbSet<State>("StateId");
            UserNews = new FakeDbSet<UserNew>("UserNewsId");
            VerifyZipFailures = new FakeDbSet<VerifyZipFailure>("VerifyZipFailureId");
            VwCbrSurveyStatusWithPendings = new FakeDbSet<VwCbrSurveyStatusWithPending>("IsPending", "Type", "Id", "EmailAddress", "SurveyId", "PayoutValue", "ReceiveValue", "StatusId", "InsertDate", "Title");
            VwDebugIps = new FakeDbSet<VwDebugIp>("SiteVertical", "EmailAddress", "CountryId", "SelectedLanguageId", "OptInDate", "LastRunDate", "LastSendOnDay", "DoNotSendTo", "ThirdPartyListsUpdated", "InsertDate");
            VwJobCodes = new FakeDbSet<VwJobCode>("CbrJobCodeId", "OccupationCode", "CbrQuestionDropdownId", "Active", "Answer");
            VwOptInLeadKeys = new FakeDbSet<VwOptInLeadKey>("EmailAddress", "CountryId", "InsertDate");
            VwOptInLeadPjDegrees = new FakeDbSet<VwOptInLeadPjDegree>("SiteVertical", "EmailAddress", "CountryId", "SelectedLanguageId", "OptInDate", "LastRunDate", "LastSendOnDay", "DoNotSendTo", "ThirdPartyListsUpdated", "InsertDate");
            VwOptInLeadSurveys = new FakeDbSet<VwOptInLeadSurvey>("SiteVertical", "EmailAddress", "CountryId", "SelectedLanguageId", "OptInDate", "LastRunDate", "LastSendOnDay", "DoNotSendTo", "ThirdPartyListsUpdated", "InsertDate");
            VwOptInLeadUsers = new FakeDbSet<VwOptInLeadUser>("EmailAddress");
            VwRouterStatusPrecisionSurveys = new FakeDbSet<VwRouterStatusPrecisionSurvey>("Email", "UserGuid", "Name", "Status", "Reward", "Gross");
            WeeklySurveyAnswers = new FakeDbSet<WeeklySurveyAnswer>("EmailAddress", "SurveyId", "CountryId");
            WeeklySurveyConfigs = new FakeDbSet<WeeklySurveyConfig>("SurveyId", "Answer", "CountryId");
            WithdrawReasons = new FakeDbSet<WithdrawReason>("WithdrawReasonId");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int CommandExecute(string command, string comment, int? mode, string execute)
        {

            return 0;
        }

        public System.Collections.Generic.List<DailyReportCostCpaReturnModel> DailyReportCostCpa(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return DailyReportCostCpa(startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<DailyReportCostCpaReturnModel> DailyReportCostCpa(System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DailyReportCostCpaReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportCostCpaReturnModel>> DailyReportCostCpaAsync(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(DailyReportCostCpa(startDate, endDate, out procResult));
        }

        public System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId)
        {
            int procResult;
            return DailyReportCostOfLeads(type, startDate, endDate, countryId, out procResult);
        }

        public System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel>> DailyReportCostOfLeadsAsync(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(DailyReportCostOfLeads(type, startDate, endDate, countryId, out procResult));
        }

        public System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return DailyReportRevenueCpa(startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DailyReportRevenueCpaReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRevenueCpaReturnModel>> DailyReportRevenueCpaAsync(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(DailyReportRevenueCpa(startDate, endDate, out procResult));
        }

        public System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return DailyReportRoiByType(startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<DailyReportRoiByTypeReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRoiByTypeReturnModel>> DailyReportRoiByTypeAsync(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(DailyReportRoiByType(startDate, endDate, out procResult));
        }

        public int DevPurgeSurveyResultsForEmail(string emailAddress, int? surveyId)
        {

            return 0;
        }

        public int FixIp(string emailAddress, string ip)
        {

            return 0;
        }

        public System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck)
        {
            int procResult;
            return GetLeadsByDayForFraud(dateToCheck, out procResult);
        }

        public System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel>> GetLeadsByDayForFraudAsync(System.DateTime? dateToCheck)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetLeadsByDayForFraud(dateToCheck, out procResult));
        }

        public System.Collections.Generic.List<GetMobileEarningsReturnModel> GetMobileEarnings(System.Guid? mobileUserId)
        {
            int procResult;
            return GetMobileEarnings(mobileUserId, out procResult);
        }

        public System.Collections.Generic.List<GetMobileEarningsReturnModel> GetMobileEarnings(System.Guid? mobileUserId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetMobileEarningsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetMobileEarningsReturnModel>> GetMobileEarningsAsync(System.Guid? mobileUserId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetMobileEarnings(mobileUserId, out procResult));
        }

        public System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd)
        {
            int procResult;
            return GetOffersReport(offerId, affiliateId, subid, dateStart, dateEnd, out procResult);
        }

        public System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetOffersReportReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetOffersReportReturnModel>> GetOffersReportAsync(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetOffersReport(offerId, affiliateId, subid, dateStart, dateEnd, out procResult));
        }

        public System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate)
        {
            int procResult;
            return GetRoiBySignupDate(signupDate, out procResult);
        }

        public System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetRoiBySignupDateReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySignupDateReturnModel>> GetRoiBySignupDateAsync(System.DateTime? signupDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetRoiBySignupDate(signupDate, out procResult));
        }

        public System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId)
        {
            int procResult;
            return GetRoiBySub(affiliateId, offerId, subId, out procResult);
        }

        public System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetRoiBySubReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySubReturnModel>> GetRoiBySubAsync(string affiliateId, string offerId, string subId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetRoiBySub(affiliateId, offerId, subId, out procResult));
        }

        public System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber)
        {
            int procResult;
            return GetRoiForLast100Signups(affiliateId, offerId, subId, sampleNumber, out procResult);
        }

        public System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel>> GetRoiForLast100SignupsAsync(string affiliateId, string offerId, string subId, int? sampleNumber)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetRoiForLast100Signups(affiliateId, offerId, subId, sampleNumber, out procResult));
        }

        public System.Collections.Generic.List<GetRouterStatsReturnModel> GetRouterStats()
        {
            int procResult;
            return GetRouterStats(out procResult);
        }

        public System.Collections.Generic.List<GetRouterStatsReturnModel> GetRouterStats(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetRouterStatsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetRouterStatsReturnModel>> GetRouterStatsAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetRouterStats(out procResult));
        }

        public System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList)
        {
            int procResult;
            return GetSignupsWithRevenue(affiliateId, offerId, subId, emailList, out procResult);
        }

        public System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetSignupsWithRevenueReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetSignupsWithRevenueReturnModel>> GetSignupsWithRevenueAsync(string affiliateId, string offerId, string subId, string emailList)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetSignupsWithRevenue(affiliateId, offerId, subId, emailList, out procResult));
        }

        public System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate()
        {
            int procResult;
            return GetTotalPayoutToDate(out procResult);
        }

        public System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetTotalPayoutToDateReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetTotalPayoutToDateReturnModel>> GetTotalPayoutToDateAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetTotalPayoutToDate(out procResult));
        }

        public HasEmailConvertedForIncentReturnModel HasEmailConvertedForIncent(string emailAddress)
        {
            int procResult;
            return HasEmailConvertedForIncent(emailAddress, out procResult);
        }

        public HasEmailConvertedForIncentReturnModel HasEmailConvertedForIncent(string emailAddress, out int procResult)
        {

            procResult = 0;
            return new HasEmailConvertedForIncentReturnModel();
        }

        public System.Threading.Tasks.Task<HasEmailConvertedForIncentReturnModel> HasEmailConvertedForIncentAsync(string emailAddress)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(HasEmailConvertedForIncent(emailAddress, out procResult));
        }

        public int IndexOptimize(string databases, string fragmentationHighLob, string fragmentationHighNonLob, string fragmentationMediumLob, string fragmentationMediumNonLob, string fragmentationLowLob, string fragmentationLowNonLob, int? fragmentationLevel1, int? fragmentationLevel2, int? pageCountLevel, string sortInTempdb, int? maxDop, int? fillFactor, string lobCompaction, int? statisticsSample, string partitionLevel, int? timeLimit, string indexes, string padIndex, string statisticsResample, string updateColumnStatistics, string onlyModifiedStatistics, string execute)
        {

            return 0;
        }

        public int InsertOptInLeadForClik(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string ip, bool? clik, System.DateTime? insertDate, string address)
        {

            return 0;
        }

        public int InsertOptInLeadForPjd(string emailAddress, string firstname, string offerId, string affiliateId, string subId, string countryId, string ip)
        {

            return 0;
        }

        public IsNewSubIdReturnModel IsNewSubId(string subId, System.DateTime? searchBeforeDate)
        {
            int procResult;
            return IsNewSubId(subId, searchBeforeDate, out procResult);
        }

        public IsNewSubIdReturnModel IsNewSubId(string subId, System.DateTime? searchBeforeDate, out int procResult)
        {

            procResult = 0;
            return new IsNewSubIdReturnModel();
        }

        public System.Threading.Tasks.Task<IsNewSubIdReturnModel> IsNewSubIdAsync(string subId, System.DateTime? searchBeforeDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(IsNewSubId(subId, searchBeforeDate, out procResult));
        }

        public int Oil(string emailAddress)
        {

            return 0;
        }

        public int OptInLeadCompleteCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string password)
        {

            return 0;
        }

        public OptInLeadIsClikReturnModel OptInLeadIsClik(string emailAddress)
        {
            int procResult;
            return OptInLeadIsClik(emailAddress, out procResult);
        }

        public OptInLeadIsClikReturnModel OptInLeadIsClik(string emailAddress, out int procResult)
        {

            procResult = 0;
            return new OptInLeadIsClikReturnModel();
        }

        public System.Threading.Tasks.Task<OptInLeadIsClikReturnModel> OptInLeadIsClikAsync(string emailAddress)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(OptInLeadIsClik(emailAddress, out procResult));
        }

        public int OptInLeadSetPassword(string emailAddress, string password)
        {

            return 0;
        }

        public int OptInLeadUpdate(int? siteVertical, string emailAddress, string salutation, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string occupation, string income, string homeOwnership, string education, string maritalStatus, int? children, string ethnicity, string password, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string selectedLanguageId, System.DateTime? optInDate, System.DateTime? lastRunDate, int? lastSendOnDay, System.DateTime? optOutDate, bool? doNotSendTo, System.DateTime? confirmedDate, bool? thirdPartyListsUpdated, System.DateTime? insertDate, string ip, string uid)
        {

            return 0;
        }

        public int OptInLeadUpdateCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string countryId, string address)
        {

            return 0;
        }

        public int OptInLeadUpdateCoregBirthDate(string emailAddress, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string offerId, string affiliateId)
        {

            return 0;
        }

        public int OptInLeadUpdateCoregCity(string emailAddress, string city, string offerId, string affiliateId)
        {

            return 0;
        }

        public int OptInLeadUpdateCoregPhone(string offerId, string emailAddress, string phone, string affiliateId)
        {

            return 0;
        }

        public int OptInLeadUpdateCoregState(string emailAddress, string state, string offerId, string affiliateId)
        {

            return 0;
        }

        public int OptInLeadUpdateforClikUpgrade(string emailAddress, bool? clik)
        {

            return 0;
        }

        public int OptInLeadUpdateUserInfo(string emailAddress, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string ethnicity, bool? clik)
        {

            return 0;
        }

        public System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId)
        {
            int procResult;
            return ProcessClickCredit(clickCode, email, surveyId, out procResult);
        }

        public System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcessClickCreditReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcessClickCreditReturnModel>> ProcessClickCreditAsync(string clickCode, string email, int? surveyId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcessClickCredit(clickCode, email, surveyId, out procResult));
        }

        public System.Collections.Generic.List<RouterContactInsertsReturnModel> RouterContactInserts(int? interval)
        {
            int procResult;
            return RouterContactInserts(interval, out procResult);
        }

        public System.Collections.Generic.List<RouterContactInsertsReturnModel> RouterContactInserts(int? interval, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<RouterContactInsertsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<RouterContactInsertsReturnModel>> RouterContactInsertsAsync(int? interval)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(RouterContactInserts(interval, out procResult));
        }

        public int SpDoi2ApplySignupBonus(string emailAddress)
        {

            return 0;
        }

        public int SpEecChangeEmail(string fromEmailAddress, string toEmailAddress)
        {

            return 0;
        }

        public int SpEecCombineEmailAccounts(string fromEmailAddress, string toEmailAddress)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango()
        {
            int procResult;
            return SpEecGetAwaitingEmailAddressesJango(out procResult);
        }

        public System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel>> SpEecGetAwaitingEmailAddressesJangoAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpEecGetAwaitingEmailAddressesJango(out procResult));
        }

        public System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak()
        {
            int procResult;
            return SpEecGetAwaitingOfferIdSendOnDayListrak(out procResult);
        }

        public System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>> SpEecGetAwaitingOfferIdSendOnDayListrakAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpEecGetAwaitingOfferIdSendOnDayListrak(out procResult));
        }

        public int SpEecGetCostPerLead(string affiliateId, string subId, string offerId, out decimal? cost)
        {
            cost = default(decimal);

            return 0;
        }

        public int SpEecGetReceiveShareMultiplier(string affiliateId, string subId, string offerId, out double? receiveShareMultiplier)
        {
            receiveShareMultiplier = default(double);

            return 0;
        }

        public int SpEecIsDailyCapped(string affiliateId, string subId, string offerId, out bool? capped)
        {
            capped = default(bool);

            return 0;
        }

        public int SpEecIsMonthlyCapped(string affiliateId, string subId, string offerId, out bool? capped)
        {
            capped = default(bool);

            return 0;
        }

        public int SpEecIsSubEnabled(string affiliateId, string subId, string offerId, out bool? enabled)
        {
            enabled = default(bool);

            return 0;
        }

        public System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress)
        {
            int procResult;
            return SpToaGetCountryIdsForUser(emailAddress, out procResult);
        }

        public System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel>> SpToaGetCountryIdsForUserAsync(string emailAddress)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpToaGetCountryIdsForUser(emailAddress, out procResult));
        }

        public System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress)
        {
            int procResult;
            return SpToaGetSurveyPanelSignupCount(emailAddress, out procResult);
        }

        public System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel>> SpToaGetSurveyPanelSignupCountAsync(string emailAddress)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpToaGetSurveyPanelSignupCount(emailAddress, out procResult));
        }

        public int UpdateUserNewsWithPayout(string emailAddress, System.DateTime? requestDate)
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Affiliate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class Affiliate
    {
        public string AffiliateId { get; set; } // AffiliateID (Primary key) (length: 5)
        public string AffiliateName { get; set; } // AffiliateName (length: 255)
        public string RegisteredEmail { get; set; } // RegisteredEmail (length: 255)
        public string Password { get; set; } // Password (length: 50)
        public string AcceptedTandCDate { get; set; } // AcceptedTandCDate (length: 500)
        public bool PayForScrubs { get; set; } // PayForScrubs

        public Affiliate()
        {
            PayForScrubs = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // AffiliateCountry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AffiliateCountry
    {
        public int AffiliateId { get; set; } // AffiliateID (Primary key)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)

        public AffiliateCountry()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // AffiliateSub
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AffiliateSub
    {
        public string AffiliateId { get; set; } // AffiliateID (Primary key via unique index IX_AffiliateSub) (length: 255)
        public string OfferId { get; set; } // OfferID (length: 50)
        public string SubId { get; set; } // SubID (length: 50)
        public decimal CostPerLead { get; set; } // CostPerLead
        public double ReceiveShareMultiplier { get; set; } // ReceiveShareMultiplier
        public int DailyCap { get; set; } // DailyCap
        public int MonthlyCap { get; set; } // MonthlyCap
        public bool Enabled { get; set; } // Enabled

        public AffiliateSub()
        {
            ReceiveShareMultiplier = 0.5;
            DailyCap = 5000;
            MonthlyCap = 100000;
            Enabled = true;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // allInboxClikBackup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AllInboxClikBackup
    {
        public int PqpId { get; set; } // PqpID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)

        public AllInboxClikBackup()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // AweberDemoUpdate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AweberDemoUpdate
    {
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 500)
        public int Status { get; set; } // Status

        public AweberDemoUpdate()
        {
            Status = 0;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // BatchFileExportLeadsSent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class BatchFileExportLeadsSent
    {
        public string AffiliateId { get; set; } // AffiliateID (Primary key) (length: 5)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public System.DateTime DateExported { get; set; } // DateExported

        public BatchFileExportLeadsSent()
        {
            DateExported = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRConsent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrConsent
    {
        public int CbrConsentId { get; set; } // CBRConsentId (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public System.DateTime DateofConsent { get; set; } // DateofConsent
        public string IpAddress { get; set; } // IpAddress (length: 50)

        public CbrConsent()
        {
            DateofConsent = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBREmailAddressChange
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrEmailAddressChange
    {
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string NewEmailAddress { get; set; } // NewEmailAddress (Primary key) (length: 255)
        public System.DateTime ChangeDate { get; set; } // ChangeDate (Primary key)

        public CbrEmailAddressChange()
        {
            ChangeDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBREmailDailyBatchCounter
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrEmailDailyBatchCounter
    {
        public int LastIdProcessed { get; set; } // LastIDProcessed (Primary key)

        public CbrEmailDailyBatchCounter()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRJobCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrJobCode
    {
        public int CbrJobCodeId { get; set; } // CBRJobCodeID (Primary key)
        public string OccupationCode { get; set; } // OccupationCode (length: 50)
        public int CbrQuestionDropdownId { get; set; } // CBRQuestionDropdownID
        public bool Active { get; set; } // Active

        public CbrJobCode()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRLead
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrLead
    {
        public int CbrLeadId { get; set; } // CBRLeadId (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string Salutation { get; set; } // Salutation (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public bool? SmartPhone { get; set; } // SmartPhone
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string Gender { get; set; } // Gender (length: 1)
        public string Occupation { get; set; } // Occupation (length: 100)
        public string Income { get; set; } // Income (length: 100)
        public string HomeOwnership { get; set; } // HomeOwnership (length: 100)
        public string Education { get; set; } // Education (length: 100)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 100)
        public int? Children { get; set; } // Children
        public string Ethnicity { get; set; } // Ethnicity (length: 50)
        public string Password { get; set; } // Password (length: 50)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public decimal? Cost { get; set; } // Cost
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string SelectedLanguageId { get; set; } // SelectedLanguageID (Primary key) (length: 2)
        public System.DateTime OptInDate { get; set; } // OptInDate (Primary key)
        public System.DateTime LastRunDate { get; set; } // LastRunDate (Primary key)
        public int LastSendOnDay { get; set; } // LastSendOnDay (Primary key)
        public System.DateTime? OptOutDate { get; set; } // OptOutDate
        public bool DoNotSendTo { get; set; } // DoNotSendTo (Primary key)
        public System.DateTime? ConfirmedDate { get; set; } // ConfirmedDate
        public bool ThirdPartyListsUpdated { get; set; } // ThirdPartyListsUpdated (Primary key)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public string Ip { get; set; } // IP (length: 50)
        public string Uid { get; set; } // UID (length: 50)
        public bool? Clik { get; set; } // Clik

        public CbrLead()
        {
            SmartPhone = false;
            Cost = 0m;
            CountryId = "US";
            SelectedLanguageId = "EN";
            OptInDate = System.DateTime.Now;
            LastRunDate = System.DateTime.Now;
            LastSendOnDay = 0;
            DoNotSendTo = false;
            ThirdPartyListsUpdated = false;
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRLeadStageInsert
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrLeadStageInsert
    {
        public int CbrLeadStageInsertId { get; set; } // CBRLeadStageInsertId (Primary key)
        public int CbrLeadId { get; set; } // CbrLeadId
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public string Salutation { get; set; } // Salutation (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public bool? SmartPhone { get; set; } // SmartPhone
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string Gender { get; set; } // Gender (length: 1)
        public string Occupation { get; set; } // Occupation (length: 100)
        public string Income { get; set; } // Income (length: 100)
        public string HomeOwnership { get; set; } // HomeOwnership (length: 100)
        public string Education { get; set; } // Education (length: 100)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 100)
        public int? Children { get; set; } // Children
        public string Ethnicity { get; set; } // Ethnicity (length: 50)
        public string Password { get; set; } // Password (length: 50)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public decimal? Cost { get; set; } // Cost
        public string CountryId { get; set; } // CountryID (length: 2)
        public string SelectedLanguageId { get; set; } // SelectedLanguageID (length: 2)
        public System.DateTime OptInDate { get; set; } // OptInDate
        public System.DateTime LastRunDate { get; set; } // LastRunDate
        public int LastSendOnDay { get; set; } // LastSendOnDay
        public System.DateTime? OptOutDate { get; set; } // OptOutDate
        public bool DoNotSendTo { get; set; } // DoNotSendTo
        public System.DateTime? ConfirmedDate { get; set; } // ConfirmedDate
        public bool ThirdPartyListsUpdated { get; set; } // ThirdPartyListsUpdated
        public System.DateTime InsertDate { get; set; } // InsertDate
        public string Ip { get; set; } // IP (length: 50)
        public string Uid { get; set; } // UID (length: 50)
        public bool? Clik { get; set; } // Clik

        public CbrLeadStageInsert()
        {
            SmartPhone = false;
            Cost = 0m;
            CountryId = "US";
            SelectedLanguageId = "EN";
            OptInDate = System.DateTime.Now;
            LastRunDate = System.DateTime.Now;
            LastSendOnDay = 0;
            DoNotSendTo = false;
            ThirdPartyListsUpdated = false;
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRLeadStageUpdate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrLeadStageUpdate
    {
        public int CbrLeadStageUpdateId { get; set; } // CBRLeadStageUpdateId (Primary key)
        public int CbrLeadId { get; set; } // CbrLeadId
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public string Salutation { get; set; } // Salutation (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public bool? SmartPhone { get; set; } // SmartPhone
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string Gender { get; set; } // Gender (length: 1)
        public string Occupation { get; set; } // Occupation (length: 100)
        public string Income { get; set; } // Income (length: 100)
        public string HomeOwnership { get; set; } // HomeOwnership (length: 100)
        public string Education { get; set; } // Education (length: 100)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 100)
        public int? Children { get; set; } // Children
        public string Ethnicity { get; set; } // Ethnicity (length: 50)
        public string Password { get; set; } // Password (length: 50)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public decimal? Cost { get; set; } // Cost
        public string CountryId { get; set; } // CountryID (length: 2)
        public string SelectedLanguageId { get; set; } // SelectedLanguageID (length: 2)
        public System.DateTime OptInDate { get; set; } // OptInDate
        public System.DateTime LastRunDate { get; set; } // LastRunDate
        public int LastSendOnDay { get; set; } // LastSendOnDay
        public System.DateTime? OptOutDate { get; set; } // OptOutDate
        public bool DoNotSendTo { get; set; } // DoNotSendTo
        public System.DateTime? ConfirmedDate { get; set; } // ConfirmedDate
        public bool ThirdPartyListsUpdated { get; set; } // ThirdPartyListsUpdated
        public System.DateTime InsertDate { get; set; } // InsertDate
        public string Ip { get; set; } // IP (length: 50)
        public string Uid { get; set; } // UID (length: 50)
        public bool? Clik { get; set; } // Clik

        public CbrLeadStageUpdate()
        {
            SmartPhone = false;
            Cost = 0m;
            CountryId = "US";
            SelectedLanguageId = "EN";
            OptInDate = System.DateTime.Now;
            LastRunDate = System.DateTime.Now;
            LastSendOnDay = 0;
            DoNotSendTo = false;
            ThirdPartyListsUpdated = false;
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRPayout
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrPayout
    {
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string PaypalEmailAddress { get; set; } // PaypalEmailAddress (length: 255)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public decimal RequestAmount { get; set; } // RequestAmount (Primary key)

        ///<summary>
        /// 0 = paypal, 1 = giftcard, 2 = denied
        ///</summary>
        public int OptionId { get; set; } // OptionID (Primary key)

        ///<summary>
        /// 0 = paypal, 1 = giftcard, 2 = denied
        ///</summary>
        public int Type { get; set; } // Type (Primary key)
        public System.DateTime RequestForPaymentDate { get; set; } // RequestForPaymentDate (Primary key)
        public System.DateTime? PaidDate { get; set; } // PaidDate
        public string Ip { get; set; } // IP (length: 50)

        public CbrPayout()
        {
            CountryId = "US";
            OptionId = 0;
            Type = 0;
            RequestForPaymentDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRQuestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrQuestion
    {
        public int Id { get; set; } // ID (Primary key)
        public string Question { get; set; } // Question (length: 512)

        ///<summary>
        /// 0 = Y/N      1 = Dropdown
        ///</summary>
        public int Type { get; set; } // Type
        public int ElabsId { get; set; } // ElabsID (Primary key)
        public int JinglioOfferId { get; set; } // JinglioOfferID

        public CbrQuestion()
        {
            Type = 0;
            ElabsId = 0;
            JinglioOfferId = 0;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRQuestionAnswers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrQuestionAnswer
    {
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public int QuestionId { get; set; } // QuestionID (Primary key)
        public string Answer { get; set; } // Answer (length: 255)
        public System.DateTime AnswerDate { get; set; } // AnswerDate

        public CbrQuestionAnswer()
        {
            AnswerDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRQuestionDropdown
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrQuestionDropdown
    {
        public int Id { get; set; } // ID (Primary key)
        public int QuestionId { get; set; } // QuestionID
        public string Answer { get; set; } // Answer (length: 255)
        public int Rank { get; set; } // Rank

        public CbrQuestionDropdown()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSignup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSignup
    {
        public int CbrSignupId { get; set; } // CBRSignupID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public System.DateTime SignupDate { get; set; } // SignupDate
        public string TransactionId { get; set; } // TransactionID (length: 100)

        public CbrSignup()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSignupError
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSignupError
    {
        public int CbrSignupErrorId { get; set; } // CBRSignupErrorID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public System.DateTime SignupDate { get; set; } // SignupDate
        public string TransactionId { get; set; } // TransactionID (length: 100)
        public string ErrorMessage { get; set; } // ErrorMessage (length: 8000)
        public string Url { get; set; } // URL (length: 1000)

        public CbrSignupError()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurvey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurvey
    {
        public int Id { get; set; } // ID (Primary key)
        public string Title { get; set; } // Title (Primary key) (length: 511)
        public string Description { get; set; } // Description (length: 8000)
        public string Requirements { get; set; } // Requirements (length: 1536)
        public string Category { get; set; } // Category (length: 20)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public decimal ClickPayoutValue { get; set; } // ClickPayoutValue (Primary key)
        public decimal ClickReceiveValue { get; set; } // ClickReceiveValue (Primary key)
        public System.Guid ClickCode { get; set; } // ClickCode (Primary key)
        public decimal PayoutValue { get; set; } // PayoutValue (Primary key)
        public decimal ReceiveValue { get; set; } // ReceiveValue (Primary key)
        public int AffiliateCampaignId { get; set; } // AffiliateCampaignID (Primary key)
        public bool Type { get; set; } // Type (Primary key)
        public string Url { get; set; } // URL (Primary key) (length: 255)
        public string ImageUrl { get; set; } // ImageURL (length: 255)
        public int ImageWidth { get; set; } // ImageWidth (Primary key)
        public int ImageHeight { get; set; } // ImageHeight (Primary key)
        public int QuestionCount { get; set; } // QuestionCount (Primary key)
        public string QuestionPageTitle { get; set; } // QuestionPageTitle (length: 255)
        public string QuestionPageHeader { get; set; } // QuestionPageHeader (length: 8000)
        public string QuestionPageFooter { get; set; } // QuestionPageFooter (length: 8000)
        public int DailyCapPerUser { get; set; } // DailyCapPerUser (Primary key)
        public int Rank { get; set; } // Rank (Primary key)
        public bool Hide { get; set; } // Hide (Primary key)
        public bool Enabled { get; set; } // Enabled (Primary key)
        public bool Approved { get; set; } // Approved (Primary key)
        public bool CausesConversion { get; set; } // CausesConversion (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate (Primary key)
        public int DaysPending { get; set; } // DaysPending (Primary key)

        ///<summary>
        /// 2
        ///</summary>
        public int DisplaysForType { get; set; } // DisplaysForType (Primary key)
        public bool IncentFriendly { get; set; } // IncentFriendly (Primary key)

        public CbrSurvey()
        {
            ClickPayoutValue = 0m;
            ClickReceiveValue = 0m;
            ClickCode = System.Guid.NewGuid();
            ImageWidth = 0;
            ImageHeight = 0;
            DailyCapPerUser = 2;
            Rank = 0;
            Hide = false;
            CausesConversion = false;
            CreateDate = System.DateTime.Now;
            DaysPending = 0;
            DisplaysForType = 0;
            IncentFriendly = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyBackup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyBackup
    {
        public int Id { get; set; } // ID (Primary key)
        public string Title { get; set; } // Title (Primary key) (length: 511)
        public string Description { get; set; } // Description (length: 1536)
        public string Requirements { get; set; } // Requirements (length: 1536)
        public string Category { get; set; } // Category (length: 20)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public decimal ClickPayoutValue { get; set; } // ClickPayoutValue (Primary key)
        public decimal ClickReceiveValue { get; set; } // ClickReceiveValue (Primary key)
        public System.Guid ClickCode { get; set; } // ClickCode (Primary key)
        public decimal PayoutValue { get; set; } // PayoutValue (Primary key)
        public decimal ReceiveValue { get; set; } // ReceiveValue (Primary key)
        public int AffiliateCampaignId { get; set; } // AffiliateCampaignID (Primary key)
        public bool Type { get; set; } // Type (Primary key)
        public string Url { get; set; } // URL (Primary key) (length: 255)
        public string ImageUrl { get; set; } // ImageURL (length: 255)
        public int ImageWidth { get; set; } // ImageWidth (Primary key)
        public int ImageHeight { get; set; } // ImageHeight (Primary key)
        public int QuestionCount { get; set; } // QuestionCount (Primary key)
        public string QuestionPageTitle { get; set; } // QuestionPageTitle (length: 255)
        public string QuestionPageHeader { get; set; } // QuestionPageHeader (length: 8000)
        public string QuestionPageFooter { get; set; } // QuestionPageFooter (length: 8000)
        public int DailyCapPerUser { get; set; } // DailyCapPerUser (Primary key)
        public int Rank { get; set; } // Rank (Primary key)
        public bool Hide { get; set; } // Hide (Primary key)
        public bool Enabled { get; set; } // Enabled (Primary key)
        public bool Approved { get; set; } // Approved (Primary key)
        public bool CausesConversion { get; set; } // CausesConversion (Primary key)
        public System.DateTime CreateDate { get; set; } // CreateDate (Primary key)

        public CbrSurveyBackup()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyInstruction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyInstruction
    {
        public int CbrSurveyInstructionId { get; set; } // CBRSurveyInstructionID (Primary key)
        public int SurveyId { get; set; } // SurveyID
        public string AboutText { get; set; } // AboutText (length: 500)
        public string AboutSubheading { get; set; } // AboutSubheading (length: 2000)
        public bool Active { get; set; } // Active
        public bool CreditCardRequired { get; set; } // CreditCardRequired
        public bool HasInterstitial { get; set; } // HasInterstitial
        public string InterstitialText { get; set; } // InterstitialText (length: 2000)
        public System.DateTime? LastUpdated { get; set; } // LastUpdated

        // Reverse navigation

        /// <summary>
        /// Child InstructionBullets where [InstructionBullet].[InstructionID] point to this entity (FK_InstructionBullet_CBRSurveyInstruction)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<InstructionBullet> InstructionBullets { get; set; } // InstructionBullet.FK_InstructionBullet_CBRSurveyInstruction

        public CbrSurveyInstruction()
        {
            InstructionBullets = new System.Collections.Generic.List<InstructionBullet>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyQuestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyQuestion
    {
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public int QuestionId { get; set; } // QuestionID (Primary key)
        public int Rank { get; set; } // Rank
        public bool DisplayToUser { get; set; } // DisplayToUser

        public CbrSurveyQuestion()
        {
            Rank = 0;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatu
    {
        public int Id { get; set; } // ID (Primary key)

        ///<summary>
        /// Pending, Completed, Request for Payment Received, Payment Sent
        ///</summary>
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public decimal PayoutValue { get; set; } // PayoutValue
        public decimal ReceiveValue { get; set; } // ReceiveValue

        ///<summary>
        /// 0 = incomplete, 1 = complete, 2 = click credit
        ///</summary>
        public int StatusId { get; set; } // StatusID
        public string DtCookieId { get; set; } // DTCookieID (length: 32)
        public int? RandomId { get; set; } // RandomID
        public string AffCookieId { get; set; } // AffCookieID (length: 50)
        public System.DateTime InsertDate { get; set; } // InsertDate
        public System.DateTime? CompletedDate { get; set; } // CompletedDate
        public System.DateTime? DeniedDate { get; set; } // DeniedDate

        public CbrSurveyStatu()
        {
            ReceiveValue = 0m;
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // cbrSurveyStatusOutput
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatusOutput
    {
        public int Id { get; set; } // ID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public decimal PayoutValue { get; set; } // PayoutValue (Primary key)
        public decimal ReceiveValue { get; set; } // ReceiveValue (Primary key)
        public int StatusId { get; set; } // StatusID (Primary key)
        public string DtCookieId { get; set; } // DTCookieID (length: 32)
        public int? RandomId { get; set; } // RandomID
        public string AffCookieId { get; set; } // AffCookieID (length: 50)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public System.DateTime? CompletedDate { get; set; } // CompletedDate
        public System.DateTime? DeniedDate { get; set; } // DeniedDate

        public CbrSurveyStatusOutput()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatusType
    {
        public int Id { get; set; } // ID (Primary key)
        public string Description { get; set; } // Description (Primary key) (length: 50)

        public CbrSurveyStatusType()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyStatusWithBadEmail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatusWithBadEmail
    {
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string GoodEm { get; set; } // goodEM (length: 255)
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public decimal PayoutValue { get; set; } // PayoutValue (Primary key)

        public CbrSurveyStatusWithBadEmail()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyStatusWithDupPay
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatusWithDupPay
    {
        public int Id { get; set; } // ID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public decimal PayoutValue { get; set; } // PayoutValue (Primary key)
        public decimal ReceiveValue { get; set; } // ReceiveValue (Primary key)
        public int StatusId { get; set; } // StatusID (Primary key)
        public string DtCookieId { get; set; } // DTCookieID (length: 32)
        public int? RandomId { get; set; } // RandomID
        public string AffCookieId { get; set; } // AffCookieID (length: 50)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public System.DateTime? CompletedDate { get; set; } // CompletedDate
        public System.DateTime? DeniedDate { get; set; } // DeniedDate

        public CbrSurveyStatusWithDupPay()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyTarget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyTarget
    {
        public int Id { get; set; } // ID (Primary key)
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public int QuestionId { get; set; } // QuestionID (Primary key)
        public string Operator { get; set; } // Operator (length: 2)
        public string Value { get; set; } // Value (length: 255)
        public bool RequiredForInclusion { get; set; } // RequiredForInclusion

        public CbrSurveyTarget()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRSurveyWithdraw
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyWithdraw
    {
        public int CbrSurveyWithdrawId { get; set; } // CBRSurveyWithdrawID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 250)
        public int SurveyId { get; set; } // SurveyID
        public int AffiliateCampaignId { get; set; } // AffiliateCampaignID
        public System.DateTime WithdrawDate { get; set; } // WithdrawDate
        public int WithdrawReasonId { get; set; } // WithdrawReasonID

        // Foreign keys

        /// <summary>
        /// Parent WithdrawReason pointed by [CBRSurveyWithdraw].([WithdrawReasonId]) (FK_CBRSurveyWithdraw_WithdrawReason)
        /// </summary>
        public virtual WithdrawReason WithdrawReason { get; set; } // FK_CBRSurveyWithdraw_WithdrawReason

        public CbrSurveyWithdraw()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRVerification
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrVerification
    {
        public int CbrVerificationId { get; set; } // CbrVerificationID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public System.Guid Id { get; set; } // Id
        public System.DateTime InsertDate { get; set; } // InsertDate

        public CbrVerification()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CBRZipVerified
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrZipVerified
    {
        public int CbrZipVerifiedId { get; set; } // CBRZipVerifiedId (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public string ValidIpAddress { get; set; } // ValidIpAddress (length: 15)
        public string ValidZip { get; set; } // ValidZip (length: 100)
        public System.DateTime InsertDate { get; set; } // InsertDate

        public CbrZipVerified()
        {
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Coreg
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class Coreg
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Url { get; set; } // URL (length: 255)
        public int Cap { get; set; } // Cap

        public Coreg()
        {
            Cap = 0;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CoregCampaign
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregCampaign
    {
        public int CoregCampaignId { get; set; } // CoregCampaignId (Primary key)
        public string Name { get; set; } // Name (length: 255)
        public int CoregPartnerId { get; set; } // CoregPartnerId
        public bool Active { get; set; } // Active

        // Reverse navigation

        /// <summary>
        /// Child CoregLeadAccepteds where [CoregLeadAccepted].[CoregCampaignId] point to this entity (FK_CoregLeadAccepted_CoregCampaign)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CoregLeadAccepted> CoregLeadAccepteds { get; set; } // CoregLeadAccepted.FK_CoregLeadAccepted_CoregCampaign

        // Foreign keys

        /// <summary>
        /// Parent CoregPartner pointed by [CoregCampaign].([CoregPartnerId]) (FK_CoregCampaign_CoregPartner)
        /// </summary>
        public virtual CoregPartner CoregPartner { get; set; } // FK_CoregCampaign_CoregPartner

        public CoregCampaign()
        {
            CoregLeadAccepteds = new System.Collections.Generic.List<CoregLeadAccepted>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CoregError
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregError
    {
        public int CoregErrorId { get; set; } // CoregErrorID (Primary key)
        public string Partner { get; set; } // Partner (length: 50)
        public string Url { get; set; } // Url (length: 8000)
        public string PostData { get; set; } // PostData (length: 8000)
        public string Response { get; set; } // Response (length: 8000)
        public System.DateTime DateInserted { get; set; } // DateInserted

        public CoregError()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CoregLeadAccepted
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregLeadAccepted
    {
        public int CoregLeadAcceptedId { get; set; } // CoregLeadAcceptedId (Primary key)
        public int CbrLeadId { get; set; } // CBRLeadId
        public int CoregPartnerId { get; set; } // CoregPartnerId
        public int CoregCampaignId { get; set; } // CoregCampaignId
        public System.DateTime DateSubmitted { get; set; } // DateSubmitted

        // Foreign keys

        /// <summary>
        /// Parent CoregCampaign pointed by [CoregLeadAccepted].([CoregCampaignId]) (FK_CoregLeadAccepted_CoregCampaign)
        /// </summary>
        public virtual CoregCampaign CoregCampaign { get; set; } // FK_CoregLeadAccepted_CoregCampaign

        /// <summary>
        /// Parent CoregPartner pointed by [CoregLeadAccepted].([CoregPartnerId]) (FK_CoregLeadAccepted_CoregPartner)
        /// </summary>
        public virtual CoregPartner CoregPartner { get; set; } // FK_CoregLeadAccepted_CoregPartner

        public CoregLeadAccepted()
        {
            DateSubmitted = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CoregPartner
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregPartner
    {
        public int CoregPartnerId { get; set; } // CoregPartnerId (Primary key)
        public string Name { get; set; } // Name (length: 100)
        public bool Active { get; set; } // Active
        public System.DateTime InsertDate { get; set; } // InsertDate

        // Reverse navigation

        /// <summary>
        /// Child CoregCampaigns where [CoregCampaign].[CoregPartnerId] point to this entity (FK_CoregCampaign_CoregPartner)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CoregCampaign> CoregCampaigns { get; set; } // CoregCampaign.FK_CoregCampaign_CoregPartner
        /// <summary>
        /// Child CoregLeadAccepteds where [CoregLeadAccepted].[CoregPartnerId] point to this entity (FK_CoregLeadAccepted_CoregPartner)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CoregLeadAccepted> CoregLeadAccepteds { get; set; } // CoregLeadAccepted.FK_CoregLeadAccepted_CoregPartner

        public CoregPartner()
        {
            InsertDate = System.DateTime.Now;
            CoregCampaigns = new System.Collections.Generic.List<CoregCampaign>();
            CoregLeadAccepteds = new System.Collections.Generic.List<CoregLeadAccepted>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Country
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class Country
    {
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string CountryName { get; set; } // CountryName (Primary key) (length: 255)

        public Country()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CountryLanguageDefault
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CountryLanguageDefault
    {
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string LanguageId { get; set; } // LanguageID (Primary key) (length: 2)

        public CountryLanguageDefault()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CPANotification
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CpaNotification
    {
        public int CpaNotificationId { get; set; } // CPANotificationId (Primary key)
        public int CpaNotificationTypeId { get; set; } // CPANotificationTypeId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public bool Sent { get; set; } // Sent
        public System.DateTime? SentDate { get; set; } // SentDate
        public string Subject { get; set; } // Subject (length: 250)
        public string Body { get; set; } // Body (length: 2000)
        public string AffiliateId { get; set; } // AffiliateId (length: 50)
        public string OfferId { get; set; } // OfferId (length: 50)
        public string SubId { get; set; } // SubId (length: 50)
        public int CpaNotificationJobId { get; set; } // CPANotificationJobId

        // Foreign keys

        /// <summary>
        /// Parent CpaNotificationJob pointed by [CPANotification].([CpaNotificationJobId]) (FK_CPANotification_CPANotificationJob)
        /// </summary>
        public virtual CpaNotificationJob CpaNotificationJob { get; set; } // FK_CPANotification_CPANotificationJob

        /// <summary>
        /// Parent CpaNotificationType pointed by [CPANotification].([CpaNotificationTypeId]) (FK_CPANotification_CPANotificationType)
        /// </summary>
        public virtual CpaNotificationType CpaNotificationType { get; set; } // FK_CPANotification_CPANotificationType

        public CpaNotification()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CPANotificationJob
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CpaNotificationJob
    {
        public int CpaNotificationJobId { get; set; } // CPANotificationJobId (Primary key)
        public int CpaNotificationTypeId { get; set; } // CPANotificationTypeId
        public System.DateTime TimeStarted { get; set; } // TimeStarted
        public System.DateTime? TimeComplete { get; set; } // TimeComplete

        // Reverse navigation

        /// <summary>
        /// Child CpaNotifications where [CPANotification].[CPANotificationJobId] point to this entity (FK_CPANotification_CPANotificationJob)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CpaNotification> CpaNotifications { get; set; } // CPANotification.FK_CPANotification_CPANotificationJob

        // Foreign keys

        /// <summary>
        /// Parent CpaNotificationType pointed by [CPANotificationJob].([CpaNotificationTypeId]) (FK_CPANotificationJob_CPANotificationType)
        /// </summary>
        public virtual CpaNotificationType CpaNotificationType { get; set; } // FK_CPANotificationJob_CPANotificationType

        public CpaNotificationJob()
        {
            CpaNotifications = new System.Collections.Generic.List<CpaNotification>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CPANotificationNewSub
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CpaNotificationNewSub
    {
        public int CpaNotificationNewSubId { get; set; } // CPANotificationNewSubId (Primary key)
        public string AffiliateId { get; set; } // AffiliateId (length: 255)
        public string OfferId { get; set; } // OfferId (length: 100)
        public string SubId { get; set; } // SubId (length: 255)
        public bool IsEstablished { get; set; } // IsEstablished
        public System.DateTime DateCreated { get; set; } // DateCreated
        public int LastRoiCheckpoint { get; set; } // LastROICheckpoint

        public CpaNotificationNewSub()
        {
            LastRoiCheckpoint = 0;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CPANotificationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CpaNotificationType
    {
        public int CpaNotificationTypeId { get; set; } // CPANotificationTypeId (Primary key)
        public string Description { get; set; } // Description (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child CpaNotifications where [CPANotification].[CPANotificationTypeId] point to this entity (FK_CPANotification_CPANotificationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CpaNotification> CpaNotifications { get; set; } // CPANotification.FK_CPANotification_CPANotificationType
        /// <summary>
        /// Child CpaNotificationJobs where [CPANotificationJob].[CPANotificationTypeId] point to this entity (FK_CPANotificationJob_CPANotificationType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CpaNotificationJob> CpaNotificationJobs { get; set; } // CPANotificationJob.FK_CPANotificationJob_CPANotificationType

        public CpaNotificationType()
        {
            CpaNotifications = new System.Collections.Generic.List<CpaNotification>();
            CpaNotificationJobs = new System.Collections.Generic.List<CpaNotificationJob>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // DashboardOverlay
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DashboardOverlay
    {
        public int DashboardOverlayId { get; set; } // DashboardOverlayID (Primary key)
        public string Description { get; set; } // Description (length: 1000)
        public System.DateTime Startdate { get; set; } // Startdate
        public System.DateTime Enddate { get; set; } // Enddate
        public System.DateTime StartDateTime { get; set; } // StartDateTime
        public System.DateTime EndDateTime { get; set; } // EndDateTime
        public bool Active { get; set; } // Active
        public string Html { get; set; } // Html (length: 8000)
        public System.DateTime? InsertDate { get; set; } // InsertDate

        // Reverse navigation

        /// <summary>
        /// Child DashboardOverlayEmails where [DashboardOverlayEmail].[DashboardOverlayID] point to this entity (FK_DashboardOverlayEmail_DashboardOverlayEmail)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<DashboardOverlayEmail> DashboardOverlayEmails { get; set; } // DashboardOverlayEmail.FK_DashboardOverlayEmail_DashboardOverlayEmail

        public DashboardOverlay()
        {
            DashboardOverlayEmails = new System.Collections.Generic.List<DashboardOverlayEmail>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // DashboardOverlayEmail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DashboardOverlayEmail
    {
        public int DashboardOverlayEmailId { get; set; } // DashboardOverlayEmailID (Primary key)
        public int DashboardOverlayId { get; set; } // DashboardOverlayID
        public string EmailAddress { get; set; } // EmailAddress (length: 250)
        public bool? Accept { get; set; } // Accept
        public bool? Cancel { get; set; } // Cancel
        public bool? Other { get; set; } // Other
        public bool? Resolved { get; set; } // Resolved
        public System.DateTime? ResolvedDate { get; set; } // ResolvedDate
        public System.DateTime? ViewedDate { get; set; } // ViewedDate

        // Foreign keys

        /// <summary>
        /// Parent DashboardOverlay pointed by [DashboardOverlayEmail].([DashboardOverlayId]) (FK_DashboardOverlayEmail_DashboardOverlayEmail)
        /// </summary>
        public virtual DashboardOverlay DashboardOverlay { get; set; } // FK_DashboardOverlayEmail_DashboardOverlayEmail

        public DashboardOverlayEmail()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // The table 'DebugTrans' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // DebugTrans
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DebugTran
    {
        public System.Guid? Id { get; set; } // ID

        public DebugTran()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // DoiRotatingOffer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DoiRotatingOffer
    {
        public int DoiRotatingOfferId { get; set; } // DoiRotatingOfferID (Primary key)
        public int SmartEmailLinkConfigId { get; set; } // SmartEmailLinkConfigID
        public bool Enabled { get; set; } // Enabled
        public int Count { get; set; } // Count
        public string Name { get; set; } // Name (length: 50)

        public DoiRotatingOffer()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EducationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class EducationCode
    {
        public int EducationCodeId { get; set; } // EducationCodeID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public bool Active { get; set; } // Active

        public EducationCode()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // The table 'FixSurvey1462' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // FixSurvey1462
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class FixSurvey1462
    {
        public string Email { get; set; } // email (length: 250)

        public FixSurvey1462()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // GeoLiteCity-Blocks
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GeoLiteCityBlock
    {
        public decimal StartIpNum { get; set; } // startIpNum (Primary key)
        public decimal EndIpNum { get; set; } // endIpNum (Primary key)
        public decimal LocId { get; set; } // locId (Primary key)

        public GeoLiteCityBlock()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // GeoLiteCity-Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GeoLiteCityLocation
    {
        public decimal LocId { get; set; } // locId (Primary key)
        public string Country { get; set; } // country (length: 50)
        public string Region { get; set; } // region (length: 50)
        public string City { get; set; } // city (length: 50)
        public string PostalCode { get; set; } // postalCode (length: 50)
        public string Latitude { get; set; } // latitude (length: 50)
        public string Longitude { get; set; } // longitude (length: 50)
        public string MetroCode { get; set; } // metroCode (length: 50)
        public string AreaCode { get; set; } // areaCode (length: 50)

        public GeoLiteCityLocation()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // InstructionBullet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class InstructionBullet
    {
        public int InstructionBulletId { get; set; } // InstructionBulletID (Primary key)
        public int InstructionId { get; set; } // InstructionID
        public string Text { get; set; } // Text (length: 2000)
        public int Sequence { get; set; } // Sequence
        public int BulletType { get; set; } // BulletType
        public bool Active { get; set; } // Active

        // Foreign keys

        /// <summary>
        /// Parent CbrSurveyInstruction pointed by [InstructionBullet].([InstructionId]) (FK_InstructionBullet_CBRSurveyInstruction)
        /// </summary>
        public virtual CbrSurveyInstruction CbrSurveyInstruction { get; set; } // FK_InstructionBullet_CBRSurveyInstruction

        public InstructionBullet()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // IPCountry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpCountry
    {
        public string StartIp { get; set; } // StartIP (Primary key) (length: 15)
        public string EndIp { get; set; } // EndIP (Primary key) (length: 15)
        public long StartNum { get; set; } // StartNum (Primary key)
        public long EndNum { get; set; } // EndNum (Primary key)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string CountryName { get; set; } // CountryName (Primary key) (length: 255)

        public IpCountry()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // IPCountryOld
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpCountryOld
    {
        public string StartIp { get; set; } // StartIP (Primary key) (length: 15)
        public string EndIp { get; set; } // EndIP (Primary key) (length: 15)
        public long StartNum { get; set; } // StartNum (Primary key)
        public long EndNum { get; set; } // EndNum (Primary key)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string CountryName { get; set; } // CountryName (Primary key) (length: 255)

        public IpCountryOld()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // IPCountyBackup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpCountyBackup
    {
        public string StartIp { get; set; } // StartIP (Primary key) (length: 15)
        public string EndIp { get; set; } // EndIP (Primary key) (length: 15)
        public long StartNum { get; set; } // StartNum (Primary key)
        public long EndNum { get; set; } // EndNum (Primary key)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string CountryName { get; set; } // CountryName (Primary key) (length: 255)

        public IpCountyBackup()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // IPCountyNewBackup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpCountyNewBackup
    {
        public string StartIp { get; set; } // StartIP (Primary key) (length: 15)
        public string EndIp { get; set; } // EndIP (Primary key) (length: 15)
        public long StartNum { get; set; } // StartNum (Primary key)
        public long EndNum { get; set; } // EndNum (Primary key)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string CountryName { get; set; } // CountryName (Primary key) (length: 255)

        public IpCountyNewBackup()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // IpLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpLog
    {
        public int IpLogId { get; set; } // IpLogID (Primary key)
        public string IpAddress { get; set; } // IpAddress (length: 50)
        public string CountryId { get; set; } // CountryID (length: 50)
        public System.DateTime InsertDate { get; set; } // InsertDate

        public IpLog()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // JobData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class JobData
    {
        public int JobDataId { get; set; } // JobDataID (Primary key)
        public string St { get; set; } // ST (length: 2)
        public string State { get; set; } // STATE (length: 50)
        public string OccCode { get; set; } // OCC_CODE (length: 10)
        public string OccTitle { get; set; } // OCC_TITLE (length: 255)
        public double? AMean { get; set; } // A_MEAN
        public double? AMedian { get; set; } // A_MEDIAN

        public JobData()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Language
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class Language
    {
        public string LanguageId { get; set; } // LanguageID (Primary key) (length: 2)
        public string Name { get; set; } // Name (Primary key) (length: 255)

        public Language()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // LeadReversal
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class LeadReversal
    {
        public int AutoId { get; set; } // AutoID (Primary key)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string OfferId { get; set; } // OfferID (length: 50)
        public string SubId { get; set; } // SubID (length: 50)
        public decimal CostPerLead { get; set; } // CostPerLead
        public int NumberOfLeads { get; set; } // NumberOfLeads
        public string Comment { get; set; } // Comment (length: 255)
        public System.DateTime EffectiveDate { get; set; } // EffectiveDate
        public System.DateTime InsertDate { get; set; } // InsertDate

        public LeadReversal()
        {
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // LoggedInFromClik
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class LoggedInFromClik
    {
        public int LoggedInFromClikId { get; set; } // LoggedInFromClikID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 250)
        public System.DateTime InsertDate { get; set; } // InsertDate

        public LoggedInFromClik()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // MobilelLead
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class MobilelLead
    {
        public int MobileLeadId { get; set; } // MobileLeadId (Primary key)
        public int? RouterContactId { get; set; } // RouterContactID
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public System.Guid UserId { get; set; } // UserId
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public System.DateTime? Dob { get; set; } // Dob
        public string Gender { get; set; } // Gender (length: 1)
        public string CountryId { get; set; } // CountryID (length: 2)
        public string Ip { get; set; } // IP (length: 15)
        public System.DateTime InsertDate { get; set; } // InsertDate

        // Foreign keys

        /// <summary>
        /// Parent RouterContact pointed by [MobilelLead].([RouterContactId]) (FK_MobilelLead_RouterContact)
        /// </summary>
        public virtual RouterContact RouterContact { get; set; } // FK_MobilelLead_RouterContact

        public MobilelLead()
        {
            UserId = System.Guid.NewGuid();
            CountryId = "US";
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Occupation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class Occupation
    {
        public int OccupationId { get; set; } // OccupationID (Primary key)
        public string Title { get; set; } // Title (length: 250)
        public string OccupationCode { get; set; } // OccupationCode (length: 50)
        public int? OccupationSectorId { get; set; } // OccupationSectorID

        public Occupation()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OccupationEducation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OccupationEducation
    {
        public int OccupationEducationId { get; set; } // OccupationEducationID (Primary key)
        public string Title { get; set; } // Title (length: 250)
        public string OccupationCode { get; set; } // OccupationCode (length: 50)
        public string Education { get; set; } // Education (length: 50)
        public int? EducationCodeId { get; set; } // EducationCodeID

        public OccupationEducation()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OccupationIncome
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OccupationIncome
    {
        public int OccupationIncome_ { get; set; } // OccupationIncome (Primary key)
        public string St { get; set; } // ST (length: 2)
        public string State { get; set; } // STATE (length: 50)
        public string OccCode { get; set; } // OCC_CODE (length: 10)
        public string OccTitle { get; set; } // OCC_TITLE (length: 255)
        public double? AMean { get; set; } // A_MEAN
        public double? AMedian { get; set; } // A_MEDIAN

        public OccupationIncome()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OccupationSector
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OccupationSector
    {
        public int OccupationSectorId { get; set; } // OccupationSectorID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public bool Active { get; set; } // Active

        public OccupationSector()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Offer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class Offer
    {
        public string OfferId { get; set; } // OfferID (Primary key) (length: 100)
        public string Abbreviation { get; set; } // Abbreviation (length: 10)
        public string Name { get; set; } // Name (length: 50)
        public string CountryId { get; set; } // CountryID (length: 2)
        public string LanguageId { get; set; } // LanguageID (length: 2)
        public string Type { get; set; } // Type (Primary key) (length: 50)

        public Offer()
        {
            LanguageId = "EN";
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OptInEmailLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInEmailLog
    {
        public int EmailId { get; set; } // EmailID (Primary key)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string LanguageId { get; set; } // LanguageID (Primary key) (length: 2)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public int SendOnDay { get; set; } // SendOnDay (Primary key)
        public System.DateTime DateSent { get; set; } // DateSent (Primary key)

        public OptInEmailLog()
        {
            DateSent = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OptInEmailVerbage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInEmailVerbage
    {
        public int EmailId { get; set; } // EmailID (Primary key)
        public string LanguageId { get; set; } // LanguageID (Primary key) (length: 2)
        public string OfferId { get; set; } // OfferID (Primary key) (length: 50)
        public string FromName { get; set; } // FromName (length: 50)
        public string FromAddress { get; set; } // FromAddress (length: 50)
        public string Subject { get; set; } // Subject (length: 255)
        public string Body { get; set; } // Body (length: 8000)
        public string HtmlBody { get; set; } // HTMLBody (length: 8000)
        public int SendOnDay { get; set; } // SendOnDay
        public bool Enabled { get; set; } // Enabled

        public OptInEmailVerbage()
        {
            FromName = "SurveyPro";
            FromAddress = "surveypro@thesurveypro.com";
            SendOnDay = 0;
            Enabled = true;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OptInEmailVerbageListrakQueue
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInEmailVerbageListrakQueue
    {
        public int OfferId { get; set; } // OfferID (Primary key)
        public int SendOnDay { get; set; } // SendOnDay (Primary key)

        public OptInEmailVerbageListrakQueue()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OptInEmailVerbageTestSend
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInEmailVerbageTestSend
    {
        public int EmailId { get; set; } // EmailID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string OfferId { get; set; } // OfferID (Primary key) (length: 50)
        public string SubId { get; set; } // SubID (Primary key) (length: 50)
        public string AffiliateId { get; set; } // AffiliateID (Primary key) (length: 50)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public string Ip { get; set; } // IP (Primary key) (length: 50)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)

        public OptInEmailVerbageTestSend()
        {
            SubId = "1";
            AffiliateId = "1";
            Name = "Michael";
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OptInLead
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInLead
    {
        public int SiteVertical { get; set; } // SiteVertical
        public string EmailAddress { get; set; } // EmailAddress (Primary key via unique index idxEmailAddressOfferID) (length: 255)
        public string Salutation { get; set; } // Salutation (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public bool? SmartPhone { get; set; } // SmartPhone
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string Gender { get; set; } // Gender (length: 1)
        public string Occupation { get; set; } // Occupation (length: 100)
        public string Income { get; set; } // Income (length: 100)
        public string HomeOwnership { get; set; } // HomeOwnership (length: 100)
        public string Education { get; set; } // Education (length: 100)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 100)
        public int? Children { get; set; } // Children
        public string Ethnicity { get; set; } // Ethnicity (length: 50)
        public string Password { get; set; } // Password (length: 50)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public decimal? Cost { get; set; } // Cost
        public string CountryId { get; set; } // CountryID (length: 2)
        public string SelectedLanguageId { get; set; } // SelectedLanguageID (length: 2)
        public System.DateTime OptInDate { get; set; } // OptInDate
        public System.DateTime LastRunDate { get; set; } // LastRunDate
        public int LastSendOnDay { get; set; } // LastSendOnDay
        public System.DateTime? OptOutDate { get; set; } // OptOutDate
        public bool DoNotSendTo { get; set; } // DoNotSendTo
        public System.DateTime? ConfirmedDate { get; set; } // ConfirmedDate
        public bool ThirdPartyListsUpdated { get; set; } // ThirdPartyListsUpdated
        public System.DateTime InsertDate { get; set; } // InsertDate
        public string Ip { get; set; } // IP (length: 50)
        public string Uid { get; set; } // UID (length: 50)
        public bool? Clik { get; set; } // Clik

        public OptInLead()
        {
            SiteVertical = 0;
            SmartPhone = false;
            Cost = 0m;
            CountryId = "US";
            SelectedLanguageId = "EN";
            OptInDate = System.DateTime.Now;
            LastRunDate = System.DateTime.Now;
            LastSendOnDay = 0;
            DoNotSendTo = false;
            ThirdPartyListsUpdated = false;
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PostQueue
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class PostQueue
    {
        public int Id { get; set; } // ID (Primary key)
        public int CoregId { get; set; } // CoregID
        public string Name { get; set; } // Name (length: 50)
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public string Method { get; set; } // Method (length: 4)
        public string PostUrl { get; set; } // PostURL (length: 500)
        public string PostData { get; set; } // PostData
        public string OkValue { get; set; } // OKValue (length: 50)
        public string IgnoreValues { get; set; } // IgnoreValues (length: 500)

        ///<summary>
        /// 0 - Needs processing, 1 - Success, 2 - Ignored error, 3 - Unknown Error
        ///</summary>
        public string Status { get; set; } // Status (length: 50)
        public string ReturnString { get; set; } // ReturnString
        public System.DateTime? ProcessedDate { get; set; } // ProcessedDate
        public System.DateTime InsertDate { get; set; } // InsertDate

        public PostQueue()
        {
            CoregId = 0;
            Method = "POST";
            Status = "0";
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProcessedSurveyIDs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ProcessedSurveyId
    {
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public int OldId { get; set; } // OldID (Primary key)

        public ProcessedSurveyId()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Referral
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class Referral
    {
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public string ReferredEmailAddress { get; set; } // ReferredEmailAddress (Primary key) (length: 255)
        public string OfferId { get; set; } // OfferID (Primary key) (length: 100)
        public string EmailMessage { get; set; } // EmailMessage (length: 255)
        public System.DateTime? ReferralConversionDate { get; set; } // ReferralConversionDate
        public System.DateTime ReferralDate { get; set; } // ReferralDate

        public Referral()
        {
            ReferralDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ReUploadElabs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ReUploadElab
    {
        public System.DateTime LastProcessedDate { get; set; } // LastProcessedDate (Primary key)

        public ReUploadElab()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterAction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterAction
    {
        public int RouterActionId { get; set; } // RouterActionId (Primary key)
        public int RouterContactId { get; set; } // RouterContactId
        public int RouterHostId { get; set; } // RouterHostId
        public int? RouterSurveyYourSurveyId { get; set; } // RouterSurveyYourSurveyId
        public int? RouterSurveyPrecisionSampleId { get; set; } // RouterSurveyPrecisionSampleId
        public string Ip { get; set; } // IP (length: 50)
        public System.Guid TransactionId { get; set; } // TransactionId
        public System.DateTime InsertDate { get; set; } // InsertDate
        public string PostedUrl { get; set; } // PostedUrl (length: 500)

        // Foreign keys

        /// <summary>
        /// Parent RouterContact pointed by [RouterAction].([RouterContactId]) (FK_RouterAction_RouterContact)
        /// </summary>
        public virtual RouterContact RouterContact { get; set; } // FK_RouterAction_RouterContact

        /// <summary>
        /// Parent RouterHost pointed by [RouterAction].([RouterHostId]) (FK_RouterAction_RouterHost)
        /// </summary>
        public virtual RouterHost RouterHost { get; set; } // FK_RouterAction_RouterHost

        /// <summary>
        /// Parent RouterSurveyPrecisionSample pointed by [RouterAction].([RouterSurveyPrecisionSampleId]) (FK_RouterAction_RouterSurveyPrecisionSample)
        /// </summary>
        public virtual RouterSurveyPrecisionSample RouterSurveyPrecisionSample { get; set; } // FK_RouterAction_RouterSurveyPrecisionSample

        /// <summary>
        /// Parent RouterSurveyYourSurvey pointed by [RouterAction].([RouterSurveyYourSurveyId]) (FK_RouterAction_RouterSurveyYourSurvey)
        /// </summary>
        public virtual RouterSurveyYourSurvey RouterSurveyYourSurvey { get; set; } // FK_RouterAction_RouterSurveyYourSurvey

        public RouterAction()
        {
            TransactionId = System.Guid.NewGuid();
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterContact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterContact
    {
        public int RouterContactId { get; set; } // RouterContactId (Primary key)
        public string Email { get; set; } // Email (length: 250)
        public System.Guid UniqueId { get; set; } // UniqueId
        public System.DateTime InsertDate { get; set; } // InsertDate
        public System.DateTime? DailySurveyEmailSentDate { get; set; } // DailySurveyEmailSentDate
        public bool? Removed { get; set; } // Removed
        public bool? ErrorOut { get; set; } // ErrorOut

        // Reverse navigation

        /// <summary>
        /// Child MobilelLeads where [MobilelLead].[RouterContactID] point to this entity (FK_MobilelLead_RouterContact)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<MobilelLead> MobilelLeads { get; set; } // MobilelLead.FK_MobilelLead_RouterContact
        /// <summary>
        /// Child RouterActions where [RouterAction].[RouterContactId] point to this entity (FK_RouterAction_RouterContact)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RouterAction> RouterActions { get; set; } // RouterAction.FK_RouterAction_RouterContact
        /// <summary>
        /// Child RouterContactPrecisionSamples where [RouterContactPrecisionSample].[RouterContactId] point to this entity (FK_RouterContactPrecisionSample_RouterContact)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RouterContactPrecisionSample> RouterContactPrecisionSamples { get; set; } // RouterContactPrecisionSample.FK_RouterContactPrecisionSample_RouterContact

        public RouterContact()
        {
            UniqueId = System.Guid.NewGuid();
            InsertDate = System.DateTime.Now;
            RouterActions = new System.Collections.Generic.List<RouterAction>();
            MobilelLeads = new System.Collections.Generic.List<MobilelLead>();
            RouterContactPrecisionSamples = new System.Collections.Generic.List<RouterContactPrecisionSample>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterContactPrecisionSample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterContactPrecisionSample
    {
        public int RouterContactPrecisionSampleId { get; set; } // RouterContactPrecisionSampleId (Primary key)
        public int RouterContactId { get; set; } // RouterContactId
        public System.Guid UserGuid { get; set; } // UserGuid

        // Foreign keys

        /// <summary>
        /// Parent RouterContact pointed by [RouterContactPrecisionSample].([RouterContactId]) (FK_RouterContactPrecisionSample_RouterContact)
        /// </summary>
        public virtual RouterContact RouterContact { get; set; } // FK_RouterContactPrecisionSample_RouterContact

        public RouterContactPrecisionSample()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterHost
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterHost
    {
        public int RouterHostId { get; set; } // RouterHostId (Primary key)
        public string Name { get; set; } // Name (length: 250)
        public bool Enabled { get; set; } // Enabled

        // Reverse navigation

        /// <summary>
        /// Child RouterActions where [RouterAction].[RouterHostId] point to this entity (FK_RouterAction_RouterHost)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RouterAction> RouterActions { get; set; } // RouterAction.FK_RouterAction_RouterHost

        public RouterHost()
        {
            Enabled = true;
            RouterActions = new System.Collections.Generic.List<RouterAction>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterPostBackPrecisionSample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterPostBackPrecisionSample
    {
        public int RouterPostbackPrecisionSampleId { get; set; } // RouterPostbackPrecisionSampleId (Primary key)
        public System.Guid UserGuid { get; set; } // UserGuid
        public decimal Reward { get; set; } // Reward
        public string Status { get; set; } // Status (length: 1)
        public bool Reversed { get; set; } // Reversed
        public int ProjectId { get; set; } // ProjectId
        public decimal Gross { get; set; } // Gross
        public System.DateTime PostbackDate { get; set; } // PostbackDate
        public System.DateTime? ReverseDate { get; set; } // ReverseDate
        public bool? Processed { get; set; } // Processed
        public System.DateTime? ProcessedDate { get; set; } // ProcessedDate
        public System.DateTime InsertDate { get; set; } // InsertDate
        public System.Guid TransactionId { get; set; } // TransactionId

        public RouterPostBackPrecisionSample()
        {
            InsertDate = System.DateTime.Now;
            TransactionId = System.Guid.NewGuid();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterPostBackYourSurveys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterPostBackYourSurvey
    {
        public int RouterPostBackYourSurveysId { get; set; } // RouterPostBackYourSurveysId (Primary key)
        public System.Guid TransactionId { get; set; } // TransactionId
        public string TransactionIdYs { get; set; } // TransactionIdYS (length: 50)
        public string IpAddress { get; set; } // IpAddress (length: 50)
        public string SignatureMd5 { get; set; } // signatureMd5 (length: 250)
        public System.DateTime PostbackDate { get; set; } // PostbackDate
        public bool? Processed { get; set; } // Processed
        public System.DateTime? ProcessedDate { get; set; } // ProcessedDate

        public RouterPostBackYourSurvey()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterStatusPrecisionSamples
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterStatusPrecisionSample
    {
        public string Email { get; set; } // Email (Primary key) (length: 250)
        public string Name { get; set; } // Name (Primary key) (length: 255)
        public decimal RewardValue { get; set; } // RewardValue (Primary key)
        public string Status { get; set; } // Status (Primary key) (length: 1)
        public System.DateTime PostbackDate { get; set; } // PostbackDate (Primary key)
        public bool? Processed { get; set; } // Processed
        public System.DateTime? ProcessedDate { get; set; } // ProcessedDate
        public System.Guid TransactionId { get; set; } // TransactionId (Primary key)

        public RouterStatusPrecisionSample()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterStatusYourSurveys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterStatusYourSurvey
    {
        public string Email { get; set; } // Email (Primary key) (length: 250)
        public string Name { get; set; } // Name (Primary key) (length: 255)
        public decimal Cpi { get; set; } // cpi (Primary key)
        public System.DateTime PostbackDate { get; set; } // PostbackDate (Primary key)
        public bool? Processed { get; set; } // Processed
        public System.DateTime? ProcessedDate { get; set; } // ProcessedDate
        public System.Guid TransactionId { get; set; } // TransactionId (Primary key)

        public RouterStatusYourSurvey()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterSurveyPrecisionSample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterSurveyPrecisionSample
    {
        public int RouterSurveyPrecisionSampleId { get; set; } // RouterSurveyPrecisionSampleId (Primary key)
        public int ProjectId { get; set; } // ProjectId
        public string Name { get; set; } // Name (length: 255)
        public int SurveyLength { get; set; } // SurveyLength
        public decimal GrossRevenue { get; set; } // GrossRevenue
        public decimal RewardValue { get; set; } // RewardValue
        public string TrafficType { get; set; } // TrafficType (length: 50)
        public int ConversionRate { get; set; } // ConversionRate
        public bool VerityCheckRequired { get; set; } // VerityCheckRequired
        public string Url { get; set; } // Url (length: 500)
        public System.DateTime InsertDate { get; set; } // InsertDate

        // Reverse navigation

        /// <summary>
        /// Child RouterActions where [RouterAction].[RouterSurveyPrecisionSampleId] point to this entity (FK_RouterAction_RouterSurveyPrecisionSample)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RouterAction> RouterActions { get; set; } // RouterAction.FK_RouterAction_RouterSurveyPrecisionSample

        public RouterSurveyPrecisionSample()
        {
            InsertDate = System.DateTime.Now;
            RouterActions = new System.Collections.Generic.List<RouterAction>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // RouterSurveyYourSurvey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterSurveyYourSurvey
    {
        public int RouterSurveyYourSurveyId { get; set; } // RouterSurveyYourSurveyId (Primary key)
        public decimal Cpi { get; set; } // Cpi
        public decimal ConversionRate { get; set; } // ConversionRate
        public int Loi { get; set; } // Loi
        public string Name { get; set; } // Name (length: 255)
        public int StudyType { get; set; } // StudyType
        public int RemainingCompletes { get; set; } // RemainingCompletes
        public int ProjectId { get; set; } // ProjectId
        public string Url { get; set; } // Url (length: 500)
        public System.DateTime InsertDate { get; set; } // InsertDate

        // Reverse navigation

        /// <summary>
        /// Child RouterActions where [RouterAction].[RouterSurveyYourSurveyId] point to this entity (FK_RouterAction_RouterSurveyYourSurvey)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RouterAction> RouterActions { get; set; } // RouterAction.FK_RouterAction_RouterSurveyYourSurvey

        public RouterSurveyYourSurvey()
        {
            InsertDate = System.DateTime.Now;
            RouterActions = new System.Collections.Generic.List<RouterAction>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ScrubLead
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ScrubLead
    {
        public int Id { get; set; } // ID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string Salutation { get; set; } // Salutation (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public decimal? Cost { get; set; } // Cost
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string SelectedLanguageId { get; set; } // SelectedLanguageID (Primary key) (length: 2)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public string Ip { get; set; } // IP (length: 15)

        public ScrubLead()
        {
            CountryId = "US";
            SelectedLanguageId = "EN";
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ScrubReportConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ScrubReportConfig
    {
        public string AffiliateId { get; set; } // AffiliateID (Primary key) (length: 255)
        public string Columns { get; set; } // Columns (length: 500)
        public string Delimiter { get; set; } // Delimiter (length: 3)

        public ScrubReportConfig()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SiteBlacklist
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SiteBlacklist
    {
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string OfferId { get; set; } // OfferID (Primary key) (length: 50)
        public string PageVerbiage { get; set; } // PageVerbiage (length: 511)
        public int RedirTimeout { get; set; } // RedirTimeout
        public string RedirUrl { get; set; } // RedirURL (length: 255)

        public SiteBlacklist()
        {
            RedirTimeout = 3;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SiteBlacklistIpAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SiteBlacklistIpAddress
    {
        public int Id { get; set; } // ID (Primary key)
        public string IpAddress { get; set; } // IpAddress (Primary key) (length: 255)
        public string PageVerbiage { get; set; } // PageVerbiage (length: 511)
        public int RedirTimeout { get; set; } // RedirTimeout (Primary key)
        public string RedirUrl { get; set; } // RedirURL (Primary key) (length: 255)

        public SiteBlacklistIpAddress()
        {
            RedirTimeout = 3;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartEmailLinkClick
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartEmailLinkClick
    {
        public int Id { get; set; } // ID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public System.DateTime DateClicked { get; set; } // DateClicked

        public SmartEmailLinkClick()
        {
            DateClicked = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartEmailLinkConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartEmailLinkConfig
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string AffiliateCampaignName { get; set; } // AffiliateCampaignName (length: 50)
        public string Description { get; set; } // Description (length: 512)
        public string ImageUrl { get; set; } // ImageURL (length: 400)
        public string ExitUrl { get; set; } // ExitURL (length: 400)
        public string CountryId { get; set; } // CountryID (length: 2)
        public int Priority { get; set; } // Priority
        public double Desirability { get; set; } // Desirability
        public decimal Cpa { get; set; } // CPA
        public int Cap { get; set; } // Cap
        public bool CpcOffer { get; set; } // CPCOffer
        public bool SendCookieId { get; set; } // SendCookieID
        public int SurveyPanel { get; set; } // SurveyPanel
        public bool Enabled { get; set; } // Enabled
        public int ClinicalTrial { get; set; } // ClinicalTrial

        public SmartEmailLinkConfig()
        {
            CountryId = "US";
            SurveyPanel = 0;
            ClinicalTrial = 0;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartEmailLinkFields
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartEmailLinkField
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 255)

        public SmartEmailLinkField()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartEmailLinkTarget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartEmailLinkTarget
    {
        public int Id { get; set; } // ID (Primary key)
        public int LinkId { get; set; } // LinkID (Primary key)
        public int QuestionId { get; set; } // QuestionID (Primary key)
        public string Operator { get; set; } // Operator (length: 2)
        public string Value { get; set; } // Value (length: 255)
        public bool RequiredForInclusion { get; set; } // RequiredForInclusion

        public SmartEmailLinkTarget()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartExitLinkConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartExitLinkConfig
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string AffiliateCampaignName { get; set; } // AffiliateCampaignName (length: 50)
        public string Description { get; set; } // Description (length: 512)
        public string ImageUrl { get; set; } // ImageURL (length: 400)
        public string ExitUrl { get; set; } // ExitURL (length: 400)
        public string CountryId { get; set; } // CountryID (length: 2)
        public int Priority { get; set; } // Priority
        public double Desirability { get; set; } // Desirability
        public decimal Cpa { get; set; } // CPA
        public int Cap { get; set; } // Cap
        public bool CpcOffer { get; set; } // CPCOffer
        public bool SendCookieId { get; set; } // SendCookieID
        public int SurveyPanel { get; set; } // SurveyPanel
        public bool Enabled { get; set; } // Enabled
        public int ClinicalTrial { get; set; } // ClinicalTrial

        public SmartExitLinkConfig()
        {
            CountryId = "US";
            Priority = 0;
            Desirability = 1;
            Cpa = 0m;
            CpcOffer = false;
            SendCookieId = false;
            SurveyPanel = 0;
            Enabled = true;
            ClinicalTrial = 0;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartExitLinkFields
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartExitLinkField
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 255)

        public SmartExitLinkField()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartExitLinkTarget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartExitLinkTarget
    {
        public int Id { get; set; } // ID (Primary key)
        public int LinkId { get; set; } // LinkID (Primary key)
        public int QuestionId { get; set; } // QuestionID (Primary key)
        public string Operator { get; set; } // Operator (length: 2)
        public string Value { get; set; } // Value (length: 255)
        public bool RequiredForInclusion { get; set; } // RequiredForInclusion

        public SmartExitLinkTarget()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartLinkAILog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartLinkAiLog
    {
        public int AutoId { get; set; } // AutoID (Primary key)
        public int LinkId { get; set; } // LinkID (Primary key)
        public double Epi { get; set; } // EPI (Primary key)
        public int PriorityFrom { get; set; } // PriorityFrom (Primary key)
        public int PriorityTo { get; set; } // PriorityTo (Primary key)
        public string ChangeType { get; set; } // ChangeType (Primary key) (length: 50)
        public string SmartLinkSystem { get; set; } // SmartLinkSystem (Primary key) (length: 20)
        public System.DateTime DateChanged { get; set; } // DateChanged (Primary key)

        public SmartLinkAiLog()
        {
            ChangeType = "Priority";
            DateChanged = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartLinkLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartLinkLog
    {
        public int Id { get; set; } // ID (Primary key)
        public int LinkId { get; set; } // LinkID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public decimal Cpa { get; set; } // CPA
        public string SmartLinkSystem { get; set; } // SmartLinkSystem (Primary key) (length: 20)
        public bool Confirmed { get; set; } // Confirmed (Primary key)
        public System.DateTime DateSent { get; set; } // DateSent (Primary key)
        public System.DateTime? DateConfirmed { get; set; } // DateConfirmed
        public string ReferringUrl { get; set; } // ReferringURL (length: 511)

        public SmartLinkLog()
        {
            Cpa = 0m;
            Confirmed = false;
            DateSent = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartWebLinkConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartWebLinkConfig
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string ExitUrl { get; set; } // ExitURL (length: 255)
        public int Priority { get; set; } // Priority
        public int Cap { get; set; } // Cap
        public bool SendCookieId { get; set; } // SendCookieID

        public SmartWebLinkConfig()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartWebLinkFields
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartWebLinkField
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 255)

        public SmartWebLinkField()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartWebLinkLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartWebLinkLog
    {
        public int Id { get; set; } // ID (Primary key)
        public int LinkId { get; set; } // LinkID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string Confirmed { get; set; } // Confirmed (length: 10)
        public System.DateTime DateSent { get; set; } // DateSent (Primary key)
        public System.DateTime? DateConfirmed { get; set; } // DateConfirmed
        public string SubId { get; set; } // SubID (length: 4)

        public SmartWebLinkLog()
        {
            Confirmed = "0";
            DateSent = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SmartWebLinkTarget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartWebLinkTarget
    {
        public int Id { get; set; } // ID (Primary key)
        public int LinkId { get; set; } // LinkID (Primary key)
        public int QuestionId { get; set; } // QuestionID (Primary key)
        public string Operator { get; set; } // Operator (length: 2)
        public string Value { get; set; } // Value (length: 255)
        public bool RequiredForInclusion { get; set; } // RequiredForInclusion

        public SmartWebLinkTarget()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // States
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class State
    {
        public int StateId { get; set; } // StateId (Primary key)
        public string St { get; set; } // ST (length: 2)
        public string Statename { get; set; } // Statename (length: 50)
        public bool Active { get; set; } // Active

        public State()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // UserNews
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class UserNew
    {
        public int UserNewsId { get; set; } // UserNewsID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 250)
        public string Message { get; set; } // Message (length: 2000)
        public int MessageType { get; set; } // MessageType
        public System.DateTime MessageDateTime { get; set; } // MessageDateTime
        public System.DateTime MessageDate { get; set; } // MessageDate
        public bool? Active { get; set; } // Active

        public UserNew()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // VerifyZipFailure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VerifyZipFailure
    {
        public int VerifyZipFailureId { get; set; } // VerifyZipFailureId (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (length: 255)
        public string Street { get; set; } // Street (length: 500)
        public string IpAddress { get; set; } // IpAddress (length: 50)
        public string Zip { get; set; } // Zip (length: 50)
        public string IpVerifyResultJson { get; set; } // IpVerifyResultJson (length: 1000)
        public string ZipLookupResultJson { get; set; } // ZipLookupResultJson (length: 1000)
        public bool InvalidIp { get; set; } // InvalidIP
        public bool InvalidZip { get; set; } // InvalidZip
        public bool InValidAddress { get; set; } // InValidAddress
        public bool NoMatch { get; set; } // NoMatch
        public System.DateTime InsertDate { get; set; } // InsertDate
        public bool IrreputableIp { get; set; } // IrreputableIP

        public VerifyZipFailure()
        {
            InvalidIp = false;
            InvalidZip = false;
            InValidAddress = false;
            NoMatch = false;
            InsertDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwCBRSurveyStatusWithPending
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwCbrSurveyStatusWithPending
    {
        public System.DateTime? EarningsClearedDate { get; set; } // EarningsClearedDate
        public int IsPending { get; set; } // IsPending (Primary key)
        public bool Type { get; set; } // Type (Primary key)
        public int Id { get; set; } // ID (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public decimal PayoutValue { get; set; } // PayoutValue (Primary key)
        public decimal ReceiveValue { get; set; } // ReceiveValue (Primary key)
        public int StatusId { get; set; } // StatusID (Primary key)
        public string DtCookieId { get; set; } // DTCookieID (length: 32)
        public int? RandomId { get; set; } // RandomID
        public string AffCookieId { get; set; } // AffCookieID (length: 50)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public System.DateTime? CompletedDate { get; set; } // CompletedDate
        public System.DateTime? DeniedDate { get; set; } // DeniedDate
        public string Description { get; set; } // Description (length: 8000)
        public string Title { get; set; } // Title (Primary key) (length: 511)

        public VwCbrSurveyStatusWithPending()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwDebugIP
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwDebugIp
    {
        public int SiteVertical { get; set; } // SiteVertical (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string Salutation { get; set; } // Salutation (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public bool? SmartPhone { get; set; } // SmartPhone
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string Gender { get; set; } // Gender (length: 1)
        public string Occupation { get; set; } // Occupation (length: 100)
        public string Income { get; set; } // Income (length: 100)
        public string HomeOwnership { get; set; } // HomeOwnership (length: 100)
        public string Education { get; set; } // Education (length: 100)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 100)
        public int? Children { get; set; } // Children
        public string Ethnicity { get; set; } // Ethnicity (length: 50)
        public string Password { get; set; } // Password (length: 50)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public decimal? Cost { get; set; } // Cost
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string SelectedLanguageId { get; set; } // SelectedLanguageID (Primary key) (length: 2)
        public System.DateTime OptInDate { get; set; } // OptInDate (Primary key)
        public System.DateTime LastRunDate { get; set; } // LastRunDate (Primary key)
        public int LastSendOnDay { get; set; } // LastSendOnDay (Primary key)
        public System.DateTime? OptOutDate { get; set; } // OptOutDate
        public bool DoNotSendTo { get; set; } // DoNotSendTo (Primary key)
        public System.DateTime? ConfirmedDate { get; set; } // ConfirmedDate
        public bool ThirdPartyListsUpdated { get; set; } // ThirdPartyListsUpdated (Primary key)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public string Ip { get; set; } // IP (length: 15)
        public string Uid { get; set; } // UID (length: 50)
        public bool? Clik { get; set; } // Clik

        public VwDebugIp()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwJobCodes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwJobCode
    {
        public int CbrJobCodeId { get; set; } // CBRJobCodeID (Primary key)
        public string OccupationCode { get; set; } // OccupationCode (Primary key) (length: 50)
        public int CbrQuestionDropdownId { get; set; } // CBRQuestionDropdownID (Primary key)
        public bool Active { get; set; } // Active (Primary key)
        public string Answer { get; set; } // Answer (Primary key) (length: 255)

        public VwJobCode()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwOptInLeadKeys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwOptInLeadKey
    {
        public System.Guid? Id { get; set; } // ID
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string Gender { get; set; } // Gender (length: 1)
        public string Password { get; set; } // Password (length: 50)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public bool? Clik { get; set; } // Clik

        public VwOptInLeadKey()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwOptInLeadPJDegree
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwOptInLeadPjDegree
    {
        public int SiteVertical { get; set; } // SiteVertical (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string Salutation { get; set; } // Salutation (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public bool? SmartPhone { get; set; } // SmartPhone
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string SelectedLanguageId { get; set; } // SelectedLanguageID (Primary key) (length: 2)
        public System.DateTime OptInDate { get; set; } // OptInDate (Primary key)
        public System.DateTime LastRunDate { get; set; } // LastRunDate (Primary key)
        public int LastSendOnDay { get; set; } // LastSendOnDay (Primary key)
        public System.DateTime? OptOutDate { get; set; } // OptOutDate
        public bool DoNotSendTo { get; set; } // DoNotSendTo (Primary key)
        public bool ThirdPartyListsUpdated { get; set; } // ThirdPartyListsUpdated (Primary key)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public string Ip { get; set; } // IP (length: 15)
        public decimal? Cost { get; set; } // Cost
        public string Gender { get; set; } // Gender (length: 1)
        public string Occupation { get; set; } // Occupation (length: 100)
        public string Income { get; set; } // Income (length: 100)
        public string HomeOwnership { get; set; } // HomeOwnership (length: 100)
        public string Education { get; set; } // Education (length: 100)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 100)
        public int? Children { get; set; } // Children
        public string Ethnicity { get; set; } // Ethnicity (length: 50)
        public string Password { get; set; } // Password (length: 50)

        public VwOptInLeadPjDegree()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwOptInLeadSurveys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwOptInLeadSurvey
    {
        public int SiteVertical { get; set; } // SiteVertical (Primary key)
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string Salutation { get; set; } // Salutation (length: 100)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public bool? SmartPhone { get; set; } // SmartPhone
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string OfferId { get; set; } // OfferID (length: 100)
        public string AffiliateId { get; set; } // AffiliateID (length: 255)
        public string SubId { get; set; } // SubID (length: 255)
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)
        public string SelectedLanguageId { get; set; } // SelectedLanguageID (Primary key) (length: 2)
        public System.DateTime OptInDate { get; set; } // OptInDate (Primary key)
        public System.DateTime LastRunDate { get; set; } // LastRunDate (Primary key)
        public int LastSendOnDay { get; set; } // LastSendOnDay (Primary key)
        public System.DateTime? OptOutDate { get; set; } // OptOutDate
        public bool DoNotSendTo { get; set; } // DoNotSendTo (Primary key)
        public bool ThirdPartyListsUpdated { get; set; } // ThirdPartyListsUpdated (Primary key)
        public System.DateTime InsertDate { get; set; } // InsertDate (Primary key)
        public string Ip { get; set; } // IP (length: 15)
        public decimal? Cost { get; set; } // Cost
        public string Gender { get; set; } // Gender (length: 1)
        public string Occupation { get; set; } // Occupation (length: 100)
        public string Income { get; set; } // Income (length: 100)
        public string HomeOwnership { get; set; } // HomeOwnership (length: 100)
        public string Education { get; set; } // Education (length: 100)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 100)
        public int? Children { get; set; } // Children
        public string Ethnicity { get; set; } // Ethnicity (length: 50)
        public string Password { get; set; } // Password (length: 50)

        public VwOptInLeadSurvey()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwOptInLeadUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwOptInLeadUser
    {
        public System.Guid? Id { get; set; } // ID
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public string Firstname { get; set; } // Firstname (length: 100)
        public string Lastname { get; set; } // Lastname (length: 100)
        public string Address { get; set; } // Address (length: 100)
        public string Address2 { get; set; } // Address2 (length: 100)
        public string City { get; set; } // City (length: 100)
        public string State { get; set; } // State (length: 100)
        public string Zip { get; set; } // Zip (length: 100)
        public string Phone { get; set; } // Phone (length: 100)
        public string Mobilephone { get; set; } // Mobilephone (length: 100)
        public bool? SmartPhone { get; set; } // SmartPhone
        public int? BirthdayDay { get; set; } // BirthdayDay
        public int? BirthdayMonth { get; set; } // BirthdayMonth
        public int? BirthdayYear { get; set; } // BirthdayYear
        public string Gender { get; set; } // Gender (length: 1)
        public string Ethnicity { get; set; } // Ethnicity (length: 50)
        public string Password { get; set; } // Password (length: 50)
        public bool? Clik { get; set; } // Clik

        public VwOptInLeadUser()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vwRouterStatusPrecisionSurvey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwRouterStatusPrecisionSurvey
    {
        public string Email { get; set; } // Email (Primary key) (length: 250)
        public System.Guid UserGuid { get; set; } // UserGuid (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 255)
        public string Status { get; set; } // Status (Primary key) (length: 1)
        public decimal Reward { get; set; } // Reward (Primary key)
        public decimal Gross { get; set; } // Gross (Primary key)

        public VwRouterStatusPrecisionSurvey()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // WeeklySurveyAnswers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class WeeklySurveyAnswer
    {
        public string EmailAddress { get; set; } // EmailAddress (Primary key) (length: 255)
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public int AnswerId { get; set; } // AnswerID
        public System.DateTime AnswerDate { get; set; } // AnswerDate
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)

        public WeeklySurveyAnswer()
        {
            AnswerDate = System.DateTime.Now;
            CountryId = "US";
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // WeeklySurveyConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class WeeklySurveyConfig
    {
        public int AutoId { get; set; } // AutoID
        public int SurveyId { get; set; } // SurveyID (Primary key)
        public string Answer { get; set; } // Answer (Primary key) (length: 255)
        public int DisplayOrder { get; set; } // DisplayOrder
        public string CountryId { get; set; } // CountryID (Primary key) (length: 2)

        public WeeklySurveyConfig()
        {
            CountryId = "US";
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // WithdrawReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class WithdrawReason
    {
        public int WithdrawReasonId { get; set; } // WithdrawReasonID (Primary key)
        public string Reason { get; set; } // Reason (length: 250)

        // Reverse navigation

        /// <summary>
        /// Child CbrSurveyWithdraws where [CBRSurveyWithdraw].[WithdrawReasonID] point to this entity (FK_CBRSurveyWithdraw_WithdrawReason)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CbrSurveyWithdraw> CbrSurveyWithdraws { get; set; } // CBRSurveyWithdraw.FK_CBRSurveyWithdraw_WithdrawReason

        public WithdrawReason()
        {
            CbrSurveyWithdraws = new System.Collections.Generic.List<CbrSurveyWithdraw>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // The table 'ZipCodes' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // ZipCodes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ZipCode
    {
        public string ZipCode_ { get; set; } // ZipCode (length: 50)
        public string City { get; set; } // City (length: 50)
        public string State { get; set; } // State (length: 50)
        public string County { get; set; } // County (length: 50)
        public string AreaCode { get; set; } // AreaCode (length: 50)
        public string CityType { get; set; } // CityType (length: 50)
        public string CityAliasAbbreviation { get; set; } // CityAliasAbbreviation (length: 50)
        public string CityAliasName { get; set; } // CityAliasName (length: 50)
        public double? Latitude { get; set; } // Latitude
        public double? Longitude { get; set; } // Longitude
        public string TimeZone { get; set; } // TimeZone (length: 50)
        public string Elevation { get; set; } // Elevation (length: 50)
        public string CountyFips { get; set; } // CountyFIPS (length: 50)
        public string DayLightSavings { get; set; } // DayLightSavings (length: 50)

        public ZipCode()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // Affiliate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AffiliateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Affiliate>
    {
        public AffiliateConfiguration()
            : this("dbo")
        {
        }

        public AffiliateConfiguration(string schema)
        {
            ToTable("Affiliate", schema);
            HasKey(x => x.AffiliateId);

            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(5).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AffiliateName).HasColumnName(@"AffiliateName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.RegisteredEmail).HasColumnName(@"RegisteredEmail").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AcceptedTandCDate).HasColumnName(@"AcceptedTandCDate").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.PayForScrubs).HasColumnName(@"PayForScrubs").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // AffiliateCountry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AffiliateCountryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AffiliateCountry>
    {
        public AffiliateCountryConfiguration()
            : this("dbo")
        {
        }

        public AffiliateCountryConfiguration(string schema)
        {
            ToTable("AffiliateCountry", schema);
            HasKey(x => new { x.AffiliateId, x.CountryId });

            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // AffiliateSub
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AffiliateSubConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AffiliateSub>
    {
        public AffiliateSubConfiguration()
            : this("dbo")
        {
        }

        public AffiliateSubConfiguration(string schema)
        {
            ToTable("AffiliateSub", schema);
            HasKey(x => x.AffiliateId);

            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CostPerLead).HasColumnName(@"CostPerLead").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.ReceiveShareMultiplier).HasColumnName(@"ReceiveShareMultiplier").HasColumnType("float").IsRequired();
            Property(x => x.DailyCap).HasColumnName(@"DailyCap").HasColumnType("int").IsRequired();
            Property(x => x.MonthlyCap).HasColumnName(@"MonthlyCap").HasColumnType("int").IsRequired();
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // allInboxClikBackup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AllInboxClikBackupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AllInboxClikBackup>
    {
        public AllInboxClikBackupConfiguration()
            : this("dbo")
        {
        }

        public AllInboxClikBackupConfiguration(string schema)
        {
            ToTable("allInboxClikBackup", schema);
            HasKey(x => new { x.PqpId, x.InsertDate });

            Property(x => x.PqpId).HasColumnName(@"PqpID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // AweberDemoUpdate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class AweberDemoUpdateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AweberDemoUpdate>
    {
        public AweberDemoUpdateConfiguration()
            : this("dbo")
        {
        }

        public AweberDemoUpdateConfiguration(string schema)
        {
            ToTable("AweberDemoUpdate", schema);
            HasKey(x => x.EmailAddress);

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // BatchFileExportLeadsSent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class BatchFileExportLeadsSentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BatchFileExportLeadsSent>
    {
        public BatchFileExportLeadsSentConfiguration()
            : this("dbo")
        {
        }

        public BatchFileExportLeadsSentConfiguration(string schema)
        {
            ToTable("BatchFileExportLeadsSent", schema);
            HasKey(x => new { x.AffiliateId, x.EmailAddress });

            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(5).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateExported).HasColumnName(@"DateExported").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRConsent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrConsentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrConsent>
    {
        public CbrConsentConfiguration()
            : this("dbo")
        {
        }

        public CbrConsentConfiguration(string schema)
        {
            ToTable("CBRConsent", schema);
            HasKey(x => x.CbrConsentId);

            Property(x => x.CbrConsentId).HasColumnName(@"CBRConsentId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DateofConsent).HasColumnName(@"DateofConsent").HasColumnType("datetime").IsRequired();
            Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBREmailAddressChange
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrEmailAddressChangeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrEmailAddressChange>
    {
        public CbrEmailAddressChangeConfiguration()
            : this("dbo")
        {
        }

        public CbrEmailAddressChangeConfiguration(string schema)
        {
            ToTable("CBREmailAddressChange", schema);
            HasKey(x => new { x.EmailAddress, x.NewEmailAddress, x.ChangeDate });

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NewEmailAddress).HasColumnName(@"NewEmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ChangeDate).HasColumnName(@"ChangeDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBREmailDailyBatchCounter
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrEmailDailyBatchCounterConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrEmailDailyBatchCounter>
    {
        public CbrEmailDailyBatchCounterConfiguration()
            : this("dbo")
        {
        }

        public CbrEmailDailyBatchCounterConfiguration(string schema)
        {
            ToTable("CBREmailDailyBatchCounter", schema);
            HasKey(x => x.LastIdProcessed);

            Property(x => x.LastIdProcessed).HasColumnName(@"LastIDProcessed").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRJobCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrJobCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrJobCode>
    {
        public CbrJobCodeConfiguration()
            : this("dbo")
        {
        }

        public CbrJobCodeConfiguration(string schema)
        {
            ToTable("CBRJobCode", schema);
            HasKey(x => x.CbrJobCodeId);

            Property(x => x.CbrJobCodeId).HasColumnName(@"CBRJobCodeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OccupationCode).HasColumnName(@"OccupationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CbrQuestionDropdownId).HasColumnName(@"CBRQuestionDropdownID").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRLead
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrLeadConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrLead>
    {
        public CbrLeadConfiguration()
            : this("dbo")
        {
        }

        public CbrLeadConfiguration(string schema)
        {
            ToTable("CBRLead", schema);
            HasKey(x => new { x.CbrLeadId, x.EmailAddress, x.CountryId, x.SelectedLanguageId, x.OptInDate, x.LastRunDate, x.LastSendOnDay, x.DoNotSendTo, x.ThirdPartyListsUpdated, x.InsertDate });

            Property(x => x.CbrLeadId).HasColumnName(@"CBRLeadId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Salutation).HasColumnName(@"Salutation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SmartPhone).HasColumnName(@"SmartPhone").HasColumnType("bit").IsOptional();
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Income).HasColumnName(@"Income").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.HomeOwnership).HasColumnName(@"HomeOwnership").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Children).HasColumnName(@"Children").HasColumnType("int").IsOptional();
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SelectedLanguageId).HasColumnName(@"SelectedLanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptInDate).HasColumnName(@"OptInDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastRunDate).HasColumnName(@"LastRunDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastSendOnDay).HasColumnName(@"LastSendOnDay").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptOutDate).HasColumnName(@"OptOutDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DoNotSendTo).HasColumnName(@"DoNotSendTo").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ConfirmedDate).HasColumnName(@"ConfirmedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ThirdPartyListsUpdated).HasColumnName(@"ThirdPartyListsUpdated").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Uid).HasColumnName(@"UID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Clik).HasColumnName(@"Clik").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRLeadStageInsert
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrLeadStageInsertConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrLeadStageInsert>
    {
        public CbrLeadStageInsertConfiguration()
            : this("dbo")
        {
        }

        public CbrLeadStageInsertConfiguration(string schema)
        {
            ToTable("CBRLeadStageInsert", schema);
            HasKey(x => x.CbrLeadStageInsertId);

            Property(x => x.CbrLeadStageInsertId).HasColumnName(@"CBRLeadStageInsertId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CbrLeadId).HasColumnName(@"CbrLeadId").HasColumnType("int").IsRequired();
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Salutation).HasColumnName(@"Salutation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SmartPhone).HasColumnName(@"SmartPhone").HasColumnType("bit").IsOptional();
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Income).HasColumnName(@"Income").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.HomeOwnership).HasColumnName(@"HomeOwnership").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Children).HasColumnName(@"Children").HasColumnType("int").IsOptional();
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.SelectedLanguageId).HasColumnName(@"SelectedLanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.OptInDate).HasColumnName(@"OptInDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastRunDate).HasColumnName(@"LastRunDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastSendOnDay).HasColumnName(@"LastSendOnDay").HasColumnType("int").IsRequired();
            Property(x => x.OptOutDate).HasColumnName(@"OptOutDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DoNotSendTo).HasColumnName(@"DoNotSendTo").HasColumnType("bit").IsRequired();
            Property(x => x.ConfirmedDate).HasColumnName(@"ConfirmedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ThirdPartyListsUpdated).HasColumnName(@"ThirdPartyListsUpdated").HasColumnType("bit").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Uid).HasColumnName(@"UID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Clik).HasColumnName(@"Clik").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRLeadStageUpdate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrLeadStageUpdateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrLeadStageUpdate>
    {
        public CbrLeadStageUpdateConfiguration()
            : this("dbo")
        {
        }

        public CbrLeadStageUpdateConfiguration(string schema)
        {
            ToTable("CBRLeadStageUpdate", schema);
            HasKey(x => x.CbrLeadStageUpdateId);

            Property(x => x.CbrLeadStageUpdateId).HasColumnName(@"CBRLeadStageUpdateId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CbrLeadId).HasColumnName(@"CbrLeadId").HasColumnType("int").IsRequired();
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Salutation).HasColumnName(@"Salutation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SmartPhone).HasColumnName(@"SmartPhone").HasColumnType("bit").IsOptional();
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Income).HasColumnName(@"Income").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.HomeOwnership).HasColumnName(@"HomeOwnership").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Children).HasColumnName(@"Children").HasColumnType("int").IsOptional();
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.SelectedLanguageId).HasColumnName(@"SelectedLanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.OptInDate).HasColumnName(@"OptInDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastRunDate).HasColumnName(@"LastRunDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastSendOnDay).HasColumnName(@"LastSendOnDay").HasColumnType("int").IsRequired();
            Property(x => x.OptOutDate).HasColumnName(@"OptOutDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DoNotSendTo).HasColumnName(@"DoNotSendTo").HasColumnType("bit").IsRequired();
            Property(x => x.ConfirmedDate).HasColumnName(@"ConfirmedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ThirdPartyListsUpdated).HasColumnName(@"ThirdPartyListsUpdated").HasColumnType("bit").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Uid).HasColumnName(@"UID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Clik).HasColumnName(@"Clik").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRPayout
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrPayoutConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrPayout>
    {
        public CbrPayoutConfiguration()
            : this("dbo")
        {
        }

        public CbrPayoutConfiguration(string schema)
        {
            ToTable("CBRPayout", schema);
            HasKey(x => new { x.EmailAddress, x.CountryId, x.RequestAmount, x.OptionId, x.Type, x.RequestForPaymentDate });

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PaypalEmailAddress).HasColumnName(@"PaypalEmailAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequestAmount).HasColumnName(@"RequestAmount").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptionId).HasColumnName(@"OptionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequestForPaymentDate).HasColumnName(@"RequestForPaymentDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PaidDate).HasColumnName(@"PaidDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRQuestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrQuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrQuestion>
    {
        public CbrQuestionConfiguration()
            : this("dbo")
        {
        }

        public CbrQuestionConfiguration(string schema)
        {
            ToTable("CBRQuestion", schema);
            HasKey(x => new { x.Id, x.ElabsId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Question).HasColumnName(@"Question").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(512);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("int").IsRequired();
            Property(x => x.ElabsId).HasColumnName(@"ElabsID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.JinglioOfferId).HasColumnName(@"JinglioOfferID").HasColumnType("int").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRQuestionAnswers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrQuestionAnswerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrQuestionAnswer>
    {
        public CbrQuestionAnswerConfiguration()
            : this("dbo")
        {
        }

        public CbrQuestionAnswerConfiguration(string schema)
        {
            ToTable("CBRQuestionAnswers", schema);
            HasKey(x => new { x.EmailAddress, x.QuestionId });

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Answer).HasColumnName(@"Answer").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.AnswerDate).HasColumnName(@"AnswerDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRQuestionDropdown
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrQuestionDropdownConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrQuestionDropdown>
    {
        public CbrQuestionDropdownConfiguration()
            : this("dbo")
        {
        }

        public CbrQuestionDropdownConfiguration(string schema)
        {
            ToTable("CBRQuestionDropdown", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QuestionId).HasColumnName(@"QuestionID").HasColumnType("int").IsRequired();
            Property(x => x.Answer).HasColumnName(@"Answer").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Rank).HasColumnName(@"Rank").HasColumnType("int").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSignup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSignupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSignup>
    {
        public CbrSignupConfiguration()
            : this("dbo")
        {
        }

        public CbrSignupConfiguration(string schema)
        {
            ToTable("CBRSignup", schema);
            HasKey(x => x.CbrSignupId);

            Property(x => x.CbrSignupId).HasColumnName(@"CBRSignupID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SignupDate).HasColumnName(@"SignupDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSignupError
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSignupErrorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSignupError>
    {
        public CbrSignupErrorConfiguration()
            : this("dbo")
        {
        }

        public CbrSignupErrorConfiguration(string schema)
        {
            ToTable("CBRSignupError", schema);
            HasKey(x => x.CbrSignupErrorId);

            Property(x => x.CbrSignupErrorId).HasColumnName(@"CBRSignupErrorID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SignupDate).HasColumnName(@"SignupDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TransactionId).HasColumnName(@"TransactionID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.ErrorMessage).HasColumnName(@"ErrorMessage").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.Url).HasColumnName(@"URL").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1000);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurvey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurvey>
    {
        public CbrSurveyConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyConfiguration(string schema)
        {
            ToTable("CBRSurvey", schema);
            HasKey(x => new { x.Id, x.Title, x.CountryId, x.ClickPayoutValue, x.ClickReceiveValue, x.ClickCode, x.PayoutValue, x.ReceiveValue, x.AffiliateCampaignId, x.Type, x.Url, x.ImageWidth, x.ImageHeight, x.QuestionCount, x.DailyCapPerUser, x.Rank, x.Hide, x.Enabled, x.Approved, x.CausesConversion, x.CreateDate, x.DaysPending, x.DisplaysForType, x.IncentFriendly });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(511).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.Requirements).HasColumnName(@"Requirements").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1536);
            Property(x => x.Category).HasColumnName(@"Category").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClickPayoutValue).HasColumnName(@"ClickPayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClickReceiveValue).HasColumnName(@"ClickReceiveValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClickCode).HasColumnName(@"ClickCode").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PayoutValue).HasColumnName(@"PayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReceiveValue).HasColumnName(@"ReceiveValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AffiliateCampaignId).HasColumnName(@"AffiliateCampaignID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Url).HasColumnName(@"URL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.ImageWidth).HasColumnName(@"ImageWidth").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImageHeight).HasColumnName(@"ImageHeight").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionCount).HasColumnName(@"QuestionCount").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionPageTitle).HasColumnName(@"QuestionPageTitle").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.QuestionPageHeader).HasColumnName(@"QuestionPageHeader").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.QuestionPageFooter).HasColumnName(@"QuestionPageFooter").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.DailyCapPerUser).HasColumnName(@"DailyCapPerUser").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rank).HasColumnName(@"Rank").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Hide).HasColumnName(@"Hide").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Approved).HasColumnName(@"Approved").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CausesConversion).HasColumnName(@"CausesConversion").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DaysPending).HasColumnName(@"DaysPending").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisplaysForType).HasColumnName(@"DisplaysForType").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IncentFriendly).HasColumnName(@"IncentFriendly").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyBackup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyBackupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyBackup>
    {
        public CbrSurveyBackupConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyBackupConfiguration(string schema)
        {
            ToTable("CBRSurveyBackup", schema);
            HasKey(x => new { x.Id, x.Title, x.CountryId, x.ClickPayoutValue, x.ClickReceiveValue, x.ClickCode, x.PayoutValue, x.ReceiveValue, x.AffiliateCampaignId, x.Type, x.Url, x.ImageWidth, x.ImageHeight, x.QuestionCount, x.DailyCapPerUser, x.Rank, x.Hide, x.Enabled, x.Approved, x.CausesConversion, x.CreateDate });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(511).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1536);
            Property(x => x.Requirements).HasColumnName(@"Requirements").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1536);
            Property(x => x.Category).HasColumnName(@"Category").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClickPayoutValue).HasColumnName(@"ClickPayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClickReceiveValue).HasColumnName(@"ClickReceiveValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClickCode).HasColumnName(@"ClickCode").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PayoutValue).HasColumnName(@"PayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReceiveValue).HasColumnName(@"ReceiveValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AffiliateCampaignId).HasColumnName(@"AffiliateCampaignID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Url).HasColumnName(@"URL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.ImageWidth).HasColumnName(@"ImageWidth").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImageHeight).HasColumnName(@"ImageHeight").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionCount).HasColumnName(@"QuestionCount").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionPageTitle).HasColumnName(@"QuestionPageTitle").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.QuestionPageHeader).HasColumnName(@"QuestionPageHeader").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.QuestionPageFooter).HasColumnName(@"QuestionPageFooter").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.DailyCapPerUser).HasColumnName(@"DailyCapPerUser").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rank).HasColumnName(@"Rank").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Hide).HasColumnName(@"Hide").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Approved).HasColumnName(@"Approved").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CausesConversion).HasColumnName(@"CausesConversion").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyInstruction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyInstructionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyInstruction>
    {
        public CbrSurveyInstructionConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyInstructionConfiguration(string schema)
        {
            ToTable("CBRSurveyInstruction", schema);
            HasKey(x => x.CbrSurveyInstructionId);

            Property(x => x.CbrSurveyInstructionId).HasColumnName(@"CBRSurveyInstructionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired();
            Property(x => x.AboutText).HasColumnName(@"AboutText").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.AboutSubheading).HasColumnName(@"AboutSubheading").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreditCardRequired).HasColumnName(@"CreditCardRequired").HasColumnType("bit").IsRequired();
            Property(x => x.HasInterstitial).HasColumnName(@"HasInterstitial").HasColumnType("bit").IsRequired();
            Property(x => x.InterstitialText).HasColumnName(@"InterstitialText").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.LastUpdated).HasColumnName(@"LastUpdated").HasColumnType("datetime").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyQuestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyQuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyQuestion>
    {
        public CbrSurveyQuestionConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyQuestionConfiguration(string schema)
        {
            ToTable("CBRSurveyQuestion", schema);
            HasKey(x => new { x.SurveyId, x.QuestionId });

            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rank).HasColumnName(@"Rank").HasColumnType("int").IsRequired();
            Property(x => x.DisplayToUser).HasColumnName(@"DisplayToUser").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyStatu>
    {
        public CbrSurveyStatuConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyStatuConfiguration(string schema)
        {
            ToTable("CBRSurveyStatus", schema);
            HasKey(x => new { x.EmailAddress, x.SurveyId, x.Id });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PayoutValue).HasColumnName(@"PayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.ReceiveValue).HasColumnName(@"ReceiveValue").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("int").IsRequired();
            Property(x => x.DtCookieId).HasColumnName(@"DTCookieID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(32);
            Property(x => x.RandomId).HasColumnName(@"RandomID").HasColumnType("int").IsOptional();
            Property(x => x.AffCookieId).HasColumnName(@"AffCookieID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CompletedDate).HasColumnName(@"CompletedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DeniedDate).HasColumnName(@"DeniedDate").HasColumnType("datetime").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // cbrSurveyStatusOutput
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatusOutputConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyStatusOutput>
    {
        public CbrSurveyStatusOutputConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyStatusOutputConfiguration(string schema)
        {
            ToTable("cbrSurveyStatusOutput", schema);
            HasKey(x => new { x.Id, x.EmailAddress, x.SurveyId, x.PayoutValue, x.ReceiveValue, x.StatusId, x.InsertDate });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PayoutValue).HasColumnName(@"PayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReceiveValue).HasColumnName(@"ReceiveValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DtCookieId).HasColumnName(@"DTCookieID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(32);
            Property(x => x.RandomId).HasColumnName(@"RandomID").HasColumnType("int").IsOptional();
            Property(x => x.AffCookieId).HasColumnName(@"AffCookieID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompletedDate).HasColumnName(@"CompletedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DeniedDate).HasColumnName(@"DeniedDate").HasColumnType("datetime").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyStatusType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatusTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyStatusType>
    {
        public CbrSurveyStatusTypeConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyStatusTypeConfiguration(string schema)
        {
            ToTable("CBRSurveyStatusType", schema);
            HasKey(x => new { x.Id, x.Description });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyStatusWithBadEmail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatusWithBadEmailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyStatusWithBadEmail>
    {
        public CbrSurveyStatusWithBadEmailConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyStatusWithBadEmailConfiguration(string schema)
        {
            ToTable("CBRSurveyStatusWithBadEmail", schema);
            HasKey(x => new { x.EmailAddress, x.SurveyId, x.PayoutValue });

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.GoodEm).HasColumnName(@"goodEM").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PayoutValue).HasColumnName(@"PayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyStatusWithDupPay
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyStatusWithDupPayConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyStatusWithDupPay>
    {
        public CbrSurveyStatusWithDupPayConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyStatusWithDupPayConfiguration(string schema)
        {
            ToTable("CBRSurveyStatusWithDupPay", schema);
            HasKey(x => new { x.Id, x.EmailAddress, x.SurveyId, x.PayoutValue, x.ReceiveValue, x.StatusId, x.InsertDate });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PayoutValue).HasColumnName(@"PayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReceiveValue).HasColumnName(@"ReceiveValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DtCookieId).HasColumnName(@"DTCookieID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(32);
            Property(x => x.RandomId).HasColumnName(@"RandomID").HasColumnType("int").IsOptional();
            Property(x => x.AffCookieId).HasColumnName(@"AffCookieID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompletedDate).HasColumnName(@"CompletedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DeniedDate).HasColumnName(@"DeniedDate").HasColumnType("datetime").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyTarget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyTargetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyTarget>
    {
        public CbrSurveyTargetConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyTargetConfiguration(string schema)
        {
            ToTable("CBRSurveyTarget", schema);
            HasKey(x => new { x.Id, x.SurveyId, x.QuestionId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Operator).HasColumnName(@"Operator").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.RequiredForInclusion).HasColumnName(@"RequiredForInclusion").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRSurveyWithdraw
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrSurveyWithdrawConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrSurveyWithdraw>
    {
        public CbrSurveyWithdrawConfiguration()
            : this("dbo")
        {
        }

        public CbrSurveyWithdrawConfiguration(string schema)
        {
            ToTable("CBRSurveyWithdraw", schema);
            HasKey(x => x.CbrSurveyWithdrawId);

            Property(x => x.CbrSurveyWithdrawId).HasColumnName(@"CBRSurveyWithdrawID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired();
            Property(x => x.AffiliateCampaignId).HasColumnName(@"AffiliateCampaignID").HasColumnType("int").IsRequired();
            Property(x => x.WithdrawDate).HasColumnName(@"WithdrawDate").HasColumnType("datetime").IsRequired();
            Property(x => x.WithdrawReasonId).HasColumnName(@"WithdrawReasonID").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.WithdrawReason).WithMany(b => b.CbrSurveyWithdraws).HasForeignKey(c => c.WithdrawReasonId).WillCascadeOnDelete(false); // FK_CBRSurveyWithdraw_WithdrawReason
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRVerification
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrVerificationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrVerification>
    {
        public CbrVerificationConfiguration()
            : this("dbo")
        {
        }

        public CbrVerificationConfiguration(string schema)
        {
            ToTable("CBRVerification", schema);
            HasKey(x => x.CbrVerificationId);

            Property(x => x.CbrVerificationId).HasColumnName(@"CbrVerificationID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CBRZipVerified
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CbrZipVerifiedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CbrZipVerified>
    {
        public CbrZipVerifiedConfiguration()
            : this("dbo")
        {
        }

        public CbrZipVerifiedConfiguration(string schema)
        {
            ToTable("CBRZipVerified", schema);
            HasKey(x => x.CbrZipVerifiedId);

            Property(x => x.CbrZipVerifiedId).HasColumnName(@"CBRZipVerifiedId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.ValidIpAddress).HasColumnName(@"ValidIpAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15);
            Property(x => x.ValidZip).HasColumnName(@"ValidZip").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Coreg
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Coreg>
    {
        public CoregConfiguration()
            : this("dbo")
        {
        }

        public CoregConfiguration(string schema)
        {
            ToTable("Coreg", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Url).HasColumnName(@"URL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Cap).HasColumnName(@"Cap").HasColumnType("int").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CoregCampaign
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregCampaignConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoregCampaign>
    {
        public CoregCampaignConfiguration()
            : this("dbo")
        {
        }

        public CoregCampaignConfiguration(string schema)
        {
            ToTable("CoregCampaign", schema);
            HasKey(x => x.CoregCampaignId);

            Property(x => x.CoregCampaignId).HasColumnName(@"CoregCampaignId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.CoregPartnerId).HasColumnName(@"CoregPartnerId").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.CoregPartner).WithMany(b => b.CoregCampaigns).HasForeignKey(c => c.CoregPartnerId).WillCascadeOnDelete(false); // FK_CoregCampaign_CoregPartner
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CoregError
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregErrorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoregError>
    {
        public CoregErrorConfiguration()
            : this("dbo")
        {
        }

        public CoregErrorConfiguration(string schema)
        {
            ToTable("CoregError", schema);
            HasKey(x => x.CoregErrorId);

            Property(x => x.CoregErrorId).HasColumnName(@"CoregErrorID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Partner).HasColumnName(@"Partner").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.PostData).HasColumnName(@"PostData").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.Response).HasColumnName(@"Response").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.DateInserted).HasColumnName(@"DateInserted").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CoregLeadAccepted
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregLeadAcceptedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoregLeadAccepted>
    {
        public CoregLeadAcceptedConfiguration()
            : this("dbo")
        {
        }

        public CoregLeadAcceptedConfiguration(string schema)
        {
            ToTable("CoregLeadAccepted", schema);
            HasKey(x => x.CoregLeadAcceptedId);

            Property(x => x.CoregLeadAcceptedId).HasColumnName(@"CoregLeadAcceptedId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CbrLeadId).HasColumnName(@"CBRLeadId").HasColumnType("int").IsRequired();
            Property(x => x.CoregPartnerId).HasColumnName(@"CoregPartnerId").HasColumnType("int").IsRequired();
            Property(x => x.CoregCampaignId).HasColumnName(@"CoregCampaignId").HasColumnType("int").IsRequired();
            Property(x => x.DateSubmitted).HasColumnName(@"DateSubmitted").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.CoregCampaign).WithMany(b => b.CoregLeadAccepteds).HasForeignKey(c => c.CoregCampaignId).WillCascadeOnDelete(false); // FK_CoregLeadAccepted_CoregCampaign
            HasRequired(a => a.CoregPartner).WithMany(b => b.CoregLeadAccepteds).HasForeignKey(c => c.CoregPartnerId).WillCascadeOnDelete(false); // FK_CoregLeadAccepted_CoregPartner
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CoregPartner
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CoregPartnerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoregPartner>
    {
        public CoregPartnerConfiguration()
            : this("dbo")
        {
        }

        public CoregPartnerConfiguration(string schema)
        {
            ToTable("CoregPartner", schema);
            HasKey(x => x.CoregPartnerId);

            Property(x => x.CoregPartnerId).HasColumnName(@"CoregPartnerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Country
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CountryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Country>
    {
        public CountryConfiguration()
            : this("dbo")
        {
        }

        public CountryConfiguration(string schema)
        {
            ToTable("Country", schema);
            HasKey(x => new { x.CountryId, x.CountryName });

            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CountryLanguageDefault
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CountryLanguageDefaultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CountryLanguageDefault>
    {
        public CountryLanguageDefaultConfiguration()
            : this("dbo")
        {
        }

        public CountryLanguageDefaultConfiguration(string schema)
        {
            ToTable("CountryLanguageDefault", schema);
            HasKey(x => new { x.CountryId, x.LanguageId });

            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageId).HasColumnName(@"LanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CPANotification
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CpaNotificationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CpaNotification>
    {
        public CpaNotificationConfiguration()
            : this("dbo")
        {
        }

        public CpaNotificationConfiguration(string schema)
        {
            ToTable("CPANotification", schema);
            HasKey(x => x.CpaNotificationId);

            Property(x => x.CpaNotificationId).HasColumnName(@"CPANotificationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CpaNotificationTypeId).HasColumnName(@"CPANotificationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.Sent).HasColumnName(@"Sent").HasColumnType("bit").IsRequired();
            Property(x => x.SentDate).HasColumnName(@"SentDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OfferId).HasColumnName(@"OfferId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SubId).HasColumnName(@"SubId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CpaNotificationJobId).HasColumnName(@"CPANotificationJobId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.CpaNotificationJob).WithMany(b => b.CpaNotifications).HasForeignKey(c => c.CpaNotificationJobId).WillCascadeOnDelete(false); // FK_CPANotification_CPANotificationJob
            HasRequired(a => a.CpaNotificationType).WithMany(b => b.CpaNotifications).HasForeignKey(c => c.CpaNotificationTypeId).WillCascadeOnDelete(false); // FK_CPANotification_CPANotificationType
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CPANotificationJob
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CpaNotificationJobConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CpaNotificationJob>
    {
        public CpaNotificationJobConfiguration()
            : this("dbo")
        {
        }

        public CpaNotificationJobConfiguration(string schema)
        {
            ToTable("CPANotificationJob", schema);
            HasKey(x => x.CpaNotificationJobId);

            Property(x => x.CpaNotificationJobId).HasColumnName(@"CPANotificationJobId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CpaNotificationTypeId).HasColumnName(@"CPANotificationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.TimeStarted).HasColumnName(@"TimeStarted").HasColumnType("datetime").IsRequired();
            Property(x => x.TimeComplete).HasColumnName(@"TimeComplete").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.CpaNotificationType).WithMany(b => b.CpaNotificationJobs).HasForeignKey(c => c.CpaNotificationTypeId).WillCascadeOnDelete(false); // FK_CPANotificationJob_CPANotificationType
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CPANotificationNewSub
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CpaNotificationNewSubConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CpaNotificationNewSub>
    {
        public CpaNotificationNewSubConfiguration()
            : this("dbo")
        {
        }

        public CpaNotificationNewSubConfiguration(string schema)
        {
            ToTable("CPANotificationNewSub", schema);
            HasKey(x => x.CpaNotificationNewSubId);

            Property(x => x.CpaNotificationNewSubId).HasColumnName(@"CPANotificationNewSubId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.OfferId).HasColumnName(@"OfferId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SubId).HasColumnName(@"SubId").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.IsEstablished).HasColumnName(@"IsEstablished").HasColumnType("bit").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.LastRoiCheckpoint).HasColumnName(@"LastROICheckpoint").HasColumnType("int").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CPANotificationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class CpaNotificationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CpaNotificationType>
    {
        public CpaNotificationTypeConfiguration()
            : this("dbo")
        {
        }

        public CpaNotificationTypeConfiguration(string schema)
        {
            ToTable("CPANotificationType", schema);
            HasKey(x => x.CpaNotificationTypeId);

            Property(x => x.CpaNotificationTypeId).HasColumnName(@"CPANotificationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // DashboardOverlay
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DashboardOverlayConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DashboardOverlay>
    {
        public DashboardOverlayConfiguration()
            : this("dbo")
        {
        }

        public DashboardOverlayConfiguration(string schema)
        {
            ToTable("DashboardOverlay", schema);
            HasKey(x => x.DashboardOverlayId);

            Property(x => x.DashboardOverlayId).HasColumnName(@"DashboardOverlayID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(1000);
            Property(x => x.Startdate).HasColumnName(@"Startdate").HasColumnType("date").IsRequired();
            Property(x => x.Enddate).HasColumnName(@"Enddate").HasColumnType("date").IsRequired();
            Property(x => x.StartDateTime).HasColumnName(@"StartDateTime").HasColumnType("datetime").IsRequired();
            Property(x => x.EndDateTime).HasColumnName(@"EndDateTime").HasColumnType("datetime").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.Html).HasColumnName(@"Html").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // DashboardOverlayEmail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DashboardOverlayEmailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DashboardOverlayEmail>
    {
        public DashboardOverlayEmailConfiguration()
            : this("dbo")
        {
        }

        public DashboardOverlayEmailConfiguration(string schema)
        {
            ToTable("DashboardOverlayEmail", schema);
            HasKey(x => x.DashboardOverlayEmailId);

            Property(x => x.DashboardOverlayEmailId).HasColumnName(@"DashboardOverlayEmailID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DashboardOverlayId).HasColumnName(@"DashboardOverlayID").HasColumnType("int").IsRequired();
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Accept).HasColumnName(@"Accept").HasColumnType("bit").IsOptional();
            Property(x => x.Cancel).HasColumnName(@"Cancel").HasColumnType("bit").IsOptional();
            Property(x => x.Other).HasColumnName(@"Other").HasColumnType("bit").IsOptional();
            Property(x => x.Resolved).HasColumnName(@"Resolved").HasColumnType("bit").IsOptional();
            Property(x => x.ResolvedDate).HasColumnName(@"ResolvedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ViewedDate).HasColumnName(@"ViewedDate").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.DashboardOverlay).WithMany(b => b.DashboardOverlayEmails).HasForeignKey(c => c.DashboardOverlayId).WillCascadeOnDelete(false); // FK_DashboardOverlayEmail_DashboardOverlayEmail
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // DoiRotatingOffer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DoiRotatingOfferConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DoiRotatingOffer>
    {
        public DoiRotatingOfferConfiguration()
            : this("dbo")
        {
        }

        public DoiRotatingOfferConfiguration(string schema)
        {
            ToTable("DoiRotatingOffer", schema);
            HasKey(x => x.DoiRotatingOfferId);

            Property(x => x.DoiRotatingOfferId).HasColumnName(@"DoiRotatingOfferID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SmartEmailLinkConfigId).HasColumnName(@"SmartEmailLinkConfigID").HasColumnType("int").IsRequired();
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EducationCode
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class EducationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EducationCode>
    {
        public EducationCodeConfiguration()
            : this("dbo")
        {
        }

        public EducationCodeConfiguration(string schema)
        {
            ToTable("EducationCode", schema);
            HasKey(x => x.EducationCodeId);

            Property(x => x.EducationCodeId).HasColumnName(@"EducationCodeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // GeoLiteCity-Blocks
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GeoLiteCityBlockConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GeoLiteCityBlock>
    {
        public GeoLiteCityBlockConfiguration()
            : this("dbo")
        {
        }

        public GeoLiteCityBlockConfiguration(string schema)
        {
            ToTable("GeoLiteCity-Blocks", schema);
            HasKey(x => new { x.StartIpNum, x.EndIpNum, x.LocId });

            Property(x => x.StartIpNum).HasColumnName(@"startIpNum").HasColumnType("numeric").IsRequired().HasPrecision(18,0).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndIpNum).HasColumnName(@"endIpNum").HasColumnType("numeric").IsRequired().HasPrecision(18,0).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocId).HasColumnName(@"locId").HasColumnType("numeric").IsRequired().HasPrecision(18,0).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // GeoLiteCity-Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GeoLiteCityLocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GeoLiteCityLocation>
    {
        public GeoLiteCityLocationConfiguration()
            : this("dbo")
        {
        }

        public GeoLiteCityLocationConfiguration(string schema)
        {
            ToTable("GeoLiteCity-Location", schema);
            HasKey(x => x.LocId);

            Property(x => x.LocId).HasColumnName(@"locId").HasColumnType("numeric").IsRequired().HasPrecision(18,0).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Country).HasColumnName(@"country").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Region).HasColumnName(@"region").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.City).HasColumnName(@"city").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"postalCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Latitude).HasColumnName(@"latitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Longitude).HasColumnName(@"longitude").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.MetroCode).HasColumnName(@"metroCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.AreaCode).HasColumnName(@"areaCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // InstructionBullet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class InstructionBulletConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InstructionBullet>
    {
        public InstructionBulletConfiguration()
            : this("dbo")
        {
        }

        public InstructionBulletConfiguration(string schema)
        {
            ToTable("InstructionBullet", schema);
            HasKey(x => x.InstructionBulletId);

            Property(x => x.InstructionBulletId).HasColumnName(@"InstructionBulletID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.InstructionId).HasColumnName(@"InstructionID").HasColumnType("int").IsRequired();
            Property(x => x.Text).HasColumnName(@"Text").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.Sequence).HasColumnName(@"Sequence").HasColumnType("int").IsRequired();
            Property(x => x.BulletType).HasColumnName(@"BulletType").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.CbrSurveyInstruction).WithMany(b => b.InstructionBullets).HasForeignKey(c => c.InstructionId).WillCascadeOnDelete(false); // FK_InstructionBullet_CBRSurveyInstruction
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // IPCountry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpCountryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IpCountry>
    {
        public IpCountryConfiguration()
            : this("dbo")
        {
        }

        public IpCountryConfiguration(string schema)
        {
            ToTable("IPCountry", schema);
            HasKey(x => new { x.StartIp, x.EndIp, x.StartNum, x.EndNum, x.CountryId, x.CountryName });

            Property(x => x.StartIp).HasColumnName(@"StartIP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndIp).HasColumnName(@"EndIP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartNum).HasColumnName(@"StartNum").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndNum).HasColumnName(@"EndNum").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // IPCountryOld
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpCountryOldConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IpCountryOld>
    {
        public IpCountryOldConfiguration()
            : this("dbo")
        {
        }

        public IpCountryOldConfiguration(string schema)
        {
            ToTable("IPCountryOld", schema);
            HasKey(x => new { x.StartIp, x.EndIp, x.StartNum, x.EndNum, x.CountryId, x.CountryName });

            Property(x => x.StartIp).HasColumnName(@"StartIP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndIp).HasColumnName(@"EndIP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartNum).HasColumnName(@"StartNum").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndNum).HasColumnName(@"EndNum").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // IPCountyBackup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpCountyBackupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IpCountyBackup>
    {
        public IpCountyBackupConfiguration()
            : this("dbo")
        {
        }

        public IpCountyBackupConfiguration(string schema)
        {
            ToTable("IPCountyBackup", schema);
            HasKey(x => new { x.StartIp, x.EndIp, x.StartNum, x.EndNum, x.CountryId, x.CountryName });

            Property(x => x.StartIp).HasColumnName(@"StartIP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndIp).HasColumnName(@"EndIP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartNum).HasColumnName(@"StartNum").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndNum).HasColumnName(@"EndNum").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // IPCountyNewBackup
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpCountyNewBackupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IpCountyNewBackup>
    {
        public IpCountyNewBackupConfiguration()
            : this("dbo")
        {
        }

        public IpCountyNewBackupConfiguration(string schema)
        {
            ToTable("IPCountyNewBackup", schema);
            HasKey(x => new { x.StartIp, x.EndIp, x.StartNum, x.EndNum, x.CountryId, x.CountryName });

            Property(x => x.StartIp).HasColumnName(@"StartIP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndIp).HasColumnName(@"EndIP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(15).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartNum).HasColumnName(@"StartNum").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndNum).HasColumnName(@"EndNum").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // IpLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IpLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<IpLog>
    {
        public IpLogConfiguration()
            : this("dbo")
        {
        }

        public IpLogConfiguration(string schema)
        {
            ToTable("IpLog", schema);
            HasKey(x => x.IpLogId);

            Property(x => x.IpLogId).HasColumnName(@"IpLogID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // JobData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class JobDataConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<JobData>
    {
        public JobDataConfiguration()
            : this("dbo")
        {
        }

        public JobDataConfiguration(string schema)
        {
            ToTable("JobData", schema);
            HasKey(x => x.JobDataId);

            Property(x => x.JobDataId).HasColumnName(@"JobDataID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.St).HasColumnName(@"ST").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2);
            Property(x => x.State).HasColumnName(@"STATE").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OccCode).HasColumnName(@"OCC_CODE").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.OccTitle).HasColumnName(@"OCC_TITLE").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.AMean).HasColumnName(@"A_MEAN").HasColumnType("float").IsOptional();
            Property(x => x.AMedian).HasColumnName(@"A_MEDIAN").HasColumnType("float").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Language
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class LanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Language>
    {
        public LanguageConfiguration()
            : this("dbo")
        {
        }

        public LanguageConfiguration(string schema)
        {
            ToTable("Language", schema);
            HasKey(x => new { x.LanguageId, x.Name });

            Property(x => x.LanguageId).HasColumnName(@"LanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // LeadReversal
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class LeadReversalConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LeadReversal>
    {
        public LeadReversalConfiguration()
            : this("dbo")
        {
        }

        public LeadReversalConfiguration(string schema)
        {
            ToTable("LeadReversal", schema);
            HasKey(x => x.AutoId);

            Property(x => x.AutoId).HasColumnName(@"AutoID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CostPerLead).HasColumnName(@"CostPerLead").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.NumberOfLeads).HasColumnName(@"NumberOfLeads").HasColumnType("int").IsRequired();
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.EffectiveDate).HasColumnName(@"EffectiveDate").HasColumnType("datetime").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // LoggedInFromClik
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class LoggedInFromClikConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LoggedInFromClik>
    {
        public LoggedInFromClikConfiguration()
            : this("dbo")
        {
        }

        public LoggedInFromClikConfiguration(string schema)
        {
            ToTable("LoggedInFromClik", schema);
            HasKey(x => x.LoggedInFromClikId);

            Property(x => x.LoggedInFromClikId).HasColumnName(@"LoggedInFromClikID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // MobilelLead
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class MobilelLeadConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MobilelLead>
    {
        public MobilelLeadConfiguration()
            : this("dbo")
        {
        }

        public MobilelLeadConfiguration(string schema)
        {
            ToTable("MobilelLead", schema);
            HasKey(x => x.MobileLeadId);

            Property(x => x.MobileLeadId).HasColumnName(@"MobileLeadId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RouterContactId).HasColumnName(@"RouterContactID").HasColumnType("int").IsOptional();
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Dob).HasColumnName(@"Dob").HasColumnType("date").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(15);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.RouterContact).WithMany(b => b.MobilelLeads).HasForeignKey(c => c.RouterContactId).WillCascadeOnDelete(false); // FK_MobilelLead_RouterContact
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Occupation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OccupationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Occupation>
    {
        public OccupationConfiguration()
            : this("dbo")
        {
        }

        public OccupationConfiguration(string schema)
        {
            ToTable("Occupation", schema);
            HasKey(x => x.OccupationId);

            Property(x => x.OccupationId).HasColumnName(@"OccupationID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.OccupationCode).HasColumnName(@"OccupationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OccupationSectorId).HasColumnName(@"OccupationSectorID").HasColumnType("int").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OccupationEducation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OccupationEducationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OccupationEducation>
    {
        public OccupationEducationConfiguration()
            : this("dbo")
        {
        }

        public OccupationEducationConfiguration(string schema)
        {
            ToTable("OccupationEducation", schema);
            HasKey(x => x.OccupationEducationId);

            Property(x => x.OccupationEducationId).HasColumnName(@"OccupationEducationID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.OccupationCode).HasColumnName(@"OccupationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.EducationCodeId).HasColumnName(@"EducationCodeID").HasColumnType("int").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OccupationIncome
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OccupationIncomeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OccupationIncome>
    {
        public OccupationIncomeConfiguration()
            : this("dbo")
        {
        }

        public OccupationIncomeConfiguration(string schema)
        {
            ToTable("OccupationIncome", schema);
            HasKey(x => x.OccupationIncome_);

            Property(x => x.OccupationIncome_).HasColumnName(@"OccupationIncome").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.St).HasColumnName(@"ST").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2);
            Property(x => x.State).HasColumnName(@"STATE").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OccCode).HasColumnName(@"OCC_CODE").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.OccTitle).HasColumnName(@"OCC_TITLE").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.AMean).HasColumnName(@"A_MEAN").HasColumnType("float").IsOptional();
            Property(x => x.AMedian).HasColumnName(@"A_MEDIAN").HasColumnType("float").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OccupationSector
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OccupationSectorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OccupationSector>
    {
        public OccupationSectorConfiguration()
            : this("dbo")
        {
        }

        public OccupationSectorConfiguration(string schema)
        {
            ToTable("OccupationSector", schema);
            HasKey(x => x.OccupationSectorId);

            Property(x => x.OccupationSectorId).HasColumnName(@"OccupationSectorID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Offer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OfferConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Offer>
    {
        public OfferConfiguration()
            : this("dbo")
        {
        }

        public OfferConfiguration(string schema)
        {
            ToTable("Offer", schema);
            HasKey(x => new { x.OfferId, x.Type });

            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Abbreviation).HasColumnName(@"Abbreviation").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.LanguageId).HasColumnName(@"LanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OptInEmailLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInEmailLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OptInEmailLog>
    {
        public OptInEmailLogConfiguration()
            : this("dbo")
        {
        }

        public OptInEmailLogConfiguration(string schema)
        {
            ToTable("OptInEmailLog", schema);
            HasKey(x => new { x.EmailId, x.CountryId, x.LanguageId, x.EmailAddress, x.SendOnDay, x.DateSent });

            Property(x => x.EmailId).HasColumnName(@"EmailID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LanguageId).HasColumnName(@"LanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SendOnDay).HasColumnName(@"SendOnDay").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateSent).HasColumnName(@"DateSent").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OptInEmailVerbage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInEmailVerbageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OptInEmailVerbage>
    {
        public OptInEmailVerbageConfiguration()
            : this("dbo")
        {
        }

        public OptInEmailVerbageConfiguration(string schema)
        {
            ToTable("OptInEmailVerbage", schema);
            HasKey(x => new { x.EmailId, x.LanguageId, x.OfferId });

            Property(x => x.EmailId).HasColumnName(@"EmailID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LanguageId).HasColumnName(@"LanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FromName).HasColumnName(@"FromName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.FromAddress).HasColumnName(@"FromAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.HtmlBody).HasColumnName(@"HTMLBody").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.SendOnDay).HasColumnName(@"SendOnDay").HasColumnType("int").IsRequired();
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OptInEmailVerbageListrakQueue
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInEmailVerbageListrakQueueConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OptInEmailVerbageListrakQueue>
    {
        public OptInEmailVerbageListrakQueueConfiguration()
            : this("dbo")
        {
        }

        public OptInEmailVerbageListrakQueueConfiguration(string schema)
        {
            ToTable("OptInEmailVerbageListrakQueue", schema);
            HasKey(x => new { x.OfferId, x.SendOnDay });

            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SendOnDay).HasColumnName(@"SendOnDay").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OptInEmailVerbageTestSend
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInEmailVerbageTestSendConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OptInEmailVerbageTestSend>
    {
        public OptInEmailVerbageTestSendConfiguration()
            : this("dbo")
        {
        }

        public OptInEmailVerbageTestSendConfiguration(string schema)
        {
            ToTable("OptInEmailVerbageTestSend", schema);
            HasKey(x => new { x.EmailId, x.EmailAddress, x.OfferId, x.SubId, x.AffiliateId, x.Name, x.Ip, x.InsertDate });

            Property(x => x.EmailId).HasColumnName(@"EmailID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OptInLead
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInLeadConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OptInLead>
    {
        public OptInLeadConfiguration()
            : this("dbo")
        {
        }

        public OptInLeadConfiguration(string schema)
        {
            ToTable("OptInLead", schema);
            HasKey(x => x.EmailAddress);

            Property(x => x.SiteVertical).HasColumnName(@"SiteVertical").HasColumnType("int").IsRequired();
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Salutation).HasColumnName(@"Salutation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SmartPhone).HasColumnName(@"SmartPhone").HasColumnType("bit").IsOptional();
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Income).HasColumnName(@"Income").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.HomeOwnership).HasColumnName(@"HomeOwnership").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Children).HasColumnName(@"Children").HasColumnType("int").IsOptional();
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.SelectedLanguageId).HasColumnName(@"SelectedLanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.OptInDate).HasColumnName(@"OptInDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastRunDate).HasColumnName(@"LastRunDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastSendOnDay).HasColumnName(@"LastSendOnDay").HasColumnType("int").IsRequired();
            Property(x => x.OptOutDate).HasColumnName(@"OptOutDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DoNotSendTo).HasColumnName(@"DoNotSendTo").HasColumnType("bit").IsRequired();
            Property(x => x.ConfirmedDate).HasColumnName(@"ConfirmedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ThirdPartyListsUpdated).HasColumnName(@"ThirdPartyListsUpdated").HasColumnType("bit").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Uid).HasColumnName(@"UID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Clik).HasColumnName(@"Clik").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PostQueue
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class PostQueueConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostQueue>
    {
        public PostQueueConfiguration()
            : this("dbo")
        {
        }

        public PostQueueConfiguration(string schema)
        {
            ToTable("PostQueue", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CoregId).HasColumnName(@"CoregID").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Method).HasColumnName(@"Method").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(4);
            Property(x => x.PostUrl).HasColumnName(@"PostURL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.PostData).HasColumnName(@"PostData").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.OkValue).HasColumnName(@"OKValue").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.IgnoreValues).HasColumnName(@"IgnoreValues").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ReturnString).HasColumnName(@"ReturnString").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.ProcessedDate).HasColumnName(@"ProcessedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProcessedSurveyIDs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ProcessedSurveyIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProcessedSurveyId>
    {
        public ProcessedSurveyIdConfiguration()
            : this("dbo")
        {
        }

        public ProcessedSurveyIdConfiguration(string schema)
        {
            ToTable("ProcessedSurveyIDs", schema);
            HasKey(x => new { x.SurveyId, x.OldId });

            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OldId).HasColumnName(@"OldID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Referral
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ReferralConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Referral>
    {
        public ReferralConfiguration()
            : this("dbo")
        {
        }

        public ReferralConfiguration(string schema)
        {
            ToTable("Referral", schema);
            HasKey(x => new { x.ReferredEmailAddress, x.OfferId });

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.ReferredEmailAddress).HasColumnName(@"ReferredEmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailMessage).HasColumnName(@"EmailMessage").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.ReferralConversionDate).HasColumnName(@"ReferralConversionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ReferralDate).HasColumnName(@"ReferralDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ReUploadElabs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ReUploadElabConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReUploadElab>
    {
        public ReUploadElabConfiguration()
            : this("dbo")
        {
        }

        public ReUploadElabConfiguration(string schema)
        {
            ToTable("ReUploadElabs", schema);
            HasKey(x => x.LastProcessedDate);

            Property(x => x.LastProcessedDate).HasColumnName(@"LastProcessedDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterAction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterActionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterAction>
    {
        public RouterActionConfiguration()
            : this("dbo")
        {
        }

        public RouterActionConfiguration(string schema)
        {
            ToTable("RouterAction", schema);
            HasKey(x => x.RouterActionId);

            Property(x => x.RouterActionId).HasColumnName(@"RouterActionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RouterContactId).HasColumnName(@"RouterContactId").HasColumnType("int").IsRequired();
            Property(x => x.RouterHostId).HasColumnName(@"RouterHostId").HasColumnType("int").IsRequired();
            Property(x => x.RouterSurveyYourSurveyId).HasColumnName(@"RouterSurveyYourSurveyId").HasColumnType("int").IsOptional();
            Property(x => x.RouterSurveyPrecisionSampleId).HasColumnName(@"RouterSurveyPrecisionSampleId").HasColumnType("int").IsOptional();
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.TransactionId).HasColumnName(@"TransactionId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("date").IsRequired();
            Property(x => x.PostedUrl).HasColumnName(@"PostedUrl").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);

            // Foreign keys
            HasOptional(a => a.RouterSurveyPrecisionSample).WithMany(b => b.RouterActions).HasForeignKey(c => c.RouterSurveyPrecisionSampleId).WillCascadeOnDelete(false); // FK_RouterAction_RouterSurveyPrecisionSample
            HasOptional(a => a.RouterSurveyYourSurvey).WithMany(b => b.RouterActions).HasForeignKey(c => c.RouterSurveyYourSurveyId).WillCascadeOnDelete(false); // FK_RouterAction_RouterSurveyYourSurvey
            HasRequired(a => a.RouterContact).WithMany(b => b.RouterActions).HasForeignKey(c => c.RouterContactId).WillCascadeOnDelete(false); // FK_RouterAction_RouterContact
            HasRequired(a => a.RouterHost).WithMany(b => b.RouterActions).HasForeignKey(c => c.RouterHostId).WillCascadeOnDelete(false); // FK_RouterAction_RouterHost
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterContact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterContact>
    {
        public RouterContactConfiguration()
            : this("dbo")
        {
        }

        public RouterContactConfiguration(string schema)
        {
            ToTable("RouterContact", schema);
            HasKey(x => x.RouterContactId);

            Property(x => x.RouterContactId).HasColumnName(@"RouterContactId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.UniqueId).HasColumnName(@"UniqueId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            Property(x => x.DailySurveyEmailSentDate).HasColumnName(@"DailySurveyEmailSentDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Removed).HasColumnName(@"Removed").HasColumnType("bit").IsOptional();
            Property(x => x.ErrorOut).HasColumnName(@"ErrorOut").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterContactPrecisionSample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterContactPrecisionSampleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterContactPrecisionSample>
    {
        public RouterContactPrecisionSampleConfiguration()
            : this("dbo")
        {
        }

        public RouterContactPrecisionSampleConfiguration(string schema)
        {
            ToTable("RouterContactPrecisionSample", schema);
            HasKey(x => x.RouterContactPrecisionSampleId);

            Property(x => x.RouterContactPrecisionSampleId).HasColumnName(@"RouterContactPrecisionSampleId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RouterContactId).HasColumnName(@"RouterContactId").HasColumnType("int").IsRequired();
            Property(x => x.UserGuid).HasColumnName(@"UserGuid").HasColumnType("uniqueidentifier").IsRequired();

            // Foreign keys
            HasRequired(a => a.RouterContact).WithMany(b => b.RouterContactPrecisionSamples).HasForeignKey(c => c.RouterContactId).WillCascadeOnDelete(false); // FK_RouterContactPrecisionSample_RouterContact
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterHost
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterHostConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterHost>
    {
        public RouterHostConfiguration()
            : this("dbo")
        {
        }

        public RouterHostConfiguration(string schema)
        {
            ToTable("RouterHost", schema);
            HasKey(x => x.RouterHostId);

            Property(x => x.RouterHostId).HasColumnName(@"RouterHostId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterPostBackPrecisionSample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterPostBackPrecisionSampleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterPostBackPrecisionSample>
    {
        public RouterPostBackPrecisionSampleConfiguration()
            : this("dbo")
        {
        }

        public RouterPostBackPrecisionSampleConfiguration(string schema)
        {
            ToTable("RouterPostBackPrecisionSample", schema);
            HasKey(x => x.RouterPostbackPrecisionSampleId);

            Property(x => x.RouterPostbackPrecisionSampleId).HasColumnName(@"RouterPostbackPrecisionSampleId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserGuid).HasColumnName(@"UserGuid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Reward).HasColumnName(@"Reward").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(1);
            Property(x => x.Reversed).HasColumnName(@"Reversed").HasColumnType("bit").IsRequired();
            Property(x => x.ProjectId).HasColumnName(@"ProjectId").HasColumnType("int").IsRequired();
            Property(x => x.Gross).HasColumnName(@"Gross").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.PostbackDate).HasColumnName(@"PostbackDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ReverseDate).HasColumnName(@"ReverseDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Processed).HasColumnName(@"Processed").HasColumnType("bit").IsOptional();
            Property(x => x.ProcessedDate).HasColumnName(@"ProcessedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TransactionId).HasColumnName(@"TransactionId").HasColumnType("uniqueidentifier").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterPostBackYourSurveys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterPostBackYourSurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterPostBackYourSurvey>
    {
        public RouterPostBackYourSurveyConfiguration()
            : this("dbo")
        {
        }

        public RouterPostBackYourSurveyConfiguration(string schema)
        {
            ToTable("RouterPostBackYourSurveys", schema);
            HasKey(x => x.RouterPostBackYourSurveysId);

            Property(x => x.RouterPostBackYourSurveysId).HasColumnName(@"RouterPostBackYourSurveysId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TransactionId).HasColumnName(@"TransactionId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.TransactionIdYs).HasColumnName(@"TransactionIdYS").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SignatureMd5).HasColumnName(@"signatureMd5").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.PostbackDate).HasColumnName(@"PostbackDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Processed).HasColumnName(@"Processed").HasColumnType("bit").IsOptional();
            Property(x => x.ProcessedDate).HasColumnName(@"ProcessedDate").HasColumnType("datetime").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterStatusPrecisionSamples
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterStatusPrecisionSampleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterStatusPrecisionSample>
    {
        public RouterStatusPrecisionSampleConfiguration()
            : this("dbo")
        {
        }

        public RouterStatusPrecisionSampleConfiguration(string schema)
        {
            ToTable("RouterStatusPrecisionSamples", schema);
            HasKey(x => new { x.Email, x.Name, x.RewardValue, x.Status, x.PostbackDate, x.TransactionId });

            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RewardValue).HasColumnName(@"RewardValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(1).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostbackDate).HasColumnName(@"PostbackDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Processed).HasColumnName(@"Processed").HasColumnType("bit").IsOptional();
            Property(x => x.ProcessedDate).HasColumnName(@"ProcessedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.TransactionId).HasColumnName(@"TransactionId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterStatusYourSurveys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterStatusYourSurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterStatusYourSurvey>
    {
        public RouterStatusYourSurveyConfiguration()
            : this("dbo")
        {
        }

        public RouterStatusYourSurveyConfiguration(string schema)
        {
            ToTable("RouterStatusYourSurveys", schema);
            HasKey(x => new { x.Email, x.Name, x.Cpi, x.PostbackDate, x.TransactionId });

            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Cpi).HasColumnName(@"cpi").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PostbackDate).HasColumnName(@"PostbackDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Processed).HasColumnName(@"Processed").HasColumnType("bit").IsOptional();
            Property(x => x.ProcessedDate).HasColumnName(@"ProcessedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.TransactionId).HasColumnName(@"TransactionId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterSurveyPrecisionSample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterSurveyPrecisionSampleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterSurveyPrecisionSample>
    {
        public RouterSurveyPrecisionSampleConfiguration()
            : this("dbo")
        {
        }

        public RouterSurveyPrecisionSampleConfiguration(string schema)
        {
            ToTable("RouterSurveyPrecisionSample", schema);
            HasKey(x => x.RouterSurveyPrecisionSampleId);

            Property(x => x.RouterSurveyPrecisionSampleId).HasColumnName(@"RouterSurveyPrecisionSampleId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProjectId).HasColumnName(@"ProjectId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SurveyLength).HasColumnName(@"SurveyLength").HasColumnType("int").IsRequired();
            Property(x => x.GrossRevenue).HasColumnName(@"GrossRevenue").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.RewardValue).HasColumnName(@"RewardValue").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.TrafficType).HasColumnName(@"TrafficType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ConversionRate).HasColumnName(@"ConversionRate").HasColumnType("int").IsRequired();
            Property(x => x.VerityCheckRequired).HasColumnName(@"VerityCheckRequired").HasColumnType("bit").IsRequired();
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // RouterSurveyYourSurvey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterSurveyYourSurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RouterSurveyYourSurvey>
    {
        public RouterSurveyYourSurveyConfiguration()
            : this("dbo")
        {
        }

        public RouterSurveyYourSurveyConfiguration(string schema)
        {
            ToTable("RouterSurveyYourSurvey", schema);
            HasKey(x => x.RouterSurveyYourSurveyId);

            Property(x => x.RouterSurveyYourSurveyId).HasColumnName(@"RouterSurveyYourSurveyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Cpi).HasColumnName(@"Cpi").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.ConversionRate).HasColumnName(@"ConversionRate").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.Loi).HasColumnName(@"Loi").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.StudyType).HasColumnName(@"StudyType").HasColumnType("int").IsRequired();
            Property(x => x.RemainingCompletes).HasColumnName(@"RemainingCompletes").HasColumnType("int").IsRequired();
            Property(x => x.ProjectId).HasColumnName(@"ProjectId").HasColumnType("int").IsRequired();
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("date").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ScrubLead
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ScrubLeadConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScrubLead>
    {
        public ScrubLeadConfiguration()
            : this("dbo")
        {
        }

        public ScrubLeadConfiguration(string schema)
        {
            ToTable("ScrubLead", schema);
            HasKey(x => new { x.Id, x.EmailAddress, x.CountryId, x.SelectedLanguageId, x.InsertDate });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Salutation).HasColumnName(@"Salutation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SelectedLanguageId).HasColumnName(@"SelectedLanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(15);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ScrubReportConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ScrubReportConfigConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScrubReportConfig>
    {
        public ScrubReportConfigConfiguration()
            : this("dbo")
        {
        }

        public ScrubReportConfigConfiguration(string schema)
        {
            ToTable("ScrubReportConfig", schema);
            HasKey(x => x.AffiliateId);

            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Columns).HasColumnName(@"Columns").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.Delimiter).HasColumnName(@"Delimiter").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(3);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SiteBlacklist
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SiteBlacklistConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SiteBlacklist>
    {
        public SiteBlacklistConfiguration()
            : this("dbo")
        {
        }

        public SiteBlacklistConfiguration(string schema)
        {
            ToTable("SiteBlacklist", schema);
            HasKey(x => new { x.EmailAddress, x.OfferId });

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PageVerbiage).HasColumnName(@"PageVerbiage").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(511);
            Property(x => x.RedirTimeout).HasColumnName(@"RedirTimeout").HasColumnType("int").IsRequired();
            Property(x => x.RedirUrl).HasColumnName(@"RedirURL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SiteBlacklistIpAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SiteBlacklistIpAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SiteBlacklistIpAddress>
    {
        public SiteBlacklistIpAddressConfiguration()
            : this("dbo")
        {
        }

        public SiteBlacklistIpAddressConfiguration(string schema)
        {
            ToTable("SiteBlacklistIpAddress", schema);
            HasKey(x => new { x.Id, x.IpAddress, x.RedirTimeout, x.RedirUrl });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PageVerbiage).HasColumnName(@"PageVerbiage").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(511);
            Property(x => x.RedirTimeout).HasColumnName(@"RedirTimeout").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RedirUrl).HasColumnName(@"RedirURL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartEmailLinkClick
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartEmailLinkClickConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartEmailLinkClick>
    {
        public SmartEmailLinkClickConfiguration()
            : this("dbo")
        {
        }

        public SmartEmailLinkClickConfiguration(string schema)
        {
            ToTable("SmartEmailLinkClick", schema);
            HasKey(x => new { x.Id, x.EmailAddress });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateClicked).HasColumnName(@"DateClicked").HasColumnType("datetime").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartEmailLinkConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartEmailLinkConfigConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartEmailLinkConfig>
    {
        public SmartEmailLinkConfigConfiguration()
            : this("dbo")
        {
        }

        public SmartEmailLinkConfigConfiguration(string schema)
        {
            ToTable("SmartEmailLinkConfig", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AffiliateCampaignName).HasColumnName(@"AffiliateCampaignName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(512);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(400);
            Property(x => x.ExitUrl).HasColumnName(@"ExitURL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(400);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("int").IsRequired();
            Property(x => x.Desirability).HasColumnName(@"Desirability").HasColumnType("float").IsRequired();
            Property(x => x.Cpa).HasColumnName(@"CPA").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.Cap).HasColumnName(@"Cap").HasColumnType("int").IsRequired();
            Property(x => x.CpcOffer).HasColumnName(@"CPCOffer").HasColumnType("bit").IsRequired();
            Property(x => x.SendCookieId).HasColumnName(@"SendCookieID").HasColumnType("bit").IsRequired();
            Property(x => x.SurveyPanel).HasColumnName(@"SurveyPanel").HasColumnType("int").IsRequired();
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            Property(x => x.ClinicalTrial).HasColumnName(@"ClinicalTrial").HasColumnType("int").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartEmailLinkFields
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartEmailLinkFieldConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartEmailLinkField>
    {
        public SmartEmailLinkFieldConfiguration()
            : this("dbo")
        {
        }

        public SmartEmailLinkFieldConfiguration(string schema)
        {
            ToTable("SmartEmailLinkFields", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartEmailLinkTarget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartEmailLinkTargetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartEmailLinkTarget>
    {
        public SmartEmailLinkTargetConfiguration()
            : this("dbo")
        {
        }

        public SmartEmailLinkTargetConfiguration(string schema)
        {
            ToTable("SmartEmailLinkTarget", schema);
            HasKey(x => new { x.Id, x.LinkId, x.QuestionId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LinkId).HasColumnName(@"LinkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Operator).HasColumnName(@"Operator").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.RequiredForInclusion).HasColumnName(@"RequiredForInclusion").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartExitLinkConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartExitLinkConfigConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartExitLinkConfig>
    {
        public SmartExitLinkConfigConfiguration()
            : this("dbo")
        {
        }

        public SmartExitLinkConfigConfiguration(string schema)
        {
            ToTable("SmartExitLinkConfig", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.AffiliateCampaignName).HasColumnName(@"AffiliateCampaignName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(512);
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(400);
            Property(x => x.ExitUrl).HasColumnName(@"ExitURL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(400);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("int").IsRequired();
            Property(x => x.Desirability).HasColumnName(@"Desirability").HasColumnType("float").IsRequired();
            Property(x => x.Cpa).HasColumnName(@"CPA").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.Cap).HasColumnName(@"Cap").HasColumnType("int").IsRequired();
            Property(x => x.CpcOffer).HasColumnName(@"CPCOffer").HasColumnType("bit").IsRequired();
            Property(x => x.SendCookieId).HasColumnName(@"SendCookieID").HasColumnType("bit").IsRequired();
            Property(x => x.SurveyPanel).HasColumnName(@"SurveyPanel").HasColumnType("int").IsRequired();
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
            Property(x => x.ClinicalTrial).HasColumnName(@"ClinicalTrial").HasColumnType("int").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartExitLinkFields
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartExitLinkFieldConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartExitLinkField>
    {
        public SmartExitLinkFieldConfiguration()
            : this("dbo")
        {
        }

        public SmartExitLinkFieldConfiguration(string schema)
        {
            ToTable("SmartExitLinkFields", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartExitLinkTarget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartExitLinkTargetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartExitLinkTarget>
    {
        public SmartExitLinkTargetConfiguration()
            : this("dbo")
        {
        }

        public SmartExitLinkTargetConfiguration(string schema)
        {
            ToTable("SmartExitLinkTarget", schema);
            HasKey(x => new { x.Id, x.LinkId, x.QuestionId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LinkId).HasColumnName(@"LinkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Operator).HasColumnName(@"Operator").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.RequiredForInclusion).HasColumnName(@"RequiredForInclusion").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartLinkAILog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartLinkAiLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartLinkAiLog>
    {
        public SmartLinkAiLogConfiguration()
            : this("dbo")
        {
        }

        public SmartLinkAiLogConfiguration(string schema)
        {
            ToTable("SmartLinkAILog", schema);
            HasKey(x => new { x.AutoId, x.LinkId, x.Epi, x.PriorityFrom, x.PriorityTo, x.ChangeType, x.SmartLinkSystem, x.DateChanged });

            Property(x => x.AutoId).HasColumnName(@"AutoID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LinkId).HasColumnName(@"LinkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Epi).HasColumnName(@"EPI").HasColumnType("float").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PriorityFrom).HasColumnName(@"PriorityFrom").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PriorityTo).HasColumnName(@"PriorityTo").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ChangeType).HasColumnName(@"ChangeType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SmartLinkSystem).HasColumnName(@"SmartLinkSystem").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateChanged).HasColumnName(@"DateChanged").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartLinkLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartLinkLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartLinkLog>
    {
        public SmartLinkLogConfiguration()
            : this("dbo")
        {
        }

        public SmartLinkLogConfiguration(string schema)
        {
            ToTable("SmartLinkLog", schema);
            HasKey(x => new { x.Id, x.LinkId, x.EmailAddress, x.SmartLinkSystem, x.Confirmed, x.DateSent });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LinkId).HasColumnName(@"LinkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Cpa).HasColumnName(@"CPA").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.SmartLinkSystem).HasColumnName(@"SmartLinkSystem").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateSent).HasColumnName(@"DateSent").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateConfirmed).HasColumnName(@"DateConfirmed").HasColumnType("datetime").IsOptional();
            Property(x => x.ReferringUrl).HasColumnName(@"ReferringURL").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(511);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartWebLinkConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartWebLinkConfigConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartWebLinkConfig>
    {
        public SmartWebLinkConfigConfiguration()
            : this("dbo")
        {
        }

        public SmartWebLinkConfigConfiguration(string schema)
        {
            ToTable("SmartWebLinkConfig", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ExitUrl).HasColumnName(@"ExitURL").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("int").IsRequired();
            Property(x => x.Cap).HasColumnName(@"Cap").HasColumnType("int").IsRequired();
            Property(x => x.SendCookieId).HasColumnName(@"SendCookieID").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartWebLinkFields
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartWebLinkFieldConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartWebLinkField>
    {
        public SmartWebLinkFieldConfiguration()
            : this("dbo")
        {
        }

        public SmartWebLinkFieldConfiguration(string schema)
        {
            ToTable("SmartWebLinkFields", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartWebLinkLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartWebLinkLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartWebLinkLog>
    {
        public SmartWebLinkLogConfiguration()
            : this("dbo")
        {
        }

        public SmartWebLinkLogConfiguration(string schema)
        {
            ToTable("SmartWebLinkLog", schema);
            HasKey(x => new { x.Id, x.LinkId, x.EmailAddress, x.DateSent });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LinkId).HasColumnName(@"LinkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Confirmed).HasColumnName(@"Confirmed").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            Property(x => x.DateSent).HasColumnName(@"DateSent").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DateConfirmed).HasColumnName(@"DateConfirmed").HasColumnType("datetime").IsOptional();
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(4);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SmartWebLinkTarget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SmartWebLinkTargetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SmartWebLinkTarget>
    {
        public SmartWebLinkTargetConfiguration()
            : this("dbo")
        {
        }

        public SmartWebLinkTargetConfiguration(string schema)
        {
            ToTable("SmartWebLinkTarget", schema);
            HasKey(x => new { x.Id, x.LinkId, x.QuestionId });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LinkId).HasColumnName(@"LinkID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuestionId).HasColumnName(@"QuestionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Operator).HasColumnName(@"Operator").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.RequiredForInclusion).HasColumnName(@"RequiredForInclusion").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // States
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class StateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<State>
    {
        public StateConfiguration()
            : this("dbo")
        {
        }

        public StateConfiguration(string schema)
        {
            ToTable("States", schema);
            HasKey(x => x.StateId);

            Property(x => x.StateId).HasColumnName(@"StateId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.St).HasColumnName(@"ST").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2);
            Property(x => x.Statename).HasColumnName(@"Statename").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // UserNews
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class UserNewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserNew>
    {
        public UserNewConfiguration()
            : this("dbo")
        {
        }

        public UserNewConfiguration(string schema)
        {
            ToTable("UserNews", schema);
            HasKey(x => x.UserNewsId);

            Property(x => x.UserNewsId).HasColumnName(@"UserNewsID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.MessageType).HasColumnName(@"MessageType").HasColumnType("int").IsRequired();
            Property(x => x.MessageDateTime).HasColumnName(@"MessageDateTime").HasColumnType("datetime").IsRequired();
            Property(x => x.MessageDate).HasColumnName(@"MessageDate").HasColumnType("date").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // VerifyZipFailure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VerifyZipFailureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VerifyZipFailure>
    {
        public VerifyZipFailureConfiguration()
            : this("dbo")
        {
        }

        public VerifyZipFailureConfiguration(string schema)
        {
            ToTable("VerifyZipFailure", schema);
            HasKey(x => x.VerifyZipFailureId);

            Property(x => x.VerifyZipFailureId).HasColumnName(@"VerifyZipFailureId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Street).HasColumnName(@"Street").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(500);
            Property(x => x.IpAddress).HasColumnName(@"IpAddress").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.IpVerifyResultJson).HasColumnName(@"IpVerifyResultJson").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1000);
            Property(x => x.ZipLookupResultJson).HasColumnName(@"ZipLookupResultJson").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1000);
            Property(x => x.InvalidIp).HasColumnName(@"InvalidIP").HasColumnType("bit").IsRequired();
            Property(x => x.InvalidZip).HasColumnName(@"InvalidZip").HasColumnType("bit").IsRequired();
            Property(x => x.InValidAddress).HasColumnName(@"InValidAddress").HasColumnType("bit").IsRequired();
            Property(x => x.NoMatch).HasColumnName(@"NoMatch").HasColumnType("bit").IsRequired();
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            Property(x => x.IrreputableIp).HasColumnName(@"IrreputableIP").HasColumnType("bit").IsRequired();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwCBRSurveyStatusWithPending
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwCbrSurveyStatusWithPendingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwCbrSurveyStatusWithPending>
    {
        public VwCbrSurveyStatusWithPendingConfiguration()
            : this("dbo")
        {
        }

        public VwCbrSurveyStatusWithPendingConfiguration(string schema)
        {
            ToTable("vwCBRSurveyStatusWithPending", schema);
            HasKey(x => new { x.IsPending, x.Type, x.Id, x.EmailAddress, x.SurveyId, x.PayoutValue, x.ReceiveValue, x.StatusId, x.InsertDate, x.Title });

            Property(x => x.EarningsClearedDate).HasColumnName(@"EarningsClearedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.IsPending).HasColumnName(@"IsPending").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PayoutValue).HasColumnName(@"PayoutValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ReceiveValue).HasColumnName(@"ReceiveValue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StatusId).HasColumnName(@"StatusID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DtCookieId).HasColumnName(@"DTCookieID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(32);
            Property(x => x.RandomId).HasColumnName(@"RandomID").HasColumnType("int").IsOptional();
            Property(x => x.AffCookieId).HasColumnName(@"AffCookieID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CompletedDate).HasColumnName(@"CompletedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DeniedDate).HasColumnName(@"DeniedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(8000);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(511).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwDebugIP
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwDebugIpConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwDebugIp>
    {
        public VwDebugIpConfiguration()
            : this("dbo")
        {
        }

        public VwDebugIpConfiguration(string schema)
        {
            ToTable("vwDebugIP", schema);
            HasKey(x => new { x.SiteVertical, x.EmailAddress, x.CountryId, x.SelectedLanguageId, x.OptInDate, x.LastRunDate, x.LastSendOnDay, x.DoNotSendTo, x.ThirdPartyListsUpdated, x.InsertDate });

            Property(x => x.SiteVertical).HasColumnName(@"SiteVertical").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Salutation).HasColumnName(@"Salutation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SmartPhone).HasColumnName(@"SmartPhone").HasColumnType("bit").IsOptional();
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Income).HasColumnName(@"Income").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.HomeOwnership).HasColumnName(@"HomeOwnership").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Children).HasColumnName(@"Children").HasColumnType("int").IsOptional();
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SelectedLanguageId).HasColumnName(@"SelectedLanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptInDate).HasColumnName(@"OptInDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastRunDate).HasColumnName(@"LastRunDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastSendOnDay).HasColumnName(@"LastSendOnDay").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptOutDate).HasColumnName(@"OptOutDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DoNotSendTo).HasColumnName(@"DoNotSendTo").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ConfirmedDate).HasColumnName(@"ConfirmedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ThirdPartyListsUpdated).HasColumnName(@"ThirdPartyListsUpdated").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(15);
            Property(x => x.Uid).HasColumnName(@"UID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Clik).HasColumnName(@"Clik").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwJobCodes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwJobCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwJobCode>
    {
        public VwJobCodeConfiguration()
            : this("dbo")
        {
        }

        public VwJobCodeConfiguration(string schema)
        {
            ToTable("vwJobCodes", schema);
            HasKey(x => new { x.CbrJobCodeId, x.OccupationCode, x.CbrQuestionDropdownId, x.Active, x.Answer });

            Property(x => x.CbrJobCodeId).HasColumnName(@"CBRJobCodeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OccupationCode).HasColumnName(@"OccupationCode").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CbrQuestionDropdownId).HasColumnName(@"CBRQuestionDropdownID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Answer).HasColumnName(@"Answer").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwOptInLeadKeys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwOptInLeadKeyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwOptInLeadKey>
    {
        public VwOptInLeadKeyConfiguration()
            : this("dbo")
        {
        }

        public VwOptInLeadKeyConfiguration(string schema)
        {
            ToTable("vwOptInLeadKeys", schema);
            HasKey(x => new { x.EmailAddress, x.CountryId, x.InsertDate });

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Clik).HasColumnName(@"Clik").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwOptInLeadPJDegree
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwOptInLeadPjDegreeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwOptInLeadPjDegree>
    {
        public VwOptInLeadPjDegreeConfiguration()
            : this("dbo")
        {
        }

        public VwOptInLeadPjDegreeConfiguration(string schema)
        {
            ToTable("vwOptInLeadPJDegree", schema);
            HasKey(x => new { x.SiteVertical, x.EmailAddress, x.CountryId, x.SelectedLanguageId, x.OptInDate, x.LastRunDate, x.LastSendOnDay, x.DoNotSendTo, x.ThirdPartyListsUpdated, x.InsertDate });

            Property(x => x.SiteVertical).HasColumnName(@"SiteVertical").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Salutation).HasColumnName(@"Salutation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SmartPhone).HasColumnName(@"SmartPhone").HasColumnType("bit").IsOptional();
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SelectedLanguageId).HasColumnName(@"SelectedLanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptInDate).HasColumnName(@"OptInDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastRunDate).HasColumnName(@"LastRunDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastSendOnDay).HasColumnName(@"LastSendOnDay").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptOutDate).HasColumnName(@"OptOutDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DoNotSendTo).HasColumnName(@"DoNotSendTo").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ThirdPartyListsUpdated).HasColumnName(@"ThirdPartyListsUpdated").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(15);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Income).HasColumnName(@"Income").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.HomeOwnership).HasColumnName(@"HomeOwnership").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Children).HasColumnName(@"Children").HasColumnType("int").IsOptional();
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwOptInLeadSurveys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwOptInLeadSurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwOptInLeadSurvey>
    {
        public VwOptInLeadSurveyConfiguration()
            : this("dbo")
        {
        }

        public VwOptInLeadSurveyConfiguration(string schema)
        {
            ToTable("vwOptInLeadSurveys", schema);
            HasKey(x => new { x.SiteVertical, x.EmailAddress, x.CountryId, x.SelectedLanguageId, x.OptInDate, x.LastRunDate, x.LastSendOnDay, x.DoNotSendTo, x.ThirdPartyListsUpdated, x.InsertDate });

            Property(x => x.SiteVertical).HasColumnName(@"SiteVertical").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Salutation).HasColumnName(@"Salutation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SmartPhone).HasColumnName(@"SmartPhone").HasColumnType("bit").IsOptional();
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.OfferId).HasColumnName(@"OfferID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.AffiliateId).HasColumnName(@"AffiliateID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.SubId).HasColumnName(@"SubID").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SelectedLanguageId).HasColumnName(@"SelectedLanguageID").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptInDate).HasColumnName(@"OptInDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastRunDate).HasColumnName(@"LastRunDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LastSendOnDay).HasColumnName(@"LastSendOnDay").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OptOutDate).HasColumnName(@"OptOutDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DoNotSendTo).HasColumnName(@"DoNotSendTo").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ThirdPartyListsUpdated).HasColumnName(@"ThirdPartyListsUpdated").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Ip).HasColumnName(@"IP").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(15);
            Property(x => x.Cost).HasColumnName(@"Cost").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Occupation).HasColumnName(@"Occupation").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Income).HasColumnName(@"Income").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.HomeOwnership).HasColumnName(@"HomeOwnership").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Education).HasColumnName(@"Education").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Children).HasColumnName(@"Children").HasColumnType("int").IsOptional();
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwOptInLeadUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwOptInLeadUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwOptInLeadUser>
    {
        public VwOptInLeadUserConfiguration()
            : this("dbo")
        {
        }

        public VwOptInLeadUserConfiguration(string schema)
        {
            ToTable("vwOptInLeadUsers", schema);
            HasKey(x => x.EmailAddress);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Firstname).HasColumnName(@"Firstname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Lastname).HasColumnName(@"Lastname").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Address2).HasColumnName(@"Address2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Mobilephone).HasColumnName(@"Mobilephone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.SmartPhone).HasColumnName(@"SmartPhone").HasColumnType("bit").IsOptional();
            Property(x => x.BirthdayDay).HasColumnName(@"BirthdayDay").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayMonth).HasColumnName(@"BirthdayMonth").HasColumnType("int").IsOptional();
            Property(x => x.BirthdayYear).HasColumnName(@"BirthdayYear").HasColumnType("int").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1);
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Clik).HasColumnName(@"Clik").HasColumnType("bit").IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vwRouterStatusPrecisionSurvey
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class VwRouterStatusPrecisionSurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwRouterStatusPrecisionSurvey>
    {
        public VwRouterStatusPrecisionSurveyConfiguration()
            : this("dbo")
        {
        }

        public VwRouterStatusPrecisionSurveyConfiguration(string schema)
        {
            ToTable("vwRouterStatusPrecisionSurvey", schema);
            HasKey(x => new { x.Email, x.UserGuid, x.Name, x.Status, x.Reward, x.Gross });

            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserGuid).HasColumnName(@"UserGuid").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(1).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Reward).HasColumnName(@"Reward").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Gross).HasColumnName(@"Gross").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // WeeklySurveyAnswers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class WeeklySurveyAnswerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WeeklySurveyAnswer>
    {
        public WeeklySurveyAnswerConfiguration()
            : this("dbo")
        {
        }

        public WeeklySurveyAnswerConfiguration(string schema)
        {
            ToTable("WeeklySurveyAnswers", schema);
            HasKey(x => new { x.EmailAddress, x.SurveyId, x.CountryId });

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AnswerId).HasColumnName(@"AnswerID").HasColumnType("int").IsRequired();
            Property(x => x.AnswerDate).HasColumnName(@"AnswerDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // WeeklySurveyConfig
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class WeeklySurveyConfigConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WeeklySurveyConfig>
    {
        public WeeklySurveyConfigConfiguration()
            : this("dbo")
        {
        }

        public WeeklySurveyConfigConfiguration(string schema)
        {
            ToTable("WeeklySurveyConfig", schema);
            HasKey(x => new { x.SurveyId, x.Answer, x.CountryId });

            Property(x => x.AutoId).HasColumnName(@"AutoID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Answer).HasColumnName(@"Answer").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // WithdrawReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class WithdrawReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WithdrawReason>
    {
        public WithdrawReasonConfiguration()
            : this("dbo")
        {
        }

        public WithdrawReasonConfiguration(string schema)
        {
            ToTable("WithdrawReason", schema);
            HasKey(x => x.WithdrawReasonId);

            Property(x => x.WithdrawReasonId).HasColumnName(@"WithdrawReasonID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DailyReportCostCpaReturnModel
    {
        public System.Decimal? Column1 { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DailyReportCostOfLeadsReturnModel
    {
        public System.Decimal? CostOfLeads { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DailyReportRevenueCpaReturnModel
    {
        public System.Decimal? Revenue { get; set; }
        public System.String CountryID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class DailyReportRoiByTypeReturnModel
    {
        public System.Decimal? ROI { get; set; }
        public System.Decimal? Cost { get; set; }
        public System.Decimal? Revenue { get; set; }
        public System.String CountryID { get; set; }
        public System.String OfferType { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetLeadsByDayForFraudReturnModel
    {
        public System.String EmailAddress { get; set; }
        public System.String Firstname { get; set; }
        public System.String Lastname { get; set; }
        public System.String Address { get; set; }
        public System.String Address2 { get; set; }
        public System.String City { get; set; }
        public System.String State { get; set; }
        public System.String Zip { get; set; }
        public System.String Password { get; set; }
        public System.String OfferID { get; set; }
        public System.String AffiliateID { get; set; }
        public System.String SubID { get; set; }
        public System.Decimal? Cost { get; set; }
        public System.String CountryID { get; set; }
        public System.DateTime OptInDate { get; set; }
        public System.DateTime LastRunDate { get; set; }
        public System.Int32 LastSendOnDay { get; set; }
        public System.DateTime? OptOutDate { get; set; }
        public System.Boolean DoNotSendTo { get; set; }
        public System.DateTime? ConfirmedDate { get; set; }
        public System.DateTime InsertDate { get; set; }
        public System.String IP { get; set; }
        public System.Boolean? Clik { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetMobileEarningsReturnModel
    {
        public System.Decimal? earnings { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetOffersReportReturnModel
    {
        public System.String Title { get; set; }
        public System.Int32 ID { get; set; }
        public System.Decimal? Revenue { get; set; }
        public System.Int32? Conversions { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetRoiBySignupDateReturnModel
    {
        public System.Int32? NumberOfLeads { get; set; }
        public System.Decimal? Cost { get; set; }
        public System.Decimal? Revenue { get; set; }
        public System.Decimal? ROI { get; set; }
        public System.String AffiliateID { get; set; }
        public System.String OfferID { get; set; }
        public System.String SubID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetRoiBySubReturnModel
    {
        public System.Int32? NumberOfLeads { get; set; }
        public System.Decimal? Cost { get; set; }
        public System.Decimal? Revenue { get; set; }
        public System.Decimal? ROI { get; set; }
        public System.String AffiliateID { get; set; }
        public System.String OfferID { get; set; }
        public System.String SubID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetRoiForLast100SignupsReturnModel
    {
        public System.Int32? NumberOfLeads { get; set; }
        public System.Decimal? Cost { get; set; }
        public System.Decimal? Revenue { get; set; }
        public System.Decimal? ROI { get; set; }
        public System.String AffiliateID { get; set; }
        public System.String OfferID { get; set; }
        public System.String SubID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetRouterStatsReturnModel
    {
        public System.String message { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetSignupsWithRevenueReturnModel
    {
        public System.Int32? Column1 { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class GetTotalPayoutToDateReturnModel
    {
        public System.Decimal? TotalPayout { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class HasEmailConvertedForIncentReturnModel
    {
        public class ResultSetModel1
        {
            public System.Boolean? Converted { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

        public class ResultSetModel2
        {
            public System.Boolean? Converted { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class IsNewSubIdReturnModel
    {
        public class ResultSetModel1
        {
            public System.Boolean? SubIdIsNew { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

        public class ResultSetModel2
        {
            public System.Boolean? SubIdIsNew { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class OptInLeadIsClikReturnModel
    {
        public class ResultSetModel1
        {
            public System.Boolean? Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

        public class ResultSetModel2
        {
            public System.Boolean? Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class ProcessClickCreditReturnModel
    {
        public System.Decimal ClickPayoutValue { get; set; }
        public System.Decimal ClickReceiveValue { get; set; }
        public System.String URL { get; set; }
        public System.Boolean Enabled { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class RouterContactInsertsReturnModel
    {
        public System.Int32? Column1 { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SpEecGetAwaitingEmailAddressesJangoReturnModel
    {
        public System.String EmailAddress { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel
    {
        public System.String OfferID { get; set; }
        public System.Int32 SendOnDay { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SpToaGetCountryIdsForUserReturnModel
    {
        public System.String CountryID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public partial class SpToaGetSurveyPanelSignupCountReturnModel
    {
        public System.Int32? TotalCount { get; set; }
    }

    #endregion

}
// </auto-generated>

