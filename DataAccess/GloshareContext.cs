

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "DataAccess\App.config"
//     Connection String Name: "GloshareContext"
//     Connection String:      "data source=bluebeam;initial catalog=Gloshare;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


using CBR.Core.Entities.Models;
using CBR.DataAccess.Mapping;
namespace CBR.DataAccess
{
    using System.Linq;

    #region Unit of work

    public interface IGloshareContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Affiliate> Affiliates { get; set; } // Affiliate
        System.Data.Entity.DbSet<AffiliateCountry> AffiliateCountries { get; set; } // AffiliateCountry
        System.Data.Entity.DbSet<AffiliateSub> AffiliateSubs { get; set; } // AffiliateSub
        System.Data.Entity.DbSet<AllInboxClikBackup> AllInboxClikBackups { get; set; } // allInboxClikBackup
        System.Data.Entity.DbSet<AweberDemoUpdate> AweberDemoUpdates { get; set; } // AweberDemoUpdate
        System.Data.Entity.DbSet<BatchFileExportLeadsSent> BatchFileExportLeadsSents { get; set; } // BatchFileExportLeadsSent
        System.Data.Entity.DbSet<CbrConsent> CbrConsents { get; set; } // CBRConsent
        System.Data.Entity.DbSet<CbrEmailAddressChange> CbrEmailAddressChanges { get; set; } // CBREmailAddressChange
        System.Data.Entity.DbSet<CbrEmailDailyBatchCounter> CbrEmailDailyBatchCounters { get; set; } // CBREmailDailyBatchCounter
        System.Data.Entity.DbSet<CbrJobCode> CbrJobCodes { get; set; } // CBRJobCode
        System.Data.Entity.DbSet<CbrLead> CbrLeads { get; set; } // CBRLead
        System.Data.Entity.DbSet<CbrPayout> CbrPayouts { get; set; } // CBRPayout
        System.Data.Entity.DbSet<CbrQuestion> CbrQuestions { get; set; } // CBRQuestion
        System.Data.Entity.DbSet<CbrQuestionAnswer> CbrQuestionAnswers { get; set; } // CBRQuestionAnswers
        System.Data.Entity.DbSet<CbrQuestionDropdown> CbrQuestionDropdowns { get; set; } // CBRQuestionDropdown
        System.Data.Entity.DbSet<CbrSignup> CbrSignups { get; set; } // CBRSignup
        System.Data.Entity.DbSet<CbrSignupError> CbrSignupErrors { get; set; } // CBRSignupError
        System.Data.Entity.DbSet<CbrSurvey> CbrSurveys { get; set; } // CBRSurvey
        System.Data.Entity.DbSet<CbrSurveyInstruction> CbrSurveyInstructions { get; set; } // CBRSurveyInstruction
        System.Data.Entity.DbSet<CbrSurveyQuestion> CbrSurveyQuestions { get; set; } // CBRSurveyQuestion
        System.Data.Entity.DbSet<CbrSurveyStatu> CbrSurveyStatus { get; set; } // CBRSurveyStatus
        System.Data.Entity.DbSet<CbrSurveyStatusOutput> CbrSurveyStatusOutputs { get; set; } // cbrSurveyStatusOutput
        System.Data.Entity.DbSet<CbrSurveyStatusType> CbrSurveyStatusTypes { get; set; } // CBRSurveyStatusType
        System.Data.Entity.DbSet<CbrSurveyTarget> CbrSurveyTargets { get; set; } // CBRSurveyTarget
        System.Data.Entity.DbSet<CbrSurveyWithdraw> CbrSurveyWithdraws { get; set; } // CBRSurveyWithdraw
        System.Data.Entity.DbSet<CbrVerification> CbrVerifications { get; set; } // CBRVerification
        System.Data.Entity.DbSet<Coreg> Coregs { get; set; } // Coreg
        System.Data.Entity.DbSet<CoregError> CoregErrors { get; set; } // CoregError
        System.Data.Entity.DbSet<Country> Countries { get; set; } // Country
        System.Data.Entity.DbSet<CountryLanguageDefault> CountryLanguageDefaults { get; set; } // CountryLanguageDefault
        System.Data.Entity.DbSet<CpaNotification> CpaNotifications { get; set; } // CPANotification
        System.Data.Entity.DbSet<CpaNotificationJob> CpaNotificationJobs { get; set; } // CPANotificationJob
        System.Data.Entity.DbSet<CpaNotificationNewSub> CpaNotificationNewSubs { get; set; } // CPANotificationNewSub
        System.Data.Entity.DbSet<CpaNotificationType> CpaNotificationTypes { get; set; } // CPANotificationType
        System.Data.Entity.DbSet<DashboardOverlay> DashboardOverlays { get; set; } // DashboardOverlay
        System.Data.Entity.DbSet<DashboardOverlayEmail> DashboardOverlayEmails { get; set; } // DashboardOverlayEmail
        System.Data.Entity.DbSet<DoiRotatingOffer> DoiRotatingOffers { get; set; } // DoiRotatingOffer
        System.Data.Entity.DbSet<EducationCode> EducationCodes { get; set; } // EducationCode
        System.Data.Entity.DbSet<ForumAllowedMember> ForumAllowedMembers { get; set; } // forum_ALLOWED_MEMBERS
        System.Data.Entity.DbSet<ForumAReply> ForumAReplies { get; set; } // forum_A_REPLY
        System.Data.Entity.DbSet<ForumATopic> ForumATopics { get; set; } // forum_A_TOPICS
        System.Data.Entity.DbSet<ForumBadword> ForumBadwords { get; set; } // forum_BADWORDS
        System.Data.Entity.DbSet<ForumCategory> ForumCategories { get; set; } // forum_CATEGORY
        System.Data.Entity.DbSet<ForumConfigNew> ForumConfigNews { get; set; } // forum_CONFIG_NEW
        System.Data.Entity.DbSet<ForumForum> ForumForums { get; set; } // forum_FORUM
        System.Data.Entity.DbSet<ForumGroup> ForumGroups { get; set; } // forum_GROUPS
        System.Data.Entity.DbSet<ForumGroupName> ForumGroupNames { get; set; } // forum_GROUP_NAMES
        System.Data.Entity.DbSet<ForumMember> ForumMembers { get; set; } // forum_MEMBERS
        System.Data.Entity.DbSet<ForumMembersPending> ForumMembersPendings { get; set; } // forum_MEMBERS_PENDING
        System.Data.Entity.DbSet<ForumModerator> ForumModerators { get; set; } // forum_MODERATOR
        System.Data.Entity.DbSet<ForumNamefilter> ForumNamefilters { get; set; } // forum_NAMEFILTER
        System.Data.Entity.DbSet<ForumReply> ForumReplies { get; set; } // forum_REPLY
        System.Data.Entity.DbSet<ForumSpamMail> ForumSpamMails { get; set; } // forum_SPAM_MAIL
        System.Data.Entity.DbSet<ForumSubscription> ForumSubscriptions { get; set; } // forum_SUBSCRIPTIONS
        System.Data.Entity.DbSet<ForumTopic> ForumTopics { get; set; } // forum_TOPICS
        System.Data.Entity.DbSet<ForumTotal> ForumTotals { get; set; } // forum_TOTALS
        System.Data.Entity.DbSet<GeoLiteCityBlock> GeoLiteCityBlocks { get; set; } // GeoLiteCity-Blocks
        System.Data.Entity.DbSet<GeoLiteCityLocation> GeoLiteCityLocations { get; set; } // GeoLiteCity-Location
        System.Data.Entity.DbSet<InstructionBullet> InstructionBullets { get; set; } // InstructionBullet
        System.Data.Entity.DbSet<IpCountry> IpCountries { get; set; } // IPCountry
        System.Data.Entity.DbSet<IpCountryNew> IpCountryNews { get; set; } // IPCountryNew
        System.Data.Entity.DbSet<IpCountryOld> IpCountryOlds { get; set; } // IPCountryOld
        System.Data.Entity.DbSet<IpCountyNewBackup> IpCountyNewBackups { get; set; } // IPCountyNewBackup
        System.Data.Entity.DbSet<IpLog> IpLogs { get; set; } // IpLog
        System.Data.Entity.DbSet<JobData> JobDatas { get; set; } // JobData
        System.Data.Entity.DbSet<Language> Languages { get; set; } // Language
        System.Data.Entity.DbSet<LeadReversal> LeadReversals { get; set; } // LeadReversal
        System.Data.Entity.DbSet<LoggedInFromClik> LoggedInFromCliks { get; set; } // LoggedInFromClik
        System.Data.Entity.DbSet<Occupation> Occupations { get; set; } // Occupation
        System.Data.Entity.DbSet<OccupationEducation> OccupationEducations { get; set; } // OccupationEducation
        System.Data.Entity.DbSet<OccupationIncome> OccupationIncomes { get; set; } // OccupationIncome
        System.Data.Entity.DbSet<OccupationSector> OccupationSectors { get; set; } // OccupationSector
        System.Data.Entity.DbSet<Offer> Offers { get; set; } // Offer
        System.Data.Entity.DbSet<OptInEmailLog> OptInEmailLogs { get; set; } // OptInEmailLog
        System.Data.Entity.DbSet<OptInEmailVerbage> OptInEmailVerbages { get; set; } // OptInEmailVerbage
        System.Data.Entity.DbSet<OptInEmailVerbageListrakQueue> OptInEmailVerbageListrakQueues { get; set; } // OptInEmailVerbageListrakQueue
        System.Data.Entity.DbSet<OptInEmailVerbageTestSend> OptInEmailVerbageTestSends { get; set; } // OptInEmailVerbageTestSend
        System.Data.Entity.DbSet<OptInLead> OptInLeads { get; set; } // OptInLead
        System.Data.Entity.DbSet<OptInLeadBackup> OptInLeadBackups { get; set; } // OptInLeadBackup
        System.Data.Entity.DbSet<PostQueue> PostQueues { get; set; } // PostQueue
        System.Data.Entity.DbSet<PqToBeDeleted> PqToBeDeleteds { get; set; } // PQ_ToBeDeleted
        System.Data.Entity.DbSet<ProcessedSurveyId> ProcessedSurveyIds { get; set; } // ProcessedSurveyIDs
        System.Data.Entity.DbSet<ProregAdvertiser> ProregAdvertisers { get; set; } // ProregAdvertiser
        System.Data.Entity.DbSet<ProregAdvertiserFieldXref> ProregAdvertiserFieldXrefs { get; set; } // ProregAdvertiserFieldXref
        System.Data.Entity.DbSet<ProregField> ProregFields { get; set; } // ProregFields
        System.Data.Entity.DbSet<ProregLeadSent> ProregLeadSents { get; set; } // ProregLeadSent
        System.Data.Entity.DbSet<ProregOffer> ProregOffers { get; set; } // ProregOffer
        System.Data.Entity.DbSet<ProregOfferReqField> ProregOfferReqFields { get; set; } // ProregOfferReqFields
        System.Data.Entity.DbSet<ProregOfferTarget> ProregOfferTargets { get; set; } // ProregOfferTarget
        System.Data.Entity.DbSet<Referral> Referrals { get; set; } // Referral
        System.Data.Entity.DbSet<ReUploadElab> ReUploadElabs { get; set; } // ReUploadElabs
        System.Data.Entity.DbSet<ScrubLead> ScrubLeads { get; set; } // ScrubLead
        System.Data.Entity.DbSet<ScrubReportConfig> ScrubReportConfigs { get; set; } // ScrubReportConfig
        System.Data.Entity.DbSet<SiteBlacklist> SiteBlacklists { get; set; } // SiteBlacklist
        System.Data.Entity.DbSet<SiteBlacklistIpAddress> SiteBlacklistIpAddresses { get; set; } // SiteBlacklistIpAddress
        System.Data.Entity.DbSet<SmartEmailLinkClick> SmartEmailLinkClicks { get; set; } // SmartEmailLinkClick
        System.Data.Entity.DbSet<SmartEmailLinkConfig> SmartEmailLinkConfigs { get; set; } // SmartEmailLinkConfig
        System.Data.Entity.DbSet<SmartEmailLinkField> SmartEmailLinkFields { get; set; } // SmartEmailLinkFields
        System.Data.Entity.DbSet<SmartEmailLinkTarget> SmartEmailLinkTargets { get; set; } // SmartEmailLinkTarget
        System.Data.Entity.DbSet<SmartExitLinkConfig> SmartExitLinkConfigs { get; set; } // SmartExitLinkConfig
        System.Data.Entity.DbSet<SmartExitLinkField> SmartExitLinkFields { get; set; } // SmartExitLinkFields
        System.Data.Entity.DbSet<SmartExitLinkTarget> SmartExitLinkTargets { get; set; } // SmartExitLinkTarget
        System.Data.Entity.DbSet<SmartLinkAiLog> SmartLinkAiLogs { get; set; } // SmartLinkAILog
        System.Data.Entity.DbSet<SmartLinkLog> SmartLinkLogs { get; set; } // SmartLinkLog
        System.Data.Entity.DbSet<SmartWebLinkConfig> SmartWebLinkConfigs { get; set; } // SmartWebLinkConfig
        System.Data.Entity.DbSet<SmartWebLinkField> SmartWebLinkFields { get; set; } // SmartWebLinkFields
        System.Data.Entity.DbSet<SmartWebLinkLog> SmartWebLinkLogs { get; set; } // SmartWebLinkLog
        System.Data.Entity.DbSet<SmartWebLinkTarget> SmartWebLinkTargets { get; set; } // SmartWebLinkTarget
        System.Data.Entity.DbSet<State> States { get; set; } // States
        System.Data.Entity.DbSet<UserNew> UserNews { get; set; } // UserNews
        System.Data.Entity.DbSet<UserSurveyCountAfter> UserSurveyCountAfters { get; set; } // UserSurveyCountAfter
        System.Data.Entity.DbSet<UserSurveyCountBefore> UserSurveyCountBefores { get; set; } // UserSurveyCountBefore
        System.Data.Entity.DbSet<VwCbrSurveyStatusWithPending> VwCbrSurveyStatusWithPendings { get; set; } // vwCBRSurveyStatusWithPending
        System.Data.Entity.DbSet<VwDebugIp> VwDebugIps { get; set; } // vwDebugIP
        System.Data.Entity.DbSet<VwJobCode> VwJobCodes { get; set; } // vwJobCodes
        System.Data.Entity.DbSet<VwOptInLeadKey> VwOptInLeadKeys { get; set; } // vwOptInLeadKeys
        System.Data.Entity.DbSet<VwOptInLeadPjDegree> VwOptInLeadPjDegrees { get; set; } // vwOptInLeadPJDegree
        System.Data.Entity.DbSet<VwOptInLeadSurvey> VwOptInLeadSurveys { get; set; } // vwOptInLeadSurveys
        System.Data.Entity.DbSet<VwOptInLeadUser> VwOptInLeadUsers { get; set; } // vwOptInLeadUsers
        System.Data.Entity.DbSet<WeeklySurveyAnswer> WeeklySurveyAnswers { get; set; } // WeeklySurveyAnswers
        System.Data.Entity.DbSet<WeeklySurveyConfig> WeeklySurveyConfigs { get; set; } // WeeklySurveyConfig
        System.Data.Entity.DbSet<WithdrawReason> WithdrawReasons { get; set; } // WithdrawReason

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int CommandExecute(string command, string comment, int? mode, string execute);
        // CommandExecuteAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId);
        System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel>> DailyReportCostOfLeadsAsync(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId);

        System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate);
        System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRevenueCpaReturnModel>> DailyReportRevenueCpaAsync(System.DateTime? startDate, System.DateTime? endDate);

        System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate);
        System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRoiByTypeReturnModel>> DailyReportRoiByTypeAsync(System.DateTime? startDate, System.DateTime? endDate);

        int DevPurgeSurveyResultsForEmail(string emailAddress, int? surveyId);
        // DevPurgeSurveyResultsForEmailAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck);
        System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel>> GetLeadsByDayForFraudAsync(System.DateTime? dateToCheck);

        System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd);
        System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetOffersReportReturnModel>> GetOffersReportAsync(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd);

        System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate);
        System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySignupDateReturnModel>> GetRoiBySignupDateAsync(System.DateTime? signupDate);

        System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId);
        System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySubReturnModel>> GetRoiBySubAsync(string affiliateId, string offerId, string subId);

        System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber);
        System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel>> GetRoiForLast100SignupsAsync(string affiliateId, string offerId, string subId, int? sampleNumber);

        System.Collections.Generic.List<GetShippingAddressReturnModel> GetShippingAddress(string emailAddress);
        System.Collections.Generic.List<GetShippingAddressReturnModel> GetShippingAddress(string emailAddress, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetShippingAddressReturnModel>> GetShippingAddressAsync(string emailAddress);

        System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList);
        System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetSignupsWithRevenueReturnModel>> GetSignupsWithRevenueAsync(string affiliateId, string offerId, string subId, string emailList);

        System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate();
        System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<GetTotalPayoutToDateReturnModel>> GetTotalPayoutToDateAsync();

        HasEmailConvertedForIncentReturnModel HasEmailConvertedForIncent(string emailAddress);
        System.Threading.Tasks.Task<HasEmailConvertedForIncentReturnModel> HasEmailConvertedForIncentAsync(string emailAddress);

        int IndexOptimize(string databases, string fragmentationHighLob, string fragmentationHighNonLob, string fragmentationMediumLob, string fragmentationMediumNonLob, string fragmentationLowLob, string fragmentationLowNonLob, int? fragmentationLevel1, int? fragmentationLevel2, int? pageCountLevel, string sortInTempdb, int? maxDop, int? fillFactor, string lobCompaction, int? statisticsSample, string partitionLevel, int? timeLimit, string indexes, string padIndex, string statisticsResample, string updateColumnStatistics, string onlyModifiedStatistics, string execute);
        // IndexOptimizeAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertGiftCardRequest(string emailAddress, string countryId, decimal? requestAmount, int? optionId, string ip);
        // InsertGiftCardRequestAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertOptInLeadForClik(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string ip, bool? clik, System.DateTime? insertDate, string address);
        // InsertOptInLeadForClikAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int InsertOptInLeadForPjd(string emailAddress, string firstname, string offerId, string affiliateId, string subId, string countryId, string ip);
        // InsertOptInLeadForPjdAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        IsNewSubIdReturnModel IsNewSubId(string subId, System.DateTime? searchBeforeDate);
        System.Threading.Tasks.Task<IsNewSubIdReturnModel> IsNewSubIdAsync(string subId, System.DateTime? searchBeforeDate);

        System.Collections.Generic.List<OilReturnModel> Oil(string emailAddress);
        System.Collections.Generic.List<OilReturnModel> Oil(string emailAddress, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<OilReturnModel>> OilAsync(string emailAddress);

        int OptInLeadCompleteCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string password);
        // OptInLeadCompleteCoregAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        OptInLeadIsClikReturnModel OptInLeadIsClik(string emailAddress);
        System.Threading.Tasks.Task<OptInLeadIsClikReturnModel> OptInLeadIsClikAsync(string emailAddress);

        int OptInLeadSetPassword(string emailAddress, string password);
        // OptInLeadSetPasswordAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdate(int? siteVertical, string emailAddress, string salutation, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string occupation, string income, string homeOwnership, string education, string maritalStatus, int? children, string ethnicity, string password, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string selectedLanguageId, System.DateTime? optInDate, System.DateTime? lastRunDate, int? lastSendOnDay, System.DateTime? optOutDate, bool? doNotSendTo, System.DateTime? confirmedDate, bool? thirdPartyListsUpdated, System.DateTime? insertDate, string ip, string uid);
        // OptInLeadUpdateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string countryId, string address);
        // OptInLeadUpdateCoregAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoregBirthDate(string emailAddress, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string offerId, string affiliateId);
        // OptInLeadUpdateCoregBirthDateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoregCity(string emailAddress, string city, string offerId, string affiliateId);
        // OptInLeadUpdateCoregCityAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoregPhone(string offerId, string emailAddress, string phone, string affiliateId);
        // OptInLeadUpdateCoregPhoneAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateCoregState(string emailAddress, string state, string offerId, string affiliateId);
        // OptInLeadUpdateCoregStateAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateforClikUpgrade(string emailAddress, bool? clik);
        // OptInLeadUpdateforClikUpgradeAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int OptInLeadUpdateUserInfo(string emailAddress, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string ethnicity, bool? clik);
        // OptInLeadUpdateUserInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId);
        System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<ProcessClickCreditReturnModel>> ProcessClickCreditAsync(string clickCode, string email, int? surveyId);

        int SearchAllTables(string searchStr);
        // SearchAllTablesAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SearchAllTablesExact(string searchStr);
        // SearchAllTablesExactAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SeedAfterCountsForUserSurvey(int? daysBackToQuery);
        // SeedAfterCountsForUserSurveyAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SeedBeforeCountsFromAfter();
        // SeedBeforeCountsFromAfterAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpDoi2ApplySignupBonus(string emailAddress);
        // SpDoi2ApplySignupBonusAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecChangeEmail(string fromEmailAddress, string toEmailAddress);
        // SpEecChangeEmailAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecCombineEmailAccounts(string fromEmailAddress, string toEmailAddress);
        // SpEecCombineEmailAccountsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango();
        System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel>> SpEecGetAwaitingEmailAddressesJangoAsync();

        System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak();
        System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>> SpEecGetAwaitingOfferIdSendOnDayListrakAsync();

        int SpEecGetCostPerLead(string affiliateId, string subId, string offerId, out decimal? cost);
        // SpEecGetCostPerLeadAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecGetReceiveShareMultiplier(string affiliateId, string subId, string offerId, out double? receiveShareMultiplier);
        // SpEecGetReceiveShareMultiplierAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecIsDailyCapped(string affiliateId, string subId, string offerId, out bool? capped);
        // SpEecIsDailyCappedAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecIsMonthlyCapped(string affiliateId, string subId, string offerId, out bool? capped);
        // SpEecIsMonthlyCappedAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpEecIsSubEnabled(string affiliateId, string subId, string offerId, out bool? enabled);
        // SpEecIsSubEnabledAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress);
        System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel>> SpToaGetCountryIdsForUserAsync(string emailAddress);

        System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress);
        System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel>> SpToaGetSurveyPanelSignupCountAsync(string emailAddress);

        int UpdateShippingInfo(string emailAddress, string firstname, string lastname, string address, string address2, string city, string state, string zip);
        // UpdateShippingInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UpdateUserNewsWithPayout(string emailAddress, System.DateTime? requestDate);
        // UpdateUserNewsWithPayoutAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public partial class GloshareContext : System.Data.Entity.DbContext, IGloshareContext
    {
        public System.Data.Entity.DbSet<Affiliate> Affiliates { get; set; } // Affiliate
        public System.Data.Entity.DbSet<AffiliateCountry> AffiliateCountries { get; set; } // AffiliateCountry
        public System.Data.Entity.DbSet<AffiliateSub> AffiliateSubs { get; set; } // AffiliateSub
        public System.Data.Entity.DbSet<AllInboxClikBackup> AllInboxClikBackups { get; set; } // allInboxClikBackup
        public System.Data.Entity.DbSet<AweberDemoUpdate> AweberDemoUpdates { get; set; } // AweberDemoUpdate
        public System.Data.Entity.DbSet<BatchFileExportLeadsSent> BatchFileExportLeadsSents { get; set; } // BatchFileExportLeadsSent
        public System.Data.Entity.DbSet<CbrConsent> CbrConsents { get; set; } // CBRConsent
        public System.Data.Entity.DbSet<CbrEmailAddressChange> CbrEmailAddressChanges { get; set; } // CBREmailAddressChange
        public System.Data.Entity.DbSet<CbrEmailDailyBatchCounter> CbrEmailDailyBatchCounters { get; set; } // CBREmailDailyBatchCounter
        public System.Data.Entity.DbSet<CbrJobCode> CbrJobCodes { get; set; } // CBRJobCode
        public System.Data.Entity.DbSet<CbrLead> CbrLeads { get; set; } // CBRLead
        public System.Data.Entity.DbSet<CbrPayout> CbrPayouts { get; set; } // CBRPayout
        public System.Data.Entity.DbSet<CbrQuestion> CbrQuestions { get; set; } // CBRQuestion
        public System.Data.Entity.DbSet<CbrQuestionAnswer> CbrQuestionAnswers { get; set; } // CBRQuestionAnswers
        public System.Data.Entity.DbSet<CbrQuestionDropdown> CbrQuestionDropdowns { get; set; } // CBRQuestionDropdown
        public System.Data.Entity.DbSet<CbrSignup> CbrSignups { get; set; } // CBRSignup
        public System.Data.Entity.DbSet<CbrSignupError> CbrSignupErrors { get; set; } // CBRSignupError
        public System.Data.Entity.DbSet<CbrSurvey> CbrSurveys { get; set; } // CBRSurvey
        public System.Data.Entity.DbSet<CbrSurveyInstruction> CbrSurveyInstructions { get; set; } // CBRSurveyInstruction
        public System.Data.Entity.DbSet<CbrSurveyQuestion> CbrSurveyQuestions { get; set; } // CBRSurveyQuestion
        public System.Data.Entity.DbSet<CbrSurveyStatu> CbrSurveyStatus { get; set; } // CBRSurveyStatus
        public System.Data.Entity.DbSet<CbrSurveyStatusOutput> CbrSurveyStatusOutputs { get; set; } // cbrSurveyStatusOutput
        public System.Data.Entity.DbSet<CbrSurveyStatusType> CbrSurveyStatusTypes { get; set; } // CBRSurveyStatusType
        public System.Data.Entity.DbSet<CbrSurveyTarget> CbrSurveyTargets { get; set; } // CBRSurveyTarget
        public System.Data.Entity.DbSet<CbrSurveyWithdraw> CbrSurveyWithdraws { get; set; } // CBRSurveyWithdraw
        public System.Data.Entity.DbSet<CbrVerification> CbrVerifications { get; set; } // CBRVerification
        public System.Data.Entity.DbSet<Coreg> Coregs { get; set; } // Coreg
        public System.Data.Entity.DbSet<CoregError> CoregErrors { get; set; } // CoregError
        public System.Data.Entity.DbSet<Country> Countries { get; set; } // Country
        public System.Data.Entity.DbSet<CountryLanguageDefault> CountryLanguageDefaults { get; set; } // CountryLanguageDefault
        public System.Data.Entity.DbSet<CpaNotification> CpaNotifications { get; set; } // CPANotification
        public System.Data.Entity.DbSet<CpaNotificationJob> CpaNotificationJobs { get; set; } // CPANotificationJob
        public System.Data.Entity.DbSet<CpaNotificationNewSub> CpaNotificationNewSubs { get; set; } // CPANotificationNewSub
        public System.Data.Entity.DbSet<CpaNotificationType> CpaNotificationTypes { get; set; } // CPANotificationType
        public System.Data.Entity.DbSet<DashboardOverlay> DashboardOverlays { get; set; } // DashboardOverlay
        public System.Data.Entity.DbSet<DashboardOverlayEmail> DashboardOverlayEmails { get; set; } // DashboardOverlayEmail
        public System.Data.Entity.DbSet<DoiRotatingOffer> DoiRotatingOffers { get; set; } // DoiRotatingOffer
        public System.Data.Entity.DbSet<EducationCode> EducationCodes { get; set; } // EducationCode
        public System.Data.Entity.DbSet<ForumAllowedMember> ForumAllowedMembers { get; set; } // forum_ALLOWED_MEMBERS
        public System.Data.Entity.DbSet<ForumAReply> ForumAReplies { get; set; } // forum_A_REPLY
        public System.Data.Entity.DbSet<ForumATopic> ForumATopics { get; set; } // forum_A_TOPICS
        public System.Data.Entity.DbSet<ForumBadword> ForumBadwords { get; set; } // forum_BADWORDS
        public System.Data.Entity.DbSet<ForumCategory> ForumCategories { get; set; } // forum_CATEGORY
        public System.Data.Entity.DbSet<ForumConfigNew> ForumConfigNews { get; set; } // forum_CONFIG_NEW
        public System.Data.Entity.DbSet<ForumForum> ForumForums { get; set; } // forum_FORUM
        public System.Data.Entity.DbSet<ForumGroup> ForumGroups { get; set; } // forum_GROUPS
        public System.Data.Entity.DbSet<ForumGroupName> ForumGroupNames { get; set; } // forum_GROUP_NAMES
        public System.Data.Entity.DbSet<ForumMember> ForumMembers { get; set; } // forum_MEMBERS
        public System.Data.Entity.DbSet<ForumMembersPending> ForumMembersPendings { get; set; } // forum_MEMBERS_PENDING
        public System.Data.Entity.DbSet<ForumModerator> ForumModerators { get; set; } // forum_MODERATOR
        public System.Data.Entity.DbSet<ForumNamefilter> ForumNamefilters { get; set; } // forum_NAMEFILTER
        public System.Data.Entity.DbSet<ForumReply> ForumReplies { get; set; } // forum_REPLY
        public System.Data.Entity.DbSet<ForumSpamMail> ForumSpamMails { get; set; } // forum_SPAM_MAIL
        public System.Data.Entity.DbSet<ForumSubscription> ForumSubscriptions { get; set; } // forum_SUBSCRIPTIONS
        public System.Data.Entity.DbSet<ForumTopic> ForumTopics { get; set; } // forum_TOPICS
        public System.Data.Entity.DbSet<ForumTotal> ForumTotals { get; set; } // forum_TOTALS
        public System.Data.Entity.DbSet<GeoLiteCityBlock> GeoLiteCityBlocks { get; set; } // GeoLiteCity-Blocks
        public System.Data.Entity.DbSet<GeoLiteCityLocation> GeoLiteCityLocations { get; set; } // GeoLiteCity-Location
        public System.Data.Entity.DbSet<InstructionBullet> InstructionBullets { get; set; } // InstructionBullet
        public System.Data.Entity.DbSet<IpCountry> IpCountries { get; set; } // IPCountry
        public System.Data.Entity.DbSet<IpCountryNew> IpCountryNews { get; set; } // IPCountryNew
        public System.Data.Entity.DbSet<IpCountryOld> IpCountryOlds { get; set; } // IPCountryOld
        public System.Data.Entity.DbSet<IpCountyNewBackup> IpCountyNewBackups { get; set; } // IPCountyNewBackup
        public System.Data.Entity.DbSet<IpLog> IpLogs { get; set; } // IpLog
        public System.Data.Entity.DbSet<JobData> JobDatas { get; set; } // JobData
        public System.Data.Entity.DbSet<Language> Languages { get; set; } // Language
        public System.Data.Entity.DbSet<LeadReversal> LeadReversals { get; set; } // LeadReversal
        public System.Data.Entity.DbSet<LoggedInFromClik> LoggedInFromCliks { get; set; } // LoggedInFromClik
        public System.Data.Entity.DbSet<Occupation> Occupations { get; set; } // Occupation
        public System.Data.Entity.DbSet<OccupationEducation> OccupationEducations { get; set; } // OccupationEducation
        public System.Data.Entity.DbSet<OccupationIncome> OccupationIncomes { get; set; } // OccupationIncome
        public System.Data.Entity.DbSet<OccupationSector> OccupationSectors { get; set; } // OccupationSector
        public System.Data.Entity.DbSet<Offer> Offers { get; set; } // Offer
        public System.Data.Entity.DbSet<OptInEmailLog> OptInEmailLogs { get; set; } // OptInEmailLog
        public System.Data.Entity.DbSet<OptInEmailVerbage> OptInEmailVerbages { get; set; } // OptInEmailVerbage
        public System.Data.Entity.DbSet<OptInEmailVerbageListrakQueue> OptInEmailVerbageListrakQueues { get; set; } // OptInEmailVerbageListrakQueue
        public System.Data.Entity.DbSet<OptInEmailVerbageTestSend> OptInEmailVerbageTestSends { get; set; } // OptInEmailVerbageTestSend
        public System.Data.Entity.DbSet<OptInLead> OptInLeads { get; set; } // OptInLead
        public System.Data.Entity.DbSet<OptInLeadBackup> OptInLeadBackups { get; set; } // OptInLeadBackup
        public System.Data.Entity.DbSet<PostQueue> PostQueues { get; set; } // PostQueue
        public System.Data.Entity.DbSet<PqToBeDeleted> PqToBeDeleteds { get; set; } // PQ_ToBeDeleted
        public System.Data.Entity.DbSet<ProcessedSurveyId> ProcessedSurveyIds { get; set; } // ProcessedSurveyIDs
        public System.Data.Entity.DbSet<ProregAdvertiser> ProregAdvertisers { get; set; } // ProregAdvertiser
        public System.Data.Entity.DbSet<ProregAdvertiserFieldXref> ProregAdvertiserFieldXrefs { get; set; } // ProregAdvertiserFieldXref
        public System.Data.Entity.DbSet<ProregField> ProregFields { get; set; } // ProregFields
        public System.Data.Entity.DbSet<ProregLeadSent> ProregLeadSents { get; set; } // ProregLeadSent
        public System.Data.Entity.DbSet<ProregOffer> ProregOffers { get; set; } // ProregOffer
        public System.Data.Entity.DbSet<ProregOfferReqField> ProregOfferReqFields { get; set; } // ProregOfferReqFields
        public System.Data.Entity.DbSet<ProregOfferTarget> ProregOfferTargets { get; set; } // ProregOfferTarget
        public System.Data.Entity.DbSet<Referral> Referrals { get; set; } // Referral
        public System.Data.Entity.DbSet<ReUploadElab> ReUploadElabs { get; set; } // ReUploadElabs
        public System.Data.Entity.DbSet<ScrubLead> ScrubLeads { get; set; } // ScrubLead
        public System.Data.Entity.DbSet<ScrubReportConfig> ScrubReportConfigs { get; set; } // ScrubReportConfig
        public System.Data.Entity.DbSet<SiteBlacklist> SiteBlacklists { get; set; } // SiteBlacklist
        public System.Data.Entity.DbSet<SiteBlacklistIpAddress> SiteBlacklistIpAddresses { get; set; } // SiteBlacklistIpAddress
        public System.Data.Entity.DbSet<SmartEmailLinkClick> SmartEmailLinkClicks { get; set; } // SmartEmailLinkClick
        public System.Data.Entity.DbSet<SmartEmailLinkConfig> SmartEmailLinkConfigs { get; set; } // SmartEmailLinkConfig
        public System.Data.Entity.DbSet<SmartEmailLinkField> SmartEmailLinkFields { get; set; } // SmartEmailLinkFields
        public System.Data.Entity.DbSet<SmartEmailLinkTarget> SmartEmailLinkTargets { get; set; } // SmartEmailLinkTarget
        public System.Data.Entity.DbSet<SmartExitLinkConfig> SmartExitLinkConfigs { get; set; } // SmartExitLinkConfig
        public System.Data.Entity.DbSet<SmartExitLinkField> SmartExitLinkFields { get; set; } // SmartExitLinkFields
        public System.Data.Entity.DbSet<SmartExitLinkTarget> SmartExitLinkTargets { get; set; } // SmartExitLinkTarget
        public System.Data.Entity.DbSet<SmartLinkAiLog> SmartLinkAiLogs { get; set; } // SmartLinkAILog
        public System.Data.Entity.DbSet<SmartLinkLog> SmartLinkLogs { get; set; } // SmartLinkLog
        public System.Data.Entity.DbSet<SmartWebLinkConfig> SmartWebLinkConfigs { get; set; } // SmartWebLinkConfig
        public System.Data.Entity.DbSet<SmartWebLinkField> SmartWebLinkFields { get; set; } // SmartWebLinkFields
        public System.Data.Entity.DbSet<SmartWebLinkLog> SmartWebLinkLogs { get; set; } // SmartWebLinkLog
        public System.Data.Entity.DbSet<SmartWebLinkTarget> SmartWebLinkTargets { get; set; } // SmartWebLinkTarget
        public System.Data.Entity.DbSet<State> States { get; set; } // States
        public System.Data.Entity.DbSet<UserNew> UserNews { get; set; } // UserNews
        public System.Data.Entity.DbSet<UserSurveyCountAfter> UserSurveyCountAfters { get; set; } // UserSurveyCountAfter
        public System.Data.Entity.DbSet<UserSurveyCountBefore> UserSurveyCountBefores { get; set; } // UserSurveyCountBefore
        public System.Data.Entity.DbSet<VwCbrSurveyStatusWithPending> VwCbrSurveyStatusWithPendings { get; set; } // vwCBRSurveyStatusWithPending
        public System.Data.Entity.DbSet<VwDebugIp> VwDebugIps { get; set; } // vwDebugIP
        public System.Data.Entity.DbSet<VwJobCode> VwJobCodes { get; set; } // vwJobCodes
        public System.Data.Entity.DbSet<VwOptInLeadKey> VwOptInLeadKeys { get; set; } // vwOptInLeadKeys
        public System.Data.Entity.DbSet<VwOptInLeadPjDegree> VwOptInLeadPjDegrees { get; set; } // vwOptInLeadPJDegree
        public System.Data.Entity.DbSet<VwOptInLeadSurvey> VwOptInLeadSurveys { get; set; } // vwOptInLeadSurveys
        public System.Data.Entity.DbSet<VwOptInLeadUser> VwOptInLeadUsers { get; set; } // vwOptInLeadUsers
        public System.Data.Entity.DbSet<WeeklySurveyAnswer> WeeklySurveyAnswers { get; set; } // WeeklySurveyAnswers
        public System.Data.Entity.DbSet<WeeklySurveyConfig> WeeklySurveyConfigs { get; set; } // WeeklySurveyConfig
        public System.Data.Entity.DbSet<WithdrawReason> WithdrawReasons { get; set; } // WithdrawReason

        static GloshareContext()
        {
            System.Data.Entity.Database.SetInitializer<GloshareContext>(null);
        }

        public GloshareContext()
            : base("Name=GloshareContext")
        {
            InitializePartial();
        }

        public GloshareContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public GloshareContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public GloshareContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public GloshareContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AffiliateConfiguration());
            modelBuilder.Configurations.Add(new AffiliateCountryConfiguration());
            modelBuilder.Configurations.Add(new AffiliateSubConfiguration());
            modelBuilder.Configurations.Add(new AllInboxClikBackupConfiguration());
            modelBuilder.Configurations.Add(new AweberDemoUpdateConfiguration());
            modelBuilder.Configurations.Add(new BatchFileExportLeadsSentConfiguration());
            modelBuilder.Configurations.Add(new CbrConsentConfiguration());
            modelBuilder.Configurations.Add(new CbrEmailAddressChangeConfiguration());
            modelBuilder.Configurations.Add(new CbrEmailDailyBatchCounterConfiguration());
            modelBuilder.Configurations.Add(new CbrJobCodeConfiguration());
            modelBuilder.Configurations.Add(new CbrLeadConfiguration());
            modelBuilder.Configurations.Add(new CbrPayoutConfiguration());
            modelBuilder.Configurations.Add(new CbrQuestionConfiguration());
            modelBuilder.Configurations.Add(new CbrQuestionAnswerConfiguration());
            modelBuilder.Configurations.Add(new CbrQuestionDropdownConfiguration());
            modelBuilder.Configurations.Add(new CbrSignupConfiguration());
            modelBuilder.Configurations.Add(new CbrSignupErrorConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyInstructionConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyQuestionConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyStatuConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyStatusOutputConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyStatusTypeConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyTargetConfiguration());
            modelBuilder.Configurations.Add(new CbrSurveyWithdrawConfiguration());
            modelBuilder.Configurations.Add(new CbrVerificationConfiguration());
            modelBuilder.Configurations.Add(new CoregConfiguration());
            modelBuilder.Configurations.Add(new CoregErrorConfiguration());
            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new CountryLanguageDefaultConfiguration());
            modelBuilder.Configurations.Add(new CpaNotificationConfiguration());
            modelBuilder.Configurations.Add(new CpaNotificationJobConfiguration());
            modelBuilder.Configurations.Add(new CpaNotificationNewSubConfiguration());
            modelBuilder.Configurations.Add(new CpaNotificationTypeConfiguration());
            modelBuilder.Configurations.Add(new DashboardOverlayConfiguration());
            modelBuilder.Configurations.Add(new DashboardOverlayEmailConfiguration());
            modelBuilder.Configurations.Add(new DoiRotatingOfferConfiguration());
            modelBuilder.Configurations.Add(new EducationCodeConfiguration());
            modelBuilder.Configurations.Add(new ForumAllowedMemberConfiguration());
            modelBuilder.Configurations.Add(new ForumAReplyConfiguration());
            modelBuilder.Configurations.Add(new ForumATopicConfiguration());
            modelBuilder.Configurations.Add(new ForumBadwordConfiguration());
            modelBuilder.Configurations.Add(new ForumCategoryConfiguration());
            modelBuilder.Configurations.Add(new ForumConfigNewConfiguration());
            modelBuilder.Configurations.Add(new ForumForumConfiguration());
            modelBuilder.Configurations.Add(new ForumGroupConfiguration());
            modelBuilder.Configurations.Add(new ForumGroupNameConfiguration());
            modelBuilder.Configurations.Add(new ForumMemberConfiguration());
            modelBuilder.Configurations.Add(new ForumMembersPendingConfiguration());
            modelBuilder.Configurations.Add(new ForumModeratorConfiguration());
            modelBuilder.Configurations.Add(new ForumNamefilterConfiguration());
            modelBuilder.Configurations.Add(new ForumReplyConfiguration());
            modelBuilder.Configurations.Add(new ForumSpamMailConfiguration());
            modelBuilder.Configurations.Add(new ForumSubscriptionConfiguration());
            modelBuilder.Configurations.Add(new ForumTopicConfiguration());
            modelBuilder.Configurations.Add(new ForumTotalConfiguration());
            modelBuilder.Configurations.Add(new GeoLiteCityBlockConfiguration());
            modelBuilder.Configurations.Add(new GeoLiteCityLocationConfiguration());
            modelBuilder.Configurations.Add(new InstructionBulletConfiguration());
            modelBuilder.Configurations.Add(new IpCountryConfiguration());
            modelBuilder.Configurations.Add(new IpCountryNewConfiguration());
            modelBuilder.Configurations.Add(new IpCountryOldConfiguration());
            modelBuilder.Configurations.Add(new IpCountyNewBackupConfiguration());
            modelBuilder.Configurations.Add(new IpLogConfiguration());
            modelBuilder.Configurations.Add(new JobDataConfiguration());
            modelBuilder.Configurations.Add(new LanguageConfiguration());
            modelBuilder.Configurations.Add(new LeadReversalConfiguration());
            modelBuilder.Configurations.Add(new LoggedInFromClikConfiguration());
            modelBuilder.Configurations.Add(new OccupationConfiguration());
            modelBuilder.Configurations.Add(new OccupationEducationConfiguration());
            modelBuilder.Configurations.Add(new OccupationIncomeConfiguration());
            modelBuilder.Configurations.Add(new OccupationSectorConfiguration());
            modelBuilder.Configurations.Add(new OfferConfiguration());
            modelBuilder.Configurations.Add(new OptInEmailLogConfiguration());
            modelBuilder.Configurations.Add(new OptInEmailVerbageConfiguration());
            modelBuilder.Configurations.Add(new OptInEmailVerbageListrakQueueConfiguration());
            modelBuilder.Configurations.Add(new OptInEmailVerbageTestSendConfiguration());
            modelBuilder.Configurations.Add(new OptInLeadConfiguration());
            modelBuilder.Configurations.Add(new OptInLeadBackupConfiguration());
            modelBuilder.Configurations.Add(new PostQueueConfiguration());
            modelBuilder.Configurations.Add(new PqToBeDeletedConfiguration());
            modelBuilder.Configurations.Add(new ProcessedSurveyIdConfiguration());
            modelBuilder.Configurations.Add(new ProregAdvertiserConfiguration());
            modelBuilder.Configurations.Add(new ProregAdvertiserFieldXrefConfiguration());
            modelBuilder.Configurations.Add(new ProregFieldConfiguration());
            modelBuilder.Configurations.Add(new ProregLeadSentConfiguration());
            modelBuilder.Configurations.Add(new ProregOfferConfiguration());
            modelBuilder.Configurations.Add(new ProregOfferReqFieldConfiguration());
            modelBuilder.Configurations.Add(new ProregOfferTargetConfiguration());
            modelBuilder.Configurations.Add(new ReferralConfiguration());
            modelBuilder.Configurations.Add(new ReUploadElabConfiguration());
            modelBuilder.Configurations.Add(new ScrubLeadConfiguration());
            modelBuilder.Configurations.Add(new ScrubReportConfigConfiguration());
            modelBuilder.Configurations.Add(new SiteBlacklistConfiguration());
            modelBuilder.Configurations.Add(new SiteBlacklistIpAddressConfiguration());
            modelBuilder.Configurations.Add(new SmartEmailLinkClickConfiguration());
            modelBuilder.Configurations.Add(new SmartEmailLinkConfigConfiguration());
            modelBuilder.Configurations.Add(new SmartEmailLinkFieldConfiguration());
            modelBuilder.Configurations.Add(new SmartEmailLinkTargetConfiguration());
            modelBuilder.Configurations.Add(new SmartExitLinkConfigConfiguration());
            modelBuilder.Configurations.Add(new SmartExitLinkFieldConfiguration());
            modelBuilder.Configurations.Add(new SmartExitLinkTargetConfiguration());
            modelBuilder.Configurations.Add(new SmartLinkAiLogConfiguration());
            modelBuilder.Configurations.Add(new SmartLinkLogConfiguration());
            modelBuilder.Configurations.Add(new SmartWebLinkConfigConfiguration());
            modelBuilder.Configurations.Add(new SmartWebLinkFieldConfiguration());
            modelBuilder.Configurations.Add(new SmartWebLinkLogConfiguration());
            modelBuilder.Configurations.Add(new SmartWebLinkTargetConfiguration());
            modelBuilder.Configurations.Add(new StateConfiguration());
            modelBuilder.Configurations.Add(new UserNewConfiguration());
            modelBuilder.Configurations.Add(new UserSurveyCountAfterConfiguration());
            modelBuilder.Configurations.Add(new UserSurveyCountBeforeConfiguration());
            modelBuilder.Configurations.Add(new VwCbrSurveyStatusWithPendingConfiguration());
            modelBuilder.Configurations.Add(new VwDebugIpConfiguration());
            modelBuilder.Configurations.Add(new VwJobCodeConfiguration());
            modelBuilder.Configurations.Add(new VwOptInLeadKeyConfiguration());
            modelBuilder.Configurations.Add(new VwOptInLeadPjDegreeConfiguration());
            modelBuilder.Configurations.Add(new VwOptInLeadSurveyConfiguration());
            modelBuilder.Configurations.Add(new VwOptInLeadUserConfiguration());
            modelBuilder.Configurations.Add(new WeeklySurveyAnswerConfiguration());
            modelBuilder.Configurations.Add(new WeeklySurveyConfigConfiguration());
            modelBuilder.Configurations.Add(new WithdrawReasonConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AffiliateConfiguration(schema));
            modelBuilder.Configurations.Add(new AffiliateCountryConfiguration(schema));
            modelBuilder.Configurations.Add(new AffiliateSubConfiguration(schema));
            modelBuilder.Configurations.Add(new AllInboxClikBackupConfiguration(schema));
            modelBuilder.Configurations.Add(new AweberDemoUpdateConfiguration(schema));
            modelBuilder.Configurations.Add(new BatchFileExportLeadsSentConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrConsentConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrEmailAddressChangeConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrEmailDailyBatchCounterConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrJobCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrLeadConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrPayoutConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrQuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrQuestionAnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrQuestionDropdownConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSignupConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSignupErrorConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyInstructionConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyQuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyStatusOutputConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyStatusTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrSurveyWithdrawConfiguration(schema));
            modelBuilder.Configurations.Add(new CbrVerificationConfiguration(schema));
            modelBuilder.Configurations.Add(new CoregConfiguration(schema));
            modelBuilder.Configurations.Add(new CoregErrorConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new CountryLanguageDefaultConfiguration(schema));
            modelBuilder.Configurations.Add(new CpaNotificationConfiguration(schema));
            modelBuilder.Configurations.Add(new CpaNotificationJobConfiguration(schema));
            modelBuilder.Configurations.Add(new CpaNotificationNewSubConfiguration(schema));
            modelBuilder.Configurations.Add(new CpaNotificationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DashboardOverlayConfiguration(schema));
            modelBuilder.Configurations.Add(new DashboardOverlayEmailConfiguration(schema));
            modelBuilder.Configurations.Add(new DoiRotatingOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumAllowedMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumAReplyConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumATopicConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumBadwordConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumConfigNewConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumForumConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumGroupConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumGroupNameConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumMembersPendingConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumModeratorConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumNamefilterConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumReplyConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumSpamMailConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumSubscriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumTopicConfiguration(schema));
            modelBuilder.Configurations.Add(new ForumTotalConfiguration(schema));
            modelBuilder.Configurations.Add(new GeoLiteCityBlockConfiguration(schema));
            modelBuilder.Configurations.Add(new GeoLiteCityLocationConfiguration(schema));
            modelBuilder.Configurations.Add(new InstructionBulletConfiguration(schema));
            modelBuilder.Configurations.Add(new IpCountryConfiguration(schema));
            modelBuilder.Configurations.Add(new IpCountryNewConfiguration(schema));
            modelBuilder.Configurations.Add(new IpCountryOldConfiguration(schema));
            modelBuilder.Configurations.Add(new IpCountyNewBackupConfiguration(schema));
            modelBuilder.Configurations.Add(new IpLogConfiguration(schema));
            modelBuilder.Configurations.Add(new JobDataConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new LeadReversalConfiguration(schema));
            modelBuilder.Configurations.Add(new LoggedInFromClikConfiguration(schema));
            modelBuilder.Configurations.Add(new OccupationConfiguration(schema));
            modelBuilder.Configurations.Add(new OccupationEducationConfiguration(schema));
            modelBuilder.Configurations.Add(new OccupationIncomeConfiguration(schema));
            modelBuilder.Configurations.Add(new OccupationSectorConfiguration(schema));
            modelBuilder.Configurations.Add(new OfferConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInEmailLogConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInEmailVerbageConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInEmailVerbageListrakQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInEmailVerbageTestSendConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInLeadConfiguration(schema));
            modelBuilder.Configurations.Add(new OptInLeadBackupConfiguration(schema));
            modelBuilder.Configurations.Add(new PostQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new PqToBeDeletedConfiguration(schema));
            modelBuilder.Configurations.Add(new ProcessedSurveyIdConfiguration(schema));
            modelBuilder.Configurations.Add(new ProregAdvertiserConfiguration(schema));
            modelBuilder.Configurations.Add(new ProregAdvertiserFieldXrefConfiguration(schema));
            modelBuilder.Configurations.Add(new ProregFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new ProregLeadSentConfiguration(schema));
            modelBuilder.Configurations.Add(new ProregOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new ProregOfferReqFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new ProregOfferTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new ReferralConfiguration(schema));
            modelBuilder.Configurations.Add(new ReUploadElabConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrubLeadConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrubReportConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteBlacklistConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteBlacklistIpAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartEmailLinkClickConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartEmailLinkConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartEmailLinkFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartEmailLinkTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartExitLinkConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartExitLinkFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartExitLinkTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartLinkAiLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartLinkLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartWebLinkConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartWebLinkFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartWebLinkLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SmartWebLinkTargetConfiguration(schema));
            modelBuilder.Configurations.Add(new StateConfiguration(schema));
            modelBuilder.Configurations.Add(new UserNewConfiguration(schema));
            modelBuilder.Configurations.Add(new UserSurveyCountAfterConfiguration(schema));
            modelBuilder.Configurations.Add(new UserSurveyCountBeforeConfiguration(schema));
            modelBuilder.Configurations.Add(new VwCbrSurveyStatusWithPendingConfiguration(schema));
            modelBuilder.Configurations.Add(new VwDebugIpConfiguration(schema));
            modelBuilder.Configurations.Add(new VwJobCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new VwOptInLeadKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new VwOptInLeadPjDegreeConfiguration(schema));
            modelBuilder.Configurations.Add(new VwOptInLeadSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new VwOptInLeadUserConfiguration(schema));
            modelBuilder.Configurations.Add(new WeeklySurveyAnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new WeeklySurveyConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new WithdrawReasonConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);

        // Stored Procedures
        public int CommandExecute(string command, string comment, int? mode, string execute)
        {
            var commandParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Command", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = command, Size = -1 };
            if (commandParam.Value == null)
                commandParam.Value = System.DBNull.Value;

            var commentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Comment", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = comment, Size = -1 };
            if (commentParam.Value == null)
                commentParam.Value = System.DBNull.Value;

            var modeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Mode", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = mode.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!mode.HasValue)
                modeParam.Value = System.DBNull.Value;

            var executeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Execute", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = execute, Size = -1 };
            if (executeParam.Value == null)
                executeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[CommandExecute] @Command, @Comment, @Mode, @Execute", commandParam, commentParam, modeParam, executeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId)
        {
            int procResult;
            return DailyReportCostOfLeads(type, startDate, endDate, countryId, out procResult);
        }

        public System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel> DailyReportCostOfLeads(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId, out int procResult)
        {
            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = type, Size = 50 };
            if (typeParam.Value == null)
                typeParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryId", SqlDbType = System.Data.SqlDbType.Char, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DailyReportCostOfLeadsReturnModel>("EXEC @procResult = [dbo].[DailyReportCostOfLeads] @Type, @StartDate, @EndDate, @CountryId", typeParam, startDateParam, endDateParam, countryIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportCostOfLeadsReturnModel>> DailyReportCostOfLeadsAsync(string type, System.DateTime? startDate, System.DateTime? endDate, string countryId)
        {
            var typeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Type", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = type, Size = 50 };
            if (typeParam.Value == null)
                typeParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryId", SqlDbType = System.Data.SqlDbType.Char, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DailyReportCostOfLeadsReturnModel>("EXEC [dbo].[DailyReportCostOfLeads] @Type, @StartDate, @EndDate, @CountryId", typeParam, startDateParam, endDateParam, countryIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return DailyReportRevenueCpa(startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<DailyReportRevenueCpaReturnModel> DailyReportRevenueCpa(System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DailyReportRevenueCpaReturnModel>("EXEC @procResult = [dbo].[DailyReportRevenueCPA] @StartDate, @EndDate", startDateParam, endDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRevenueCpaReturnModel>> DailyReportRevenueCpaAsync(System.DateTime? startDate, System.DateTime? endDate)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DailyReportRevenueCpaReturnModel>("EXEC [dbo].[DailyReportRevenueCPA] @StartDate, @EndDate", startDateParam, endDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate)
        {
            int procResult;
            return DailyReportRoiByType(startDate, endDate, out procResult);
        }

        public System.Collections.Generic.List<DailyReportRoiByTypeReturnModel> DailyReportRoiByType(System.DateTime? startDate, System.DateTime? endDate, out int procResult)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<DailyReportRoiByTypeReturnModel>("EXEC @procResult = [dbo].[DailyReportRoiByType] @StartDate, @EndDate", startDateParam, endDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<DailyReportRoiByTypeReturnModel>> DailyReportRoiByTypeAsync(System.DateTime? startDate, System.DateTime? endDate)
        {
            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var endDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EndDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = endDate.GetValueOrDefault() };
            if (!endDate.HasValue)
                endDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<DailyReportRoiByTypeReturnModel>("EXEC [dbo].[DailyReportRoiByType] @StartDate, @EndDate", startDateParam, endDateParam).ToListAsync();

            return procResultData;
        }

        public int DevPurgeSurveyResultsForEmail(string emailAddress, int? surveyId)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var surveyIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SurveyID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = surveyId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!surveyId.HasValue)
                surveyIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[dev_PurgeSurveyResultsForEmail] @EmailAddress, @SurveyID", emailAddressParam, surveyIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck)
        {
            int procResult;
            return GetLeadsByDayForFraud(dateToCheck, out procResult);
        }

        public System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel> GetLeadsByDayForFraud(System.DateTime? dateToCheck, out int procResult)
        {
            var dateToCheckParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateToCheck", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateToCheck.GetValueOrDefault() };
            if (!dateToCheck.HasValue)
                dateToCheckParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetLeadsByDayForFraudReturnModel>("EXEC @procResult = [dbo].[GetLeadsByDayForFraud] @DateToCheck", dateToCheckParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetLeadsByDayForFraudReturnModel>> GetLeadsByDayForFraudAsync(System.DateTime? dateToCheck)
        {
            var dateToCheckParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateToCheck", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateToCheck.GetValueOrDefault() };
            if (!dateToCheck.HasValue)
                dateToCheckParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetLeadsByDayForFraudReturnModel>("EXEC [dbo].[GetLeadsByDayForFraud] @DateToCheck", dateToCheckParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd)
        {
            int procResult;
            return GetOffersReport(offerId, affiliateId, subid, dateStart, dateEnd, out procResult);
        }

        public System.Collections.Generic.List<GetOffersReportReturnModel> GetOffersReport(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd, out int procResult)
        {
            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Subid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subid, Size = 255 };
            if (subidParam.Value == null)
                subidParam.Value = System.DBNull.Value;

            var dateStartParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateStart", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateStart.GetValueOrDefault() };
            if (!dateStart.HasValue)
                dateStartParam.Value = System.DBNull.Value;

            var dateEndParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateEnd", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateEnd.GetValueOrDefault() };
            if (!dateEnd.HasValue)
                dateEndParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetOffersReportReturnModel>("EXEC @procResult = [dbo].[GetOffersReport] @OfferId, @AffiliateId, @Subid, @DateStart, @DateEnd", offerIdParam, affiliateIdParam, subidParam, dateStartParam, dateEndParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetOffersReportReturnModel>> GetOffersReportAsync(string offerId, string affiliateId, string subid, System.DateTime? dateStart, System.DateTime? dateEnd)
        {
            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Subid", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subid, Size = 255 };
            if (subidParam.Value == null)
                subidParam.Value = System.DBNull.Value;

            var dateStartParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateStart", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateStart.GetValueOrDefault() };
            if (!dateStart.HasValue)
                dateStartParam.Value = System.DBNull.Value;

            var dateEndParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DateEnd", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dateEnd.GetValueOrDefault() };
            if (!dateEnd.HasValue)
                dateEndParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetOffersReportReturnModel>("EXEC [dbo].[GetOffersReport] @OfferId, @AffiliateId, @Subid, @DateStart, @DateEnd", offerIdParam, affiliateIdParam, subidParam, dateStartParam, dateEndParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate)
        {
            int procResult;
            return GetRoiBySignupDate(signupDate, out procResult);
        }

        public System.Collections.Generic.List<GetRoiBySignupDateReturnModel> GetRoiBySignupDate(System.DateTime? signupDate, out int procResult)
        {
            var signupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SignupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = signupDate.GetValueOrDefault() };
            if (!signupDate.HasValue)
                signupDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRoiBySignupDateReturnModel>("EXEC @procResult = [dbo].[GetROIBySignupDate] @SignupDate", signupDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySignupDateReturnModel>> GetRoiBySignupDateAsync(System.DateTime? signupDate)
        {
            var signupDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SignupDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = signupDate.GetValueOrDefault() };
            if (!signupDate.HasValue)
                signupDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetRoiBySignupDateReturnModel>("EXEC [dbo].[GetROIBySignupDate] @SignupDate", signupDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId)
        {
            int procResult;
            return GetRoiBySub(affiliateId, offerId, subId, out procResult);
        }

        public System.Collections.Generic.List<GetRoiBySubReturnModel> GetRoiBySub(string affiliateId, string offerId, string subId, out int procResult)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRoiBySubReturnModel>("EXEC @procResult = [dbo].[GetROIBySub] @AffiliateId, @OfferId, @SubId", affiliateIdParam, offerIdParam, subIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiBySubReturnModel>> GetRoiBySubAsync(string affiliateId, string offerId, string subId)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetRoiBySubReturnModel>("EXEC [dbo].[GetROIBySub] @AffiliateId, @OfferId, @SubId", affiliateIdParam, offerIdParam, subIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber)
        {
            int procResult;
            return GetRoiForLast100Signups(affiliateId, offerId, subId, sampleNumber, out procResult);
        }

        public System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel> GetRoiForLast100Signups(string affiliateId, string offerId, string subId, int? sampleNumber, out int procResult)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var sampleNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SampleNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sampleNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sampleNumber.HasValue)
                sampleNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetRoiForLast100SignupsReturnModel>("EXEC @procResult = [dbo].[GetROIForLast100Signups] @AffiliateId, @OfferId, @SubId, @SampleNumber", affiliateIdParam, offerIdParam, subIdParam, sampleNumberParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetRoiForLast100SignupsReturnModel>> GetRoiForLast100SignupsAsync(string affiliateId, string offerId, string subId, int? sampleNumber)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var sampleNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SampleNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sampleNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sampleNumber.HasValue)
                sampleNumberParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetRoiForLast100SignupsReturnModel>("EXEC [dbo].[GetROIForLast100Signups] @AffiliateId, @OfferId, @SubId, @SampleNumber", affiliateIdParam, offerIdParam, subIdParam, sampleNumberParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetShippingAddressReturnModel> GetShippingAddress(string emailAddress)
        {
            int procResult;
            return GetShippingAddress(emailAddress, out procResult);
        }

        public System.Collections.Generic.List<GetShippingAddressReturnModel> GetShippingAddress(string emailAddress, out int procResult)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 250 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetShippingAddressReturnModel>("EXEC @procResult = [dbo].[GetShippingAddress] @EmailAddress", emailAddressParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetShippingAddressReturnModel>> GetShippingAddressAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 250 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetShippingAddressReturnModel>("EXEC [dbo].[GetShippingAddress] @EmailAddress", emailAddressParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList)
        {
            int procResult;
            return GetSignupsWithRevenue(affiliateId, offerId, subId, emailList, out procResult);
        }

        public System.Collections.Generic.List<GetSignupsWithRevenueReturnModel> GetSignupsWithRevenue(string affiliateId, string offerId, string subId, string emailList, out int procResult)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var emailListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailList", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailList, Size = 8000 };
            if (emailListParam.Value == null)
                emailListParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetSignupsWithRevenueReturnModel>("EXEC @procResult = [dbo].[GetSignupsWithRevenue] @AffiliateId, @OfferId, @SubId, @EmailList", affiliateIdParam, offerIdParam, subIdParam, emailListParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetSignupsWithRevenueReturnModel>> GetSignupsWithRevenueAsync(string affiliateId, string offerId, string subId, string emailList)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var emailListParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailList", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailList, Size = 8000 };
            if (emailListParam.Value == null)
                emailListParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetSignupsWithRevenueReturnModel>("EXEC [dbo].[GetSignupsWithRevenue] @AffiliateId, @OfferId, @SubId, @EmailList", affiliateIdParam, offerIdParam, subIdParam, emailListParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate()
        {
            int procResult;
            return GetTotalPayoutToDate(out procResult);
        }

        public System.Collections.Generic.List<GetTotalPayoutToDateReturnModel> GetTotalPayoutToDate(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetTotalPayoutToDateReturnModel>("EXEC @procResult = [dbo].[GetTotalPayoutToDate] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetTotalPayoutToDateReturnModel>> GetTotalPayoutToDateAsync()
        {
            var procResultData = await Database.SqlQuery<GetTotalPayoutToDateReturnModel>("EXEC [dbo].[GetTotalPayoutToDate] ").ToListAsync();

            return procResultData;
        }

        public HasEmailConvertedForIncentReturnModel HasEmailConvertedForIncent(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 256 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;


            var procResultData = new HasEmailConvertedForIncentReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[HasEmailConvertedForIncent]";
            cmd.Parameters.Add(emailAddressParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<HasEmailConvertedForIncentReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<HasEmailConvertedForIncentReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<HasEmailConvertedForIncentReturnModel> HasEmailConvertedForIncentAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 256 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;


            var procResultData = new HasEmailConvertedForIncentReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[HasEmailConvertedForIncent]";
            cmd.Parameters.Add(emailAddressParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<HasEmailConvertedForIncentReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<HasEmailConvertedForIncentReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public int IndexOptimize(string databases, string fragmentationHighLob, string fragmentationHighNonLob, string fragmentationMediumLob, string fragmentationMediumNonLob, string fragmentationLowLob, string fragmentationLowNonLob, int? fragmentationLevel1, int? fragmentationLevel2, int? pageCountLevel, string sortInTempdb, int? maxDop, int? fillFactor, string lobCompaction, int? statisticsSample, string partitionLevel, int? timeLimit, string indexes, string padIndex, string statisticsResample, string updateColumnStatistics, string onlyModifiedStatistics, string execute)
        {
            var databasesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Databases", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = databases, Size = -1 };
            if (databasesParam.Value == null)
                databasesParam.Value = System.DBNull.Value;

            var fragmentationHighLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationHigh_LOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationHighLob, Size = -1 };
            if (fragmentationHighLobParam.Value == null)
                fragmentationHighLobParam.Value = System.DBNull.Value;

            var fragmentationHighNonLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationHigh_NonLOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationHighNonLob, Size = -1 };
            if (fragmentationHighNonLobParam.Value == null)
                fragmentationHighNonLobParam.Value = System.DBNull.Value;

            var fragmentationMediumLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationMedium_LOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationMediumLob, Size = -1 };
            if (fragmentationMediumLobParam.Value == null)
                fragmentationMediumLobParam.Value = System.DBNull.Value;

            var fragmentationMediumNonLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationMedium_NonLOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationMediumNonLob, Size = -1 };
            if (fragmentationMediumNonLobParam.Value == null)
                fragmentationMediumNonLobParam.Value = System.DBNull.Value;

            var fragmentationLowLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationLow_LOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationLowLob, Size = -1 };
            if (fragmentationLowLobParam.Value == null)
                fragmentationLowLobParam.Value = System.DBNull.Value;

            var fragmentationLowNonLobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationLow_NonLOB", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = fragmentationLowNonLob, Size = -1 };
            if (fragmentationLowNonLobParam.Value == null)
                fragmentationLowNonLobParam.Value = System.DBNull.Value;

            var fragmentationLevel1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationLevel1", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = fragmentationLevel1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fragmentationLevel1.HasValue)
                fragmentationLevel1Param.Value = System.DBNull.Value;

            var fragmentationLevel2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@FragmentationLevel2", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = fragmentationLevel2.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fragmentationLevel2.HasValue)
                fragmentationLevel2Param.Value = System.DBNull.Value;

            var pageCountLevelParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageCountLevel", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageCountLevel.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageCountLevel.HasValue)
                pageCountLevelParam.Value = System.DBNull.Value;

            var sortInTempdbParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortInTempdb", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = sortInTempdb, Size = -1 };
            if (sortInTempdbParam.Value == null)
                sortInTempdbParam.Value = System.DBNull.Value;

            var maxDopParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaxDOP", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = maxDop.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maxDop.HasValue)
                maxDopParam.Value = System.DBNull.Value;

            var fillFactorParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FillFactor", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = fillFactor.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fillFactor.HasValue)
                fillFactorParam.Value = System.DBNull.Value;

            var lobCompactionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LOBCompaction", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lobCompaction, Size = -1 };
            if (lobCompactionParam.Value == null)
                lobCompactionParam.Value = System.DBNull.Value;

            var statisticsSampleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatisticsSample", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = statisticsSample.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!statisticsSample.HasValue)
                statisticsSampleParam.Value = System.DBNull.Value;

            var partitionLevelParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PartitionLevel", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = partitionLevel, Size = -1 };
            if (partitionLevelParam.Value == null)
                partitionLevelParam.Value = System.DBNull.Value;

            var timeLimitParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TimeLimit", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = timeLimit.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!timeLimit.HasValue)
                timeLimitParam.Value = System.DBNull.Value;

            var indexesParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Indexes", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = indexes, Size = -1 };
            if (indexesParam.Value == null)
                indexesParam.Value = System.DBNull.Value;

            var padIndexParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PadIndex", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = padIndex, Size = -1 };
            if (padIndexParam.Value == null)
                padIndexParam.Value = System.DBNull.Value;

            var statisticsResampleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StatisticsResample", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = statisticsResample, Size = -1 };
            if (statisticsResampleParam.Value == null)
                statisticsResampleParam.Value = System.DBNull.Value;

            var updateColumnStatisticsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UpdateColumnStatistics", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = updateColumnStatistics, Size = -1 };
            if (updateColumnStatisticsParam.Value == null)
                updateColumnStatisticsParam.Value = System.DBNull.Value;

            var onlyModifiedStatisticsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OnlyModifiedStatistics", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = onlyModifiedStatistics, Size = -1 };
            if (onlyModifiedStatisticsParam.Value == null)
                onlyModifiedStatisticsParam.Value = System.DBNull.Value;

            var executeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Execute", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = execute, Size = -1 };
            if (executeParam.Value == null)
                executeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[IndexOptimize] @Databases, @FragmentationHigh_LOB, @FragmentationHigh_NonLOB, @FragmentationMedium_LOB, @FragmentationMedium_NonLOB, @FragmentationLow_LOB, @FragmentationLow_NonLOB, @FragmentationLevel1, @FragmentationLevel2, @PageCountLevel, @SortInTempdb, @MaxDOP, @FillFactor, @LOBCompaction, @StatisticsSample, @PartitionLevel, @TimeLimit, @Indexes, @PadIndex, @StatisticsResample, @UpdateColumnStatistics, @OnlyModifiedStatistics, @Execute", databasesParam, fragmentationHighLobParam, fragmentationHighNonLobParam, fragmentationMediumLobParam, fragmentationMediumNonLobParam, fragmentationLowLobParam, fragmentationLowNonLobParam, fragmentationLevel1Param, fragmentationLevel2Param, pageCountLevelParam, sortInTempdbParam, maxDopParam, fillFactorParam, lobCompactionParam, statisticsSampleParam, partitionLevelParam, timeLimitParam, indexesParam, padIndexParam, statisticsResampleParam, updateColumnStatisticsParam, onlyModifiedStatisticsParam, executeParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertGiftCardRequest(string emailAddress, string countryId, decimal? requestAmount, int? optionId, string ip)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var requestAmountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestAmount", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = requestAmount.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!requestAmount.HasValue)
                requestAmountParam.Value = System.DBNull.Value;

            var optionIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OptionID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = optionId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!optionId.HasValue)
                optionIdParam.Value = System.DBNull.Value;

            var ipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IP", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ip, Size = 15 };
            if (ipParam.Value == null)
                ipParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InsertGiftCardRequest] @EmailAddress, @CountryID, @RequestAmount, @OptionID, @IP", emailAddressParam, countryIdParam, requestAmountParam, optionIdParam, ipParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertOptInLeadForClik(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string ip, bool? clik, System.DateTime? insertDate, string address)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 255 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var costParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Cost", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = cost.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!cost.HasValue)
                costParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var ipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IP", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ip, Size = 15 };
            if (ipParam.Value == null)
                ipParam.Value = System.DBNull.Value;

            var clikParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Clik", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = clik.GetValueOrDefault() };
            if (!clik.HasValue)
                clikParam.Value = System.DBNull.Value;

            var insertDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InsertDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = insertDate.GetValueOrDefault() };
            if (!insertDate.HasValue)
                insertDateParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InsertOptInLeadForClik] @EmailAddress, @Firstname, @Lastname, @Zip, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @OfferID, @AffiliateID, @SubID, @Cost, @CountryID, @IP, @Clik, @InsertDate, @Address", emailAddressParam, firstnameParam, lastnameParam, zipParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, offerIdParam, affiliateIdParam, subIdParam, costParam, countryIdParam, ipParam, clikParam, insertDateParam, addressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int InsertOptInLeadForPjd(string emailAddress, string firstname, string offerId, string affiliateId, string subId, string countryId, string ip)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 255 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var ipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IP", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ip, Size = 15 };
            if (ipParam.Value == null)
                ipParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[InsertOptInLeadForPJD] @EmailAddress, @Firstname, @OfferID, @AffiliateID, @SubID, @CountryID, @IP", emailAddressParam, firstnameParam, offerIdParam, affiliateIdParam, subIdParam, countryIdParam, ipParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public IsNewSubIdReturnModel IsNewSubId(string subId, System.DateTime? searchBeforeDate)
        {
            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 500 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var searchBeforeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SearchBeforeDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = searchBeforeDate.GetValueOrDefault() };
            if (!searchBeforeDate.HasValue)
                searchBeforeDateParam.Value = System.DBNull.Value;


            var procResultData = new IsNewSubIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[IsNewSubId]";
            cmd.Parameters.Add(subIdParam);
            cmd.Parameters.Add(searchBeforeDateParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<IsNewSubIdReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<IsNewSubIdReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<IsNewSubIdReturnModel> IsNewSubIdAsync(string subId, System.DateTime? searchBeforeDate)
        {
            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 500 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var searchBeforeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SearchBeforeDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = searchBeforeDate.GetValueOrDefault() };
            if (!searchBeforeDate.HasValue)
                searchBeforeDateParam.Value = System.DBNull.Value;


            var procResultData = new IsNewSubIdReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[IsNewSubId]";
            cmd.Parameters.Add(subIdParam);
            cmd.Parameters.Add(searchBeforeDateParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<IsNewSubIdReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<IsNewSubIdReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public System.Collections.Generic.List<OilReturnModel> Oil(string emailAddress)
        {
            int procResult;
            return Oil(emailAddress, out procResult);
        }

        public System.Collections.Generic.List<OilReturnModel> Oil(string emailAddress, out int procResult)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<OilReturnModel>("EXEC @procResult = [dbo].[OIL] @EmailAddress", emailAddressParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<OilReturnModel>> OilAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<OilReturnModel>("EXEC [dbo].[OIL] @EmailAddress", emailAddressParam).ToListAsync();

            return procResultData;
        }

        public int OptInLeadCompleteCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string password)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = 50 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadCompleteCoreg] @EmailAddress, @Firstname, @Lastname, @Zip, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @Password", emailAddressParam, firstnameParam, lastnameParam, zipParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, passwordParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public OptInLeadIsClikReturnModel OptInLeadIsClik(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;


            var procResultData = new OptInLeadIsClikReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[OptInLeadIsClik]";
            cmd.Parameters.Add(emailAddressParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<OptInLeadIsClikReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<OptInLeadIsClikReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<OptInLeadIsClikReturnModel> OptInLeadIsClikAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;


            var procResultData = new OptInLeadIsClikReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[OptInLeadIsClik]";
            cmd.Parameters.Add(emailAddressParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<OptInLeadIsClikReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<OptInLeadIsClikReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public int OptInLeadSetPassword(string emailAddress, string password)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = 50 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadSetPassword] @EmailAddress, @Password", emailAddressParam, passwordParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdate(int? siteVertical, string emailAddress, string salutation, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string occupation, string income, string homeOwnership, string education, string maritalStatus, int? children, string ethnicity, string password, string offerId, string affiliateId, string subId, decimal? cost, string countryId, string selectedLanguageId, System.DateTime? optInDate, System.DateTime? lastRunDate, int? lastSendOnDay, System.DateTime? optOutDate, bool? doNotSendTo, System.DateTime? confirmedDate, bool? thirdPartyListsUpdated, System.DateTime? insertDate, string ip, string uid)
        {
            var siteVerticalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SiteVertical", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = siteVertical.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!siteVertical.HasValue)
                siteVerticalParam.Value = System.DBNull.Value;

            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var salutationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Salutation", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = salutation, Size = 100 };
            if (salutationParam.Value == null)
                salutationParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var address2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address2, Size = 100 };
            if (address2Param.Value == null)
                address2Param.Value = System.DBNull.Value;

            var cityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@City", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = city, Size = 100 };
            if (cityParam.Value == null)
                cityParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 100 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var phoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Phone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phone, Size = 100 };
            if (phoneParam.Value == null)
                phoneParam.Value = System.DBNull.Value;

            var mobilephoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Mobilephone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = mobilephone, Size = 100 };
            if (mobilephoneParam.Value == null)
                mobilephoneParam.Value = System.DBNull.Value;

            var smartPhoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmartPhone", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = smartPhone.GetValueOrDefault() };
            if (!smartPhone.HasValue)
                smartPhoneParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var occupationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Occupation", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = occupation, Size = 100 };
            if (occupationParam.Value == null)
                occupationParam.Value = System.DBNull.Value;

            var incomeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Income", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = income, Size = 100 };
            if (incomeParam.Value == null)
                incomeParam.Value = System.DBNull.Value;

            var homeOwnershipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HomeOwnership", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = homeOwnership, Size = 100 };
            if (homeOwnershipParam.Value == null)
                homeOwnershipParam.Value = System.DBNull.Value;

            var educationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Education", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = education, Size = 100 };
            if (educationParam.Value == null)
                educationParam.Value = System.DBNull.Value;

            var maritalStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaritalStatus", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = maritalStatus, Size = 100 };
            if (maritalStatusParam.Value == null)
                maritalStatusParam.Value = System.DBNull.Value;

            var childrenParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Children", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = children.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!children.HasValue)
                childrenParam.Value = System.DBNull.Value;

            var ethnicityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ethnicity", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ethnicity, Size = 50 };
            if (ethnicityParam.Value == null)
                ethnicityParam.Value = System.DBNull.Value;

            var passwordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Password", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = password, Size = 50 };
            if (passwordParam.Value == null)
                passwordParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 255 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var costParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Cost", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = cost.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!cost.HasValue)
                costParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var selectedLanguageIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SelectedLanguageID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = selectedLanguageId, Size = 2 };
            if (selectedLanguageIdParam.Value == null)
                selectedLanguageIdParam.Value = System.DBNull.Value;

            var optInDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OptInDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = optInDate.GetValueOrDefault() };
            if (!optInDate.HasValue)
                optInDateParam.Value = System.DBNull.Value;

            var lastRunDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastRunDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = lastRunDate.GetValueOrDefault() };
            if (!lastRunDate.HasValue)
                lastRunDateParam.Value = System.DBNull.Value;

            var lastSendOnDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastSendOnDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = lastSendOnDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!lastSendOnDay.HasValue)
                lastSendOnDayParam.Value = System.DBNull.Value;

            var optOutDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OptOutDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = optOutDate.GetValueOrDefault() };
            if (!optOutDate.HasValue)
                optOutDateParam.Value = System.DBNull.Value;

            var doNotSendToParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DoNotSendTo", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = doNotSendTo.GetValueOrDefault() };
            if (!doNotSendTo.HasValue)
                doNotSendToParam.Value = System.DBNull.Value;

            var confirmedDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ConfirmedDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = confirmedDate.GetValueOrDefault() };
            if (!confirmedDate.HasValue)
                confirmedDateParam.Value = System.DBNull.Value;

            var thirdPartyListsUpdatedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ThirdPartyListsUpdated", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = thirdPartyListsUpdated.GetValueOrDefault() };
            if (!thirdPartyListsUpdated.HasValue)
                thirdPartyListsUpdatedParam.Value = System.DBNull.Value;

            var insertDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InsertDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = insertDate.GetValueOrDefault() };
            if (!insertDate.HasValue)
                insertDateParam.Value = System.DBNull.Value;

            var ipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@IP", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ip, Size = 15 };
            if (ipParam.Value == null)
                ipParam.Value = System.DBNull.Value;

            var uidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@UID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = uid, Size = 50 };
            if (uidParam.Value == null)
                uidParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdate] @SiteVertical, @EmailAddress, @Salutation, @Firstname, @Lastname, @Address, @Address2, @City, @State, @Zip, @Phone, @Mobilephone, @SmartPhone, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @Occupation, @Income, @HomeOwnership, @Education, @MaritalStatus, @Children, @Ethnicity, @Password, @OfferID, @AffiliateID, @SubID, @Cost, @CountryID, @SelectedLanguageID, @OptInDate, @LastRunDate, @LastSendOnDay, @OptOutDate, @DoNotSendTo, @ConfirmedDate, @ThirdPartyListsUpdated, @InsertDate, @IP, @UID", siteVerticalParam, emailAddressParam, salutationParam, firstnameParam, lastnameParam, addressParam, address2Param, cityParam, stateParam, zipParam, phoneParam, mobilephoneParam, smartPhoneParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, occupationParam, incomeParam, homeOwnershipParam, educationParam, maritalStatusParam, childrenParam, ethnicityParam, passwordParam, offerIdParam, affiliateIdParam, subIdParam, costParam, countryIdParam, selectedLanguageIdParam, optInDateParam, lastRunDateParam, lastSendOnDayParam, optOutDateParam, doNotSendToParam, confirmedDateParam, thirdPartyListsUpdatedParam, insertDateParam, ipParam, uidParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoreg(string emailAddress, string firstname, string lastname, string zip, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string offerId, string affiliateId, string countryId, string address)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = countryId, Size = 2 };
            if (countryIdParam.Value == null)
                countryIdParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoreg] @EmailAddress, @Firstname, @Lastname, @Zip, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @OfferId, @AffiliateId, @CountryId, @Address", emailAddressParam, firstnameParam, lastnameParam, zipParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, offerIdParam, affiliateIdParam, countryIdParam, addressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoregBirthDate(string emailAddress, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string offerId, string affiliateId)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoregBirthDate] @EmailAddress, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @OfferId, @AffiliateId", emailAddressParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, offerIdParam, affiliateIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoregCity(string emailAddress, string city, string offerId, string affiliateId)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var cityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@City", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = city, Size = 100 };
            if (cityParam.Value == null)
                cityParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoregCity] @EmailAddress, @City, @OfferId, @AffiliateId", emailAddressParam, cityParam, offerIdParam, affiliateIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoregPhone(string offerId, string emailAddress, string phone, string affiliateId)
        {
            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var phoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Phone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phone, Size = 100 };
            if (phoneParam.Value == null)
                phoneParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoregPhone] @OfferId, @EmailAddress, @Phone, @AffiliateId", offerIdParam, emailAddressParam, phoneParam, affiliateIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateCoregState(string emailAddress, string state, string offerId, string affiliateId)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 100 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 100 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateId", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 255 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateCoregState] @EmailAddress, @State, @OfferId, @AffiliateId", emailAddressParam, stateParam, offerIdParam, affiliateIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateforClikUpgrade(string emailAddress, bool? clik)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var clikParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Clik", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = clik.GetValueOrDefault() };
            if (!clik.HasValue)
                clikParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateforClikUpgrade] @EmailAddress, @Clik", emailAddressParam, clikParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int OptInLeadUpdateUserInfo(string emailAddress, string firstname, string lastname, string address, string address2, string city, string state, string zip, string phone, string mobilephone, bool? smartPhone, int? birthdayDay, int? birthdayMonth, int? birthdayYear, string gender, string ethnicity, bool? clik)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var address2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address2, Size = 100 };
            if (address2Param.Value == null)
                address2Param.Value = System.DBNull.Value;

            var cityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@City", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = city, Size = 100 };
            if (cityParam.Value == null)
                cityParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 100 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var phoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Phone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = phone, Size = 100 };
            if (phoneParam.Value == null)
                phoneParam.Value = System.DBNull.Value;

            var mobilephoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Mobilephone", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = mobilephone, Size = 100 };
            if (mobilephoneParam.Value == null)
                mobilephoneParam.Value = System.DBNull.Value;

            var smartPhoneParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SmartPhone", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = smartPhone.GetValueOrDefault() };
            if (!smartPhone.HasValue)
                smartPhoneParam.Value = System.DBNull.Value;

            var birthdayDayParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayDay", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayDay.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayDay.HasValue)
                birthdayDayParam.Value = System.DBNull.Value;

            var birthdayMonthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayMonth", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayMonth.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayMonth.HasValue)
                birthdayMonthParam.Value = System.DBNull.Value;

            var birthdayYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthdayYear", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = birthdayYear.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!birthdayYear.HasValue)
                birthdayYearParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var ethnicityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ethnicity", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = ethnicity, Size = 50 };
            if (ethnicityParam.Value == null)
                ethnicityParam.Value = System.DBNull.Value;

            var clikParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Clik", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = clik.GetValueOrDefault() };
            if (!clik.HasValue)
                clikParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[OptInLeadUpdateUserInfo] @EmailAddress, @Firstname, @Lastname, @Address, @Address2, @City, @State, @Zip, @Phone, @Mobilephone, @SmartPhone, @BirthdayDay, @BirthdayMonth, @BirthdayYear, @Gender, @Ethnicity, @Clik", emailAddressParam, firstnameParam, lastnameParam, addressParam, address2Param, cityParam, stateParam, zipParam, phoneParam, mobilephoneParam, smartPhoneParam, birthdayDayParam, birthdayMonthParam, birthdayYearParam, genderParam, ethnicityParam, clikParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId)
        {
            int procResult;
            return ProcessClickCredit(clickCode, email, surveyId, out procResult);
        }

        public System.Collections.Generic.List<ProcessClickCreditReturnModel> ProcessClickCredit(string clickCode, string email, int? surveyId, out int procResult)
        {
            var clickCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ClickCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = clickCode, Size = 256 };
            if (clickCodeParam.Value == null)
                clickCodeParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var surveyIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SurveyID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = surveyId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!surveyId.HasValue)
                surveyIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ProcessClickCreditReturnModel>("EXEC @procResult = [dbo].[ProcessClickCredit] @ClickCode, @Email, @SurveyID", clickCodeParam, emailParam, surveyIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ProcessClickCreditReturnModel>> ProcessClickCreditAsync(string clickCode, string email, int? surveyId)
        {
            var clickCodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ClickCode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = clickCode, Size = 256 };
            if (clickCodeParam.Value == null)
                clickCodeParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var surveyIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SurveyID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = surveyId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!surveyId.HasValue)
                surveyIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ProcessClickCreditReturnModel>("EXEC [dbo].[ProcessClickCredit] @ClickCode, @Email, @SurveyID", clickCodeParam, emailParam, surveyIdParam).ToListAsync();

            return procResultData;
        }

        public int SearchAllTables(string searchStr)
        {
            var searchStrParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SearchStr", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = searchStr, Size = 100 };
            if (searchStrParam.Value == null)
                searchStrParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SearchAllTables] @SearchStr", searchStrParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SearchAllTablesExact(string searchStr)
        {
            var searchStrParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SearchStr", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = searchStr, Size = 100 };
            if (searchStrParam.Value == null)
                searchStrParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SearchAllTablesExact] @SearchStr", searchStrParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SeedAfterCountsForUserSurvey(int? daysBackToQuery)
        {
            var daysBackToQueryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DaysBackToQuery", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = daysBackToQuery.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!daysBackToQuery.HasValue)
                daysBackToQueryParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SeedAfterCountsForUserSurvey] @DaysBackToQuery", daysBackToQueryParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SeedBeforeCountsFromAfter()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SeedBeforeCountsFromAfter] ", procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpDoi2ApplySignupBonus(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_doi2_ApplySignupBonus] @EmailAddress", emailAddressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpEecChangeEmail(string fromEmailAddress, string toEmailAddress)
        {
            var fromEmailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FromEmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fromEmailAddress, Size = 255 };
            if (fromEmailAddressParam.Value == null)
                fromEmailAddressParam.Value = System.DBNull.Value;

            var toEmailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ToEmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = toEmailAddress, Size = 255 };
            if (toEmailAddressParam.Value == null)
                toEmailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_ChangeEmail] @FromEmailAddress, @ToEmailAddress", fromEmailAddressParam, toEmailAddressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpEecCombineEmailAccounts(string fromEmailAddress, string toEmailAddress)
        {
            var fromEmailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FromEmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fromEmailAddress, Size = 255 };
            if (fromEmailAddressParam.Value == null)
                fromEmailAddressParam.Value = System.DBNull.Value;

            var toEmailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ToEmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = toEmailAddress, Size = 255 };
            if (toEmailAddressParam.Value == null)
                toEmailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_CombineEmailAccounts] @FromEmailAddress, @ToEmailAddress", fromEmailAddressParam, toEmailAddressParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango()
        {
            int procResult;
            return SpEecGetAwaitingEmailAddressesJango(out procResult);
        }

        public System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel> SpEecGetAwaitingEmailAddressesJango(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpEecGetAwaitingEmailAddressesJangoReturnModel>("EXEC @procResult = [dbo].[sp_eec_GetAwaitingEmailAddresses_Jango] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingEmailAddressesJangoReturnModel>> SpEecGetAwaitingEmailAddressesJangoAsync()
        {
            var procResultData = await Database.SqlQuery<SpEecGetAwaitingEmailAddressesJangoReturnModel>("EXEC [dbo].[sp_eec_GetAwaitingEmailAddresses_Jango] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak()
        {
            int procResult;
            return SpEecGetAwaitingOfferIdSendOnDayListrak(out procResult);
        }

        public System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel> SpEecGetAwaitingOfferIdSendOnDayListrak(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>("EXEC @procResult = [dbo].[sp_eec_GetAwaitingOfferIDSendOnDay_Listrak] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>> SpEecGetAwaitingOfferIdSendOnDayListrakAsync()
        {
            var procResultData = await Database.SqlQuery<SpEecGetAwaitingOfferIdSendOnDayListrakReturnModel>("EXEC [dbo].[sp_eec_GetAwaitingOfferIDSendOnDay_Listrak] ").ToListAsync();

            return procResultData;
        }

        public int SpEecGetCostPerLead(string affiliateId, string subId, string offerId, out decimal? cost)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var costParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Cost", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Output, Precision = 19, Scale = 4 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_GetCostPerLead] @AffiliateID, @SubID, @OfferID, @Cost OUTPUT", affiliateIdParam, subIdParam, offerIdParam, costParam, procResultParam);
            if (IsSqlParameterNull(costParam))
                cost = null;
            else
                cost = (decimal) costParam.Value;

            return (int) procResultParam.Value;
        }

        public int SpEecGetReceiveShareMultiplier(string affiliateId, string subId, string offerId, out double? receiveShareMultiplier)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var receiveShareMultiplierParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReceiveShareMultiplier", SqlDbType = System.Data.SqlDbType.Float, Direction = System.Data.ParameterDirection.Output, Precision = 53, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_GetReceiveShareMultiplier] @AffiliateID, @SubID, @OfferID, @ReceiveShareMultiplier OUTPUT", affiliateIdParam, subIdParam, offerIdParam, receiveShareMultiplierParam, procResultParam);
            if (IsSqlParameterNull(receiveShareMultiplierParam))
                receiveShareMultiplier = null;
            else
                receiveShareMultiplier = (double) receiveShareMultiplierParam.Value;

            return (int) procResultParam.Value;
        }

        public int SpEecIsDailyCapped(string affiliateId, string subId, string offerId, out bool? capped)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var cappedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Capped", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_IsDailyCapped] @AffiliateID, @SubID, @OfferID, @Capped OUTPUT", affiliateIdParam, subIdParam, offerIdParam, cappedParam, procResultParam);
            if (IsSqlParameterNull(cappedParam))
                capped = null;
            else
                capped = (bool) cappedParam.Value;

            return (int) procResultParam.Value;
        }

        public int SpEecIsMonthlyCapped(string affiliateId, string subId, string offerId, out bool? capped)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var cappedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Capped", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_IsMonthlyCapped] @AffiliateID, @SubID, @OfferID, @Capped OUTPUT", affiliateIdParam, subIdParam, offerIdParam, cappedParam, procResultParam);
            if (IsSqlParameterNull(cappedParam))
                capped = null;
            else
                capped = (bool) cappedParam.Value;

            return (int) procResultParam.Value;
        }

        public int SpEecIsSubEnabled(string affiliateId, string subId, string offerId, out bool? enabled)
        {
            var affiliateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AffiliateID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = affiliateId, Size = 50 };
            if (affiliateIdParam.Value == null)
                affiliateIdParam.Value = System.DBNull.Value;

            var subIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SubID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = subId, Size = 50 };
            if (subIdParam.Value == null)
                subIdParam.Value = System.DBNull.Value;

            var offerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OfferID", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = offerId, Size = 50 };
            if (offerIdParam.Value == null)
                offerIdParam.Value = System.DBNull.Value;

            var enabledParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Enabled", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Output };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_eec_IsSubEnabled] @AffiliateID, @SubID, @OfferID, @Enabled OUTPUT", affiliateIdParam, subIdParam, offerIdParam, enabledParam, procResultParam);
            if (IsSqlParameterNull(enabledParam))
                enabled = null;
            else
                enabled = (bool) enabledParam.Value;

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress)
        {
            int procResult;
            return SpToaGetCountryIdsForUser(emailAddress, out procResult);
        }

        public System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel> SpToaGetCountryIdsForUser(string emailAddress, out int procResult)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpToaGetCountryIdsForUserReturnModel>("EXEC @procResult = [dbo].[sp_toa_GetCountryIdsForUser] @EmailAddress", emailAddressParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetCountryIdsForUserReturnModel>> SpToaGetCountryIdsForUserAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpToaGetCountryIdsForUserReturnModel>("EXEC [dbo].[sp_toa_GetCountryIdsForUser] @EmailAddress", emailAddressParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress)
        {
            int procResult;
            return SpToaGetSurveyPanelSignupCount(emailAddress, out procResult);
        }

        public System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel> SpToaGetSurveyPanelSignupCount(string emailAddress, out int procResult)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpToaGetSurveyPanelSignupCountReturnModel>("EXEC @procResult = [dbo].[sp_toa_GetSurveyPanelSignupCount] @EmailAddress", emailAddressParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpToaGetSurveyPanelSignupCountReturnModel>> SpToaGetSurveyPanelSignupCountAsync(string emailAddress)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpToaGetSurveyPanelSignupCountReturnModel>("EXEC [dbo].[sp_toa_GetSurveyPanelSignupCount] @EmailAddress", emailAddressParam).ToListAsync();

            return procResultData;
        }

        public int UpdateShippingInfo(string emailAddress, string firstname, string lastname, string address, string address2, string city, string state, string zip)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 255 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var firstnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Firstname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = firstname, Size = 100 };
            if (firstnameParam.Value == null)
                firstnameParam.Value = System.DBNull.Value;

            var lastnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lastname", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = lastname, Size = 100 };
            if (lastnameParam.Value == null)
                lastnameParam.Value = System.DBNull.Value;

            var addressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address, Size = 100 };
            if (addressParam.Value == null)
                addressParam.Value = System.DBNull.Value;

            var address2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address2", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = address2, Size = 100 };
            if (address2Param.Value == null)
                address2Param.Value = System.DBNull.Value;

            var cityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@City", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = city, Size = 100 };
            if (cityParam.Value == null)
                cityParam.Value = System.DBNull.Value;

            var stateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@State", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = state, Size = 100 };
            if (stateParam.Value == null)
                stateParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 100 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[UpdateShippingInfo] @EmailAddress, @Firstname, @Lastname, @Address, @Address2, @City, @State, @Zip", emailAddressParam, firstnameParam, lastnameParam, addressParam, address2Param, cityParam, stateParam, zipParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int UpdateUserNewsWithPayout(string emailAddress, System.DateTime? requestDate)
        {
            var emailAddressParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EmailAddress", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = emailAddress, Size = 250 };
            if (emailAddressParam.Value == null)
                emailAddressParam.Value = System.DBNull.Value;

            var requestDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = requestDate.GetValueOrDefault() };
            if (!requestDate.HasValue)
                requestDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[UpdateUserNewsWithPayout] @EmailAddress, @RequestDate", emailAddressParam, requestDateParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

}
// </auto-generated>

